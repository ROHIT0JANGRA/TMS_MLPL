@using CodeLock.Models
@model GstRegistration

@using (Html.BeginForm("GstRegistration", "Gst", FormMethod.Post, new { @class = "j-forms", @id = "k-forms", enctype = "multipart/form-data" }))
{
    <div class="modal-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.CustomerCode, new { @class = "label" })
                    <div class="clearfix">
                        @Html.LabelFor(m => m.CustomerCode, Model.CustomerCode, new { @id = "lblGstCustomerCode", @class = "label-bold" })
                    </div>
                    @Html.HiddenFor(m => m.CustomerId)
                    @Html.HiddenFor(m => m.CustomerCode)
                    @Html.HiddenFor(m => m.CustomerName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.CustomerName, new { @class = "label" })
                    <div class="clearfix">
                        @Html.LabelFor(m => m.CustomerName, Model.CustomerName, new { @id = "lblGstCustomerName", @class = "label-bold" })
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    <div class="inline-group">
                        @Html.LabelFor(model => model.IsGstRegistered, new { @class = "label" })
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.IsGstRegistered, true, new { @id = "rdIsGstRegisteredYes", @checked = "checked" })
                            <i></i>
                            @Html.LabelFor(model => model.IsGstRegistered, "Yes", new { @for = "rdIsGstRegisteredYes" })
                        </label>
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.IsGstRegistered, false, new { @id = "rdIsGstRegisteredNo" })
                            <i></i>
                            @Html.LabelFor(model => model.IsGstRegistered, "No", new { @for = "rdIsGstRegisteredNo" })
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- start prepend big file button -->
        <div class="row" id="dvDeclarationDocumentDetail">
            <div class="col-sm-12">
                <div class="unit">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeclarationDocumentName, new { @class = "label" })
                        <div class="input prepend-big-btn">
                            <label class="icon-right" for="prepend-big-btn">
                                <i class="fa fa-download"></i>
                            </label>
                            <div class="file-button">
                                Browse
                                <input class="form-control" id="fuDocumentAttachment" type="file" name="Attachment" onchange="document.getElementById('prepend-big-btn').value = this.value;">
                                @Html.HiddenFor(model => model.DeclarationDocumentName, new { @id = "hdnDeclarationDocumentName", @Value = Model.DeclarationDocumentName })
                            </div>
                            <input class="form-control" type="text" id="prepend-big-btn" readonly="" placeholder="no file selected">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- end prepend big file button -->
        <div id="dvRegistrationGstTinNoDetail">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.StateName, new { @class = "label" })
                        <div class="input">
                            @Html.HiddenFor(model => model.StateId, new { @id = "hdnGstStateId" })
                            @Html.TextBoxFor(model => model.StateName, null, new { @class = "form-control", @id = "txtGstStateName" })
                        </div>
                        @Html.ValidationMessageFor(model => model.StateName)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CityName, new { @class = "label" })
                        <div class="input">
                            @Html.HiddenFor(model => model.CityId, new { @id = "hdnGstCityId" })
                            @Html.TextBoxFor(model => model.CityName, null, new { @class = "form-control", @id = "txtGstCityName" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CityName)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, new { @class = "label" })
                        <div class="input">
                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @id = "txtGstAddress" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Address)

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProvisionalId, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.ProvisionalId, new { @class = "form-control", @id = "txtGstProvisionalId" })
                        </div>
                        @Html.ValidationMessageFor(model => model.ProvisionalId)

                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.GstTinNo, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.GstTinNo, new { @class = "form-control", @id = "txtGstTinNo" })
                        </div>
                        @Html.ValidationMessageFor(model => model.GstTinNo)

                    </div>
                </div>
            </div>
        </div>
        @*<div class="form-footer">
                <button id="btnSave" type="submit" class="btn btn-success primary-btn" tabindex="3">Create</button>
            </div>*@
    </div>
}

<script>
    $(document).ready(function () {
        debugger;
        RegisterValidation();
        cityMasterUrl = '@Url.Action("", "City", new { Area = "Master" })';
        lblGstCustomerCode = $('#lblGstCustomerCode');
        lblGstCustomerName = $('#lblGstCustomerName');
        rdIsGstRegisteredYes = $('#rdIsGstRegisteredYes');
        rdIsGstRegisteredNo = $('#rdIsGstRegisteredNo');
        hdnGstStateId = $('#hdnGstStateId');
        txtGstStateName = $('#txtGstStateName');
        hdnGstCityId = $('#hdnGstCityId');
        txtGstCityName = $('#txtGstCityName');
        txtGstAddress = $('#txtGstAddress');
        dvDeclarationDocumentDetail = $('#dvDeclarationDocumentDetail');
        hdnDeclarationDocumentName = $('#hdnDeclarationDocumentName');
        dvRegistrationGstTinNoDetail = $('#dvRegistrationGstTinNoDetail');
        txtGstProvisionalId = $('#txtGstProvisionalId');
        txtGstTinNo = $('#txtGstTinNo');

        rdIsGstRegisteredYes.change(OnIsGstRegisteredChange);
        rdIsGstRegisteredNo.change(OnIsGstRegisteredChange);
        OnIsGstRegisteredChange();
        StateAutoComplete('txtGstStateName', 'hdnGstStateId');
        txtGstStateName.blur(function () { return IsStateNameExist(txtGstStateName, hdnGstStateId); });
        AutoComplete('txtGstCityName', cityMasterUrl + '/GetAutoCompleteCityNameListByStateId', 'cityName', 'l', 'l', 'l', 'd', '', 'hdnGstCityId', '', '', function () { return [{ Key: 'stateId', Value: hdnGstStateId.val() }]; });
        txtGstCityName.blur(function () { return IsCityNameExist(txtGstCityName, hdnGstCityId); });

        if (hdnDeclarationDocumentName.val() != '' || txtGstTinNo.val() != '')
            GoBack();

        txtGstTinNo.blur(function () {
            $(this).val($(this).val().toUpperCase());
            if (!IsValidGstTinNo($(this).val())) {
                ShowMessage('Invalid GSTIN No.');
                $(this).val('');
            }
        });

    });

    function OnIsGstRegisteredChange() {
        dvDeclarationDocumentDetail.showHide(!rdIsGstRegisteredYes.IsChecked);
        dvRegistrationGstTinNoDetail.showHide(rdIsGstRegisteredYes.IsChecked);
    }

    function GoBack() {
        if (window.opener != null && !window.opener.closed) {
            if (!rdIsGstRegisteredYes.IsChecked)
                window.opener.gstDetails.DeclarationFileName = $('#hdnDeclarationDocumentName').val();

            if (lblGstCustomerCode.text().substring(0, 2) == 'WC' && rdIsGstRegisteredYes.IsChecked) {
                window.opener.gstDetails.WalkingGstTinNo = txtGstTinNo.val();
                window.opener.gstDetails.CustomerCode = lblGstCustomerCode.text();
            }
            window.opener.document.getElementById('txtGstProcessor').focus();
            window.close();
        }
    }
</script>

