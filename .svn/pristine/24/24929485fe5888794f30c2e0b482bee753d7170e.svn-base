@model CodeLock.Models.ThcSummary
@using CodeLock.Models
@using Secure_Coding.MvcSecurityExtensions;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .label_1 {
        padding: 5px;
    }
    .danger {
        color: #f44336;
    }

    .scroll1 {
        height: 400px;
        overflow: scroll;
    } 
</style>

<script>
    let scannedData = '';
/*    const displayBox = document.getElementById('txtScan');*/
    $(document).ready(function () {
        ThcUrl = '@Url.Action("", "Thc", new { Area = "Operation" })';
        ruleMasterUrl = '@Url.Action("", "Rules", new { Area = "Master" })';
        vendorMasterUrl = '@Url.Action("", "Vendor", new { Area = "Master" })';
        arrivalConditionList = JSON.parse('@Html.Raw(ViewBag.ArrivalConditionList)');
        deliveryProcessList = JSON.parse('@Html.Raw(ViewBag.DeliveryProcessList)');
        warehouseList = JSON.parse('@Html.Raw(ViewBag.WarehouseList)');
        loginLocationId = '@SessionUtility.LoginLocationId';
        loginLocationCode = '@SessionUtility.LoginLocationCode';
        docketNomenclature = '@SessionUtility.DocketNomenClature';
        currentDate = '@DateTime.Now';
        dateTimeFormat = '@ConfigHelper.JsDateFormat' + ' ' + '@ConfigHelper.TimeFormat';
        lateDeliveryReasonList = JSON.parse('@Html.Raw(ViewBag.LateDeliveryReasonList)');
        shortReasonList = JSON.parse('@Html.Raw(ViewBag.ShortReasonList)');
        extraReasonList = JSON.parse('@Html.Raw(ViewBag.ExtraReasonList)');
        pilferReasonList = JSON.parse('@Html.Raw(ViewBag.PilferReasonList)');
        damageReasonList = JSON.parse('@Html.Raw(ViewBag.DamageReasonList)');
        labourVendorList = JSON.parse('@Html.Raw(ViewBag.LabourVendorLists)');
        btnShowScan = $('#btnShowScan');
        txtScan = $('#txtScan');
        btnShowScan.click(OnShowScan);

        $('#txtScan').keyup(
            function (event) {
                scannedData += event.key;
                if (scannedData.length == 15) {
                    txtScan.val(scannedData);
                    var index = 0;
                    $('#lblScanMessage').text("");
                    $('[id*="hdnDocketId"]').each(function () {
                        var hdnDocketId = $(this);
                        var hdnDocketNoBarcode = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketNoBarcode'));
                        var hdnDocketNoBarcodeScan = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketNoBarcodeScan'));
                        var hdnDocketPackages = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketPackages'));
                        var txtArrivalPackages = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'txtArrivalPackages'));

                        var BarcodeArray = hdnDocketNoBarcode.val().split(",");
                        var IsmatchBarcode = false;
                        for (var i = 0; i < BarcodeArray.length; i++) {
                            if (BarcodeArray[i] === scannedData) {
                                IsmatchBarcode = true;
                            }
                        }
                        // Scaned Barcode 
                        var BarcodeScanArray = hdnDocketNoBarcodeScan.val().split(",");
                        var IsmatchBarcodeScan = false;
                        for (var i = 0; i < BarcodeScanArray.length; i++) {
                            if (BarcodeScanArray[i] === scannedData) {
                                IsmatchBarcodeScan = true;
                                index = 1;
                            }
                        }

                        if (IsmatchBarcodeScan == false && IsmatchBarcode == true) {

                            if (hdnDocketNoBarcodeScan.val() == "") {
                                hdnDocketNoBarcodeScan.val(scannedData);
                            }
                            else {
                                hdnDocketNoBarcodeScan.val(hdnDocketNoBarcodeScan.val()+","+scannedData);
                            }

                            if (parseInt(hdnDocketPackages.val()) < (parseInt(txtArrivalPackages.val()) + 1)) {
                                
                            }
                            else {
                                txtArrivalPackages.val(parseInt(txtArrivalPackages.val()) + 1);
                                index = 1;
                            }
                        }
                        if (IsmatchBarcodeScan == true) {
                            $('#lblScanMessage').text("Bar Code already scanned");
                        }
                    });

                    if (index == 0) {
                        $('#lblScanMessage').text("Bar Code is not valid");
                    }


                    scannedData = '';
                }
        });

    });
    function beep() {
        var snd = new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
        snd.play();
    }

    function OnShowScan() {

        $('#MyPopup').modal('show');
        $('#MyPopup').on('shown.bs.modal', function () {
            $('#txtScan').focus();
        });
    }

    function OnShowBarcodeList(DocketId, DocketNo) {

        //beep();

        $('#lblDocketHeader').text("Docket No. :- " + DocketNo);


        $("#dtDocketDetailsBarcode").html("");
        var ExportCol = '<thead><tr style="background-color:#E5E7E9;">';
        ExportCol = ExportCol + '<th style="width:5%">S. No. </th>';
        ExportCol = ExportCol + '<th style="width:10%">Bar Code </th>';
        ExportCol = ExportCol + '<th style="width:10%">Scan Status</th>';
        ExportCol = ExportCol + '</tr>';
        ExportCol = ExportCol + '</thead>';

        $('#dtDocketDetailsBarcode').append(ExportCol);
        var sno = 0;
        $('[id*="hdnDocketId"]').each(function () {
            var hdnDocketId = $(this);
            var hdnDocketNoBarcode = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketNoBarcode'));
            var hdnDocketNoBarcodeScan = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketNoBarcodeScan'));
            var hdnDocketPackages = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'hdnDocketPackages'));
            var txtArrivalPackages = $('#' + hdnDocketId.Id.replace('hdnDocketId', 'txtArrivalPackages'));

            if (parseInt(hdnDocketId.val()) == parseInt(DocketId)) {

                var BarcodeArray = hdnDocketNoBarcode.val().split(",");
                for (var i = 0; i < BarcodeArray.length; i++) {

                    var BarcodeScanArray = hdnDocketNoBarcodeScan.val().split(",");
                    var IsmatchBarcodeScan = false;
                    for (var j = 0; j < BarcodeScanArray.length; j++) {
                        if (BarcodeScanArray[j] === BarcodeArray[i]) {
                            IsmatchBarcodeScan = true;
                        }
                    }
                    sno = sno + 1;

                    var colsInner = '<tr>';
                    colsInner = colsInner + '<td style="width:5%">' + sno + '</td>';
                    colsInner = colsInner + '<td style="width:10%">' + BarcodeArray[i] + ' </td>';
                    if (IsmatchBarcodeScan == true)
                        colsInner = colsInner + '<td style="color:#116530;">Scanned </td>';
                    else
                        colsInner = colsInner + '<td style="color:#0000FF;">Pending </td>';

                    colsInner = colsInner + '</tr>';

                    $('#dtDocketDetailsBarcode').append(colsInner);

                }
                // Scaned Barcode 

            }


        });

        $('#MyPopupBarcodeList').modal('show');
    }


</script>
<script src="@Url.Content("~/Areas/Operation/Views/Thc/StockUpdateScanning.js?v12")"></script>

<div id="dvWizard">
    <div class="panel-body">
        @using (Html.BeginForm("StockUpdate", "Thc", FormMethod.Post, new { @class = "j-forms", @id = "j-forms" }))
        {
            @Html.AntiForgeryToken()
        <div class="tab-content">
            <div class="tab-pane">
                <div class="row">
                    <div class="col-sm-4">
                        <div>
                            @Html.Label("THC Date", new { @class = "label" })
                        </div>
                        <div id="drThcDate"></div>
                    </div>
                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.ArrivalLocationCode, new { @class = "label" })
                        @Html.HiddenFor(model => model.ArrivalLocationCode, new { @id = "hdnCustomerLocation" })
                        @Html.DropDownListFor(model => model.ArrivalLocationCode, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2-multiple", @multiple = "", @id = "ddlArrivalLocation", @placeholder = "Select Location" })
                        @Html.ValidationMessageFor(model => model.ArrivalLocationCode)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @Html.Label("", " ", new { @class = "label" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Label("txtThcNo", "THC No", new { @class = "label" })
                            <div class="input">
                                @Html.TextBox("txtThcNo", "", new { @class = "form-control", @id = "txtThcNo" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.VehicleNo, new { @class = "label" })
                            <div class="input">
                                @Html.TextBoxFor(model => model.VehicleNo, new { @class = "form-control", @id = "txtVehicleNo" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Label(SessionUtility.DocketNomenClature + " No(s)", new { @class = "label" })
                            <div class="input">
                                @Html.TextBoxFor(model => model.DocketNo, new { @class = "form-control", @id = "txtDocketNo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane">
                <div class="row">
                    <div class="col-sm-12">
                        <div>
                            <table id="dtThcDetails"></table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane">
                <div class="page-separator">Thc Information</div>
                <div class="row">
                    <div class="col-sm-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ThcNo, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblThcNo", @class = "label-bold" })
                            @Html.HiddenFor(model => model.ThcId, new { @id = "hdnThcId" })
                            @Html.HiddenFor(model => model.ThcNo, new { @id = "hdnThcNo" })
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ThcDate, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblThcDate", @class = "label-bold" })
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ActualArrivalDate, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblActualArrivalDate", @class = "label-bold" })
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ToLocationCode, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblToLocationCode", @class = "label-bold" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.VehicleNo, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblVehicleNo", @class = "label-bold" })
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Label("Total " + SessionUtility.DocketNomenClature, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblTotalDocket", @class = "label-bold" })
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TotalManifest, new { @class = "label" })
                            @Html.Label(" ", new { @id = "lblTotalManifest", @class = "label-bold" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "StockUpdateDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.StockUpdateDate), IsDateOnly = false, IsRequired = true, AllowFutureDate = false, AllowPastDate = true })
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StockUpdateRemarks, new { @class = "label" })
                            <div class="input">
                                @Html.TextBoxFor(model => model.StockUpdateRemarks, new { @class = "form-control", @id = "txtStockUpdateRemarks" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <button type="button" id="btnShowScan" class="btn btn-danger primary-btn">Scan</button>
                    </div>
                </div>

                <div id="MyPopup" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h4 class="modal-title">
                                    Barcode Scanning
                                </h4>
                            </div>
                            <div class="modal-body">

                                <input id="txtScan" class="form-control" tabindex="1" /> <br />
                                <label id="lblScanMessage" class="label_1 danger" style="color:red" /> <br />
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-dismiss="modal" tabindex="2">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="MyPopupBarcodeList" class="modal fade" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h4 class="modal-title">
                                  <label id="lblDocketHeader" class="label_1"  />
                                </h4>
                            </div>
                            <div class="modal-body">
                                <div class="scroll1">
                                    <table id="dtDocketDetailsBarcode"></table>
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-dismiss="modal" tabindex="2">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="page-separator">Manifest List  </div>
                <span id="spnDocketDetails">
                    <table id="dtDocketDetails">
                        <thead>
                            <tr>
                                <th style="min-width: 3%">@Html.Label("", "ManifestId", new { @class = "label-bold" })</th>
                                <th style="min-width: 3%">@Html.Label("", "DocketId", new { @class = "label-bold" })</th>
                                <th style="min-width: 3%">@Html.Label("", SessionUtility.DocketNomenClature, new { @class = "label-bold" })</th>
                                <th style="min-width: 20%">@Html.Label("", SessionUtility.DocketNomenClature + " Date", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "Origin", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "Destination", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "From City", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "To City", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "EDD", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "Arrival Packages", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "Scaned Packages", new { @class = "label-bold" })</th>
                                <th style="min-width: 11%;">@Html.Label("", "Arrival Actual Weight", new { @class = "label-bold" })</th>
                                <th width="25px">
                                    @Html.LabelFor(model => model.ManifestList[0].ArrivalConditionId, new { @class = "label-bold" })
                                    <div class="select">
                                        @Html.DropDownList("ArrivalConditionId", new SelectList(ViewBag.ArrivalConditions, "Value", "Name"), "Select Arrival Condition", new { @class = "form-control", @id = "ddlHeaderArrivalConditionId" })
                                        <i></i>
                                    </div>
                                </th>

                                <th width="25px" id="thLabourVendor">
                                    @Html.LabelFor(model => model.ManifestList[0].LabourVendorId, new { @class = "label-bold" })
                                    <div class="select">
                                        @Html.DropDownList("LabourVendorId", new SelectList(ViewBag.LabourVendorList, "Value", "Name"), "Select Vendor", new { @class = "form-control", @id = "ddlHeaderLabourVendorId" })
                                        <i></i>
                                    </div>
                                </th>

                                <th width="25px">
                                    @Html.LabelFor(model => model.ManifestList[0].WareHouseId, new { @class = "label-bold" })
                                    <div class="select">
                                        @Html.DropDownList("WareHouseId", new SelectList(ViewBag.Warehouses, "Value", "Name"), "Select Warehouse", new { @class = "form-control", @id = "ddlHeaderWareHouseId" })
                                        <i></i>
                                    </div>
                                </th>
                                <th width="25px">
                                    @Html.LabelFor(model => model.ManifestList[0].DeliveryProcessId, new { @class = "label-bold" })
                                    <div class="select">
                                        @Html.DropDownList("DeliveryProcessId", new SelectList(ViewBag.DeliveryProcess, "Value", "Name"), "Select Delivery Process", new { @class = "form-control", @id = "ddlHeaderDeliveryProcessId" })
                                        <i></i>
                                    </div>
                                    <div id="dvDeliveryDetail" style="display:none">
                                        <div class="input">
                                            @Html.TextBox("DeliveryDateTime", "", new { @class = "form-control", @id = "txtHeaderDeliveryDateTime", @placeholder = "Delivery Date Time" })
                                        </div>
                                        <div class="input">
                                            @Html.TextBox("PersonName", "", new { @class = "form-control", @id = "txtHeaderPersonName", @placeholder = "Person" })
                                        </div>
                                        <div class="input">
                                            @Html.TextBox("Remarks", "", new { @class = "form-control", @id = "txtHeaderRemarks", @placeholder = "Remarks" })
                                        </div>
                                    </div>
                                </th>
                                <th style="min-width: 11%;">@Html.Label("", "DEPS", new { @class = "label-bold" })</th>
                            </tr>
                        </thead>

                    </table>
                </span>
            </div>
            </div>
        }
    </div>
</div>