@using CodeLock.Models
@model Asn
@using Secure_Coding.MvcSecurityExtensions;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/scripts/common-event.js"></script>
@using (Html.BeginForm("Insert", "Asn", FormMethod.Post, new { @class = "j-forms", @id = "j-forms" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.AsnId)
    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.AsnNo, new { @class = "label" })
                    <div class="system-label">
                        @Html.LabelFor(model => model.AsnNo, "<System Generated>")
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { DefaultDate = Model.AsnDateTime.ConvertToDateTime(), FieldName = "AsnDateTime", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.AsnDateTime), IsDateOnly = false, IsRequired = true, AllowFutureDate = false, AllowPastDate = false, MinDate = DateTime.Now.Date, MaxDate = DateTime.Now.Date.AddDays(1) })
                </div>
            </div>

            <div class="col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.PoNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.PoNo, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { DefaultDate = Model.PoDate, FieldName = "PoDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.PoDate), IsRequired = false, AllowFutureDate = true, AllowPastDate = true, SetBlank = true })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.SupplierType, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.SupplierType, new List<SelectListItem>
                                                                        {
                                                                            new SelectListItem{ Text="Supplier", Value = "1" },
                                                                            new SelectListItem{ Text="Customer", Value = "2" },
                                                                            new SelectListItem{ Text="Warehouse", Value = "3" },
                                                                         }, new { @class = "form-control", @id = "ddlSupplierType" })
                    
                    </div>
                    @Html.ValidationMessageFor(model => model.SupplierType)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.SupplierCode, new { @class = "label", @id = "lblSupplierCode" })
                    <div class="input">
                        @Html.HiddenFor(model => model.SupplierId, new { @id = "hdnSupplierId" })
                        @Html.TextBoxFor(model => model.SupplierCode, null, new { @class = "form-control", @id = "txtSupplierCode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.SupplierCode)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.Label(" ", " ", new { @class = "label" })
                    <div class="clearfix">
                    </div>
                    @Html.Label("lblSupplierName", " ", new { @class = "label-bold", @id = "lblSupplierName" })
                </div>
            </div>

        </div>
        <div class="row">


            @*<div class="col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.InvoiceNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.InvoiceNo, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.InvoiceNo)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { DefaultDate = Model.InvoiceDate, FieldName = "InvoiceDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.InvoiceDate), IsRequired = true, AllowFutureDate = true, AllowPastDate = true, SetBlank = false })
                </div>
            </div>*@
        </div>

        <div class="row">
            <div class="col-sm-12">
                @Html.ValidationMessageFor(m => m.Details)
                <table id="dtProduct" style="min-height:35vh">
                    <thead>
                        <tr>
                            <th>Sku Code</th>
                            <th>Sku Description</th>
                            <th>UOM</th>
                            @*<th>UOM Value</th>*@
                            <th>Quantity</th>
                            @*<th>Batch Number</th>*@
                            <th>Lot Date</th>
                            <th>MRP</th>
                            <th>Volume</th>
                            <th width="95px">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Details.Count; i++)
                        {
                            var item = Model.Details[i];
                            var j = i.ToString();
                            <tr>
                                <td>
                                    @Html.HiddenFor(m => item.SkuId, new { id = "hdnSkuId" + j, @Name = "Details[" + j + "].SkuId" })
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.SkuCode, new { @class = "form-control", @id = "txtSkuCode" + j, @Name = "Details[" + j + "].SkuCode" })
                                    </div>
                                    @Html.ValidationMessage("Details[" + j + "].SkuCode")
                                </td>
                                <td style="width:25%">
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.SkuDescription, new { @class = "form-control textlabel", @id = "txtSkuDescription" + j })
                                    </div>
                                </td>
                                <td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.Uom, new { @class = "form-control textlabel", @id = "txtUom" + j })
                                        @Html.HiddenFor(m => item.UomQuantity, new { @id = "hdnUomQuantity" + j, @Name = "Details[" + j + "].UomQuantity" })
                                    </div>
                                </td>
                                @*<td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.UomQuantity, new { @class = "form-control textlabel", @id = "txtUomQuantity" + j, @Name = "Details[" + j + "].UomQuantity" })
                                    </div>
                                </td>*@

                                <td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.Quantity, new { @class = "form-control text numric3", @id = "txtQuantity" + j, @Name = "Details[" + j + "].Quantity" })
                                    </div>
                                    @Html.ValidationMessage("Details[" + j + "].Quantity")

                                </td>
                                @*<td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.BatchNumber, new { @class = "form-control", @id = "txtBatchNumber" + j, @Name = "Details[" + j + "].BatchNumber" })
                                    </div>
                                    @Html.ValidationMessage("Details[" + j + "].BatchNumber")
                                </td>*@
                                <td>
                                    <div class="input">
                                        @*@Html.TextBoxFor(m => item.ManufacturingDate, new { @class = "form-control numeric", @id = "txtManufacturingDate" + j, @Name = "Details[" + j + "].ManufacturingDate" })*@
                                        @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "Details[" + j + "].ManufacturingDate", FieldCaption = @Html.DisplayNameFor(m => Model.Details[i].ManufacturingDate).ToString(), UseFieldCaption = false, IsRequired = true, IsDateOnly = true, AllowFutureDate = false, AllowPastDate = true })
                                    </div>
                                </td>
                                <td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.UnitPrice, new { @class = "form-control text numric3", @id = "txtUnitPrice" + j, @Name = "Details[" + j + "].UnitPrice" })
                                    </div>
                                </td>
                                <td>
                                    <div class="input">
                                        @Html.TextBoxFor(m => item.Volume, new { @class = "form-control textlabel", @id = "txtVolume" + j, @Name = "Details[" + j + "].Volume" })
                                    </div>
                                    @Html.ValidationMessage("Details[" + j + "].Volume")
                                </td>
                                <td>
                                </td>
                            </tr>

                        }

</tbody>


                </table>
            </div>
        </div>
        <div class="form-footer">
            <button type="submit" id="btnSubmit" class="btn btn-success primary-btn" tabindex="3">Generate</button>
        </div>
    </div>
}

<script>
    var companyId = '@SessionUtility.CompanyId', isCoupon = 0, unitPrice = 0;
    $(document).ready(function () {
        SetPageLoad('ASN', 'Entry', 'txtAsnDateTime');

        lblSupplierCode = $('#lblSupplierCode');
        txtSupplierCode = $('#txtSupplierCode');
        hdnSupplierId = $('#hdnSupplierId');
        ddlSupplierType = $('#ddlSupplierType');
        lblSupplierName = $('#lblSupplierName');

        ddlSupplierType.change(OnSupplierTypeChange);
        txtSupplierCode.blur(CheckValidSupplier);

        InitGrid('dtProduct', false, 7, InitProductTable);

        OnSupplierTypeChange();
        $('#btnSubmit').click(OnSubmit);
    });

    function OnSupplierTypeChange() {
        hdnSupplierId.val('');
        txtSupplierCode.val('');
        lblSupplierName.text('');

        if (ddlSupplierType.val() == 1) {
            SupplierAutoComplete(txtSupplierCode.Id, hdnSupplierId.Id);
            lblSupplierCode.text("Supplier");
            AddRequired(txtSupplierCode, "Please enter Supplier");
        }
        else if (ddlSupplierType.val() == 2) {
            CustomerAutoComplete(txtSupplierCode.Id, hdnSupplierId.Id);
            lblSupplierCode.text("Customer");
            AddRequired(txtSupplierCode, "Please enter Customer");
        }
        else if (ddlSupplierType.val() == 3) {
            WarehouseAutoComplete(txtSupplierCode.Id, hdnSupplierId.Id);
            lblSupplierCode.text("Warehouse");
            AddRequired(txtSupplierCode, "Please enter Warehouse");
        }
    }

    function CheckValidSupplier() {
        if (txtSupplierCode.val() != '')
            if (ddlSupplierType.val() == 1)
                WMS.IsSupplierCodeExist(txtSupplierCode, hdnSupplierId, lblSupplierName);
            else if (ddlSupplierType.val() == 2)
                IsCustomerCodeExist(txtSupplierCode, hdnSupplierId, lblSupplierName);
            else if (ddlSupplierType.val() == 3)
                IsWarehouseNameExist(txtSupplierCode, hdnSupplierId, lblSupplierName);
    }

    function InitProductTable() {
        $('[id*="txtSkuCode"]').each(function () {
            var txtSkuCode = $(this);
            var hdnSkuId = $('#' + this.Id.replace('txtSkuCode', 'hdnSkuId'));
            var txtSkuDescription = $('#' + this.Id.replace('txtSkuCode', 'txtSkuDescription'));
            var txtUom = $('#' + this.Id.replace('txtSkuCode', 'txtUom'));
            var txtUomQuantity = $('#' + this.Id.replace('txtSkuCode', 'txtUomQuantity'));
            var hdnUomQuantity = $('#' + this.Id.replace('txtSkuCode', 'hdnUomQuantity'));
            var txtVolume = $('#' + this.Id.replace('txtSkuCode', 'txtVolume'));
            var txtBatchNumber = $('#' + this.Id.replace('txtSkuCode', 'txtBatchNumber'));
            var txtManufacturingDate = $('#' + this.Id.replace('txtSkuCode', 'txtManufacturingDate'));
            var txtUnitPrice = $('#' + this.Id.replace('txtSkuCode', 'txtUnitPrice'));
            var txtQuantity = $('#' + this.Id.replace('txtSkuCode', 'txtQuantity'));

            var currentDate = '@DateTime.Now';
            var dateTimeFormat = '@ConfigHelper.JsDateFormat';

            InitDateTimePicker(txtManufacturingDate.Id, false, true, true, currentDate, dateTimeFormat, '', '');

            txtSkuCode.blur(function () {
               // CheckDuplicateInTableByCoupon('dtProduct', 'txtSkuCode', txtSkuCode);
                if (isCoupon == '0') {
                    if (!CheckDuplicateInTable('dtProduct', 'txtSkuCode', 'Sku Code', txtSkuCode))
                        return false;
                }
                else {
                    //ddlCoupon.val(1);
                    //ddlCoupon.disable();
                }
              
                return WMS.IsSkuCodeExist(txtSkuCode, hdnSkuId, txtSkuDescription, txtUom, txtManufacturingDate,txtUnitPrice, null, hdnUomQuantity);
            });

            WMS.SkuAutoComplete(txtSkuCode.Id, hdnSkuId.Id);
            txtQuantity.blur(function () {
                txtVolume.val(parseFloat(txtQuantity.val() * parseFloat(hdnUomQuantity.val())));
            });

        });
    }

    function CheckDuplicateInTableByCoupon(tableId, fieldId, obj) {
        if (obj.val() != '') {
            var selected = [];
            var coupon
            $('#' + tableId + ' tr:not(:first)').each(function () {
                var ele = $(this).find('[id*=' + fieldId + ']');
                if (ele.length > 0 && ele != obj && ele.val() != '' && ele.val().toUpperCase() == obj.val().toUpperCase()) {
                    isCoupon = $('#' + ele.Id.replace('txtSkuCode', 'ddlCoupon')).val();
                    unitPrice = $('#' + ele.Id.replace('txtSkuCode', 'txtUnitPrice')).val();
                    return false;
                }
            });
            return false;
        }
        return true;
    }

    function OnSubmit() {
        $('*[id*=ddlCoupon]').enable();
    }
</script>
