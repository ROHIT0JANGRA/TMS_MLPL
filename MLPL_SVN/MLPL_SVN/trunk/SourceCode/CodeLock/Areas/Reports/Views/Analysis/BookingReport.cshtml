@using CodeLock.Models
@model CodeLock.Models.BookingReport
@{
    ViewBag.Title = "BookingReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.2.0/js/tableexport.min.js"></script>


@*=----------------------------------------------------------------------------------------------------------*@
@using (Html.BeginForm("BookingReport", "Analysis", FormMethod.Post, new { @class = "j-forms", id = "reportForm" }))
{
    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-4">
                @Html.Label(SessionUtility.DocketNomenClature + " Date", new { @class = "label" })
                <div id="drDate"></div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Label("Company", new { @class = "CompanyId" })
                    @Html.DropDownList("CompanyId", new List<SelectListItem>
                    {
                        new SelectListItem { Text = "Mahalakshmi Logistic Pvt LTD", Value = "1" },

                        // Add more SelectListItem objects as needed
                    }, "Select a Company", new { @class = "form-control", id = "CompanyId" })
                </div>
            </div>
            <div class="col-sm-4">
                @Html.Label("Customer", new { @id = "lblCustomerId", @class = "label" })
                <div class="select">
                    @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.CustomerList, "Value", "Name"), "Select Customer", new { @class = "form-control select2", @id = "ddlCustomerId" })
                    <i></i>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-4">
                @Html.Partial("LocationHierarchy", new LocationHierarchy() { FieldName = "FromLocationID", FieldCaption = "From Location" })
            </div>
            <div class="col-sm-4">
                @Html.Partial("LocationHierarchy", new LocationHierarchy() { FieldName = "ToLocationId", FieldCaption = "To Location", AllowAll = true })
            </div>
            <div class="col-sm-4">
                <button type="submit" id="btnSubmit" class="btn btn-primary" tabindex="3" style="margin-top: 17px;margin-right: 14px;">View Report</button>
                <button type="button" class="btn btn-success success-btn" data-toggle="modal" data-target="#myModal" id="btnOpenModal" style="margin-top: 16px;">Add Filter</button>
                <button type="button" id="btnExcel" class="btn btn-primary compose-btn" tabindex="3">Export Excel</button>
            </div>
        </div>
    </div>
    <div id="myModal" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width:1000px;">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Report Columns</h4>
                </div>
                @if (Model.AdvanceFilterColumnList != null && Model.AdvanceFilterColumnList.Count > 0)
                {
                    <div class="table-responsive" style="height:400px;">
                        <table class="table table-sm" id="advanceFilterTable">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <label>SR No.</label>
                                    </th>
                                    <th>
                                        <label>Field Name</label>
                                    </th>
                                    <th>
                                        <label>Select</label>
                                    </th>
                                    <th>
                                        <label>Operator Name</label>
                                    </th>

                                    <th>
                                        <label>Field Value</label>
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                @if (Model.AdvanceFilterColumnList != null && Model.AdvanceFilterColumnList.Count > 0)
                                {
                                    for (int i = 0; i < Model.AdvanceFilterColumnList.Count; i++)
                                    {
                                        <tr>
                                            @Html.Partial("_AdvanceFilter", Model.AdvanceFilterColumnList[i], new ViewDataDictionary(ViewData) { TemplateInfo = new TemplateInfo { HtmlFieldPrefix = $"AdvanceFilterColumnList[{i}]" } })
                                        </tr>
                                    }

                                }
                            </tbody>
                        </table>
                    </div>
                }
                <div class="modal-footer">
                    <button type="button" class="btn btn-save btn-primary" data-dismiss="modal" id="btnSaveModal">Save</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>
    <div class="widget-wrap material-table-widget table-responsive" id="dvBookingReport">
    </div>
    <!-- Display error message if any -->
    <h4 class="text-danger">@ViewBag.Error</h4>
    <script>
var baseUrl;
var ModalCheckFields, advanceFilterColumnsList = [];
$(document).ready(function() {
    SetPageLoad('Booking Report', '');
    $('select[name*=".OperatorName"]').val('Contains').trigger('change');
    $('#drDate').daterangepicker();
    InitDateRange('drDate', DateRange.LastWeek);
    $("#CompanyId").val(1);

    // Function to generate custom filename
    function getFilename() {
        var currentDate = new Date();
        var dateString = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();
        return 'BookingReport' + dateString;
    }

    $("#btnSaveModal").click(function () {
        advanceFilterColumnsList = [];
        $('#advanceFilterTable tbody tr').each(function () {
            var row = $(this);
            var fieldType = row.find('input[name$=".FieldType"]').val(); // Get the FieldType for the row
            var searchingColumnValue = getSearchingColumnValue(row, fieldType);

            // Only push to the array if SearchingColumnValue is not blank or null
            if (searchingColumnValue && fieldType && searchingColumnValue.trim() !== '' && fieldType != "") {
                var item = {
                    SearchingLabelName: row.find('input[name$=".SearchingLabelName"]').val(),
                    SearchingColumnName: row.find('input[name$=".SearchingColumnName"]').val(),
                    SearchingColumnValue: searchingColumnValue,
                    IsCheckedField: row.find('input[name$=".IsCheckedField"]').val(),
                    CheckboxFieldName: row.find('input[name$=".CheckboxFieldName"]').val(),
                    FieldType: fieldType,
                    OperatorName: row.find('select[name$=".OperatorName"]').select2('val') // Use select2 API to get the value
                };
                advanceFilterColumnsList.push(item);
            }
        });
    });

    $('#reportForm').submit(function(e) {
        e.preventDefault(); // Prevent default form submission
        ModalCheckFields = [];
        SelectColumnName();
        // Get date range from the picker
        var fromDate = $('#drDate').data('daterangepicker').startDate.format('DD-MM-YYYY');
        var toDate = $('#drDate').data('daterangepicker').endDate.format('DD-MM-YYYY');
        // Get other form data
        var fromLocationID = $('#ddlFromLocationID').val();
        var toLocationId = $('#ddlToLocationId').val();
        var companyId = $('#CompanyId').val();
        var customerId = $('#ddlCustomerId').val();
        if (companyId == "") {
            companyId = 0;
        }
        if (customerId == "") {
            customerId = 0;
        }
        var CheckedFieldNames = '';
        CheckedFieldNames = ModalCheckFields.join(', ');
        // Make AJAX request
        var requestData = {
            fromDate: fromDate,
            toDate: toDate,
            FromLocationID: fromLocationID,
            ToLocationID: toLocationId,
            CompanyId: companyId,
            customerId: customerId,
            CheckedFieldNames: CheckedFieldNames, // Assuming you populate this elsewhere
            AdvanceFilterColumnsList: advanceFilterColumnsList
        };

        fetchData(requestData);
    });

    $('#btnExcel').click(function () {
        var filename = getFilename(); // Get the custom filename
        // Check if the table has data before exporting
        if ($('#dtBookingReport tbody tr').length > 0) {
            // Export table to Excel format
            $('#dtBookingReport').tableExport({
                type: 'excel',
                escape: 'false',
                fileName: filename // Use fileName instead of filename
            });
        } else {
            alert("List Is Empty");
        }
    });

});

function InitializeDataTable(columns, data) {
    // Destroy any existing DataTable instance
    if ($.fn.DataTable.isDataTable('#dtBookingReport')) {
        $('#dtBookingReport').DataTable().destroy();
    }
    // Generate the table HTML
    var tblBookingReport = '<table id="dtBookingReport" class="table table-bordered display nowrap" style="width:100%"><thead class="bg-primary"><tr>';
    // Create headers based on dynamic columns
    columns.forEach(function (col) {
        tblBookingReport += '<th>' + col.name + '</th>';
    });
    tblBookingReport += '</tr></thead><tbody></tbody></table>';
    // Insert table HTML into the container
    $("#dvBookingReport").html(tblBookingReport);
    // Initialize DataTable
    $('#dtBookingReport').DataTable({
        data: data,
        columns: columns,
        paging: true,
        lengthChange: true,
        searching: true,
        ordering: true,
        info: true,
        autoWidth: true,
        language: {
            emptyTable: "No data available",
            processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color:#2a2b2b;"></i><span class="sr-only">Loading...</span>'
        }
    });
}

function fetchData(formData) {
    if (ModalCheckFields.length <= 1) {
        alert("Please check at least one checkbox of column ..!");
    } else {
        $.ajax({
            url: '@Url.Action("GetBookingReports", "Analysis")',
            type: 'POST',
            data: formData,
            dataType: 'json',
            success: function (response) {
                console.log(response);
                if (response && response.length > 0) {
                    var columns = [];
                    var data = [];
                    var columnSet = new Set();
                    // Process the first row to determine columns
                    response[0].forEach(function (cell) {
                        columnSet.add(cell.Key);
                    });
                    // Convert columnSet to array for DataTable
                    columns = Array.from(columnSet).map(function (column) {
                        return {
                            data: column,
                            name: column,
                            searchable: true,
                            orderable: true
                        };
                    });
                    // Prepare data for DataTables
                    response.forEach(function (row) {
                        var rowObject = {};
                        row.forEach(function (cell) {
                            rowObject[cell.Key] = cell.Value;
                        });
                        data.push(rowObject);
                    });

                    // Initialize DataTable with dynamic columns and data
                    InitializeDataTable(columns, data);
                } else {
                    // No records found, display message
                    $("#dvBookingReport").html('<div class="alert alert-info" role="alert">No records found. Please adjust your filters and try again.</div>');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }
}

function SelectColumnName() {
    $(".CheckedField:checked").each(function () {
        var nameAttribute = $(this).attr('name');
        nameAttribute = nameAttribute.replace("IsCheckedField", "CheckboxFieldName");
        if ($(this).is(':checked')) {
            ModalCheckFields.push($('input[name="' + nameAttribute + '"]').val());
        } else {
            var index = ModalCheckFields.indexOf($('input[name="' + nameAttribute + '"]').val());
            if (index > -1) {
                ModalCheckFields.splice(index, 1); // Remove unchecked value from array
            }
        }
    });
}

function getSearchingColumnValue(row, fieldType) {
    if (fieldType === "TEXTBOX") {
        return row.find('input[name$=".SearchingColumnValue"]').val(); // TextBox value
    } else if (fieldType === "DROPDOWN" || fieldType.toUpperCase() === "BOOL") {
        return row.find('select[name$=".SearchingColumnValue"]').select2('val'); // Select2 dropdown value
    } else {
        return null; // Handle other types or provide a default value
    }
}
    </script>

}
