
@model CodeLock.Models.PackagingModel
@{
    ViewBag.Title = "RgpInsert";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>


<div class="widget-wrap">
    <div class="row">
        <div class="col-lg-12">
            <div class="">
                <div class="inline-group">
                    <form class="form-group">
                        <div class="head">
                            <button class="btn btn-success" type="submit">Submit</button>
                            <span><a href="@Url.Action("RgpList","RGP")" class="btn btn-primary">List</a></span>
                        </div>

                        <div class="row col-lg-12">
                            <div class="col-sm-3 inline-group">
                                @Html.Label("Customer", new { @id = "lblCustomerId", @class = "inline-group" })
                                <div class="select">
                                    <select id="ddlCustomerId" class="form-control select2">
                                        <option value="">Select Customer</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-sm-3 inline-group">
                                @Html.Label("Address", new { @id = "lblAddressId", @class = "inline-group" })
                                <div class="select">
                                    <select id="ddlAddress" class="form-control select2">
                                        <option value="">Select Address</option>
                                    </select>
                                </div>
                            </div>



                            <div class="col-lg-2">
                                <label class="inline-group" for="txtRgpDocDateTime">RGP Date</label>
                                <div class="form-group">
                                    <input type="date" class="form-control form-control-date" id="txtRgpDocDateTime" placeholder="RGP Date" />
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <label class="inline-group" for="postingDate">Posting Date</label>
                                <div class="form-group">
                                    <input type="date" class="form-control form-control-date" id="postingDate" placeholder="Posting Date" disabled />
                                </div>
                            </div>
                            <div class="col-lg-2 inline-group">
                                <label class="inline-group" for="rgpSeries">RGP Series</label>
                                <div class="select">
                                    @Html.DropDownListFor(model => model.Series, new SelectList(ViewBag.RGPListSeries, "Value", "Name"), "Select RGP Series", new { @class = "form-control select2", @id = "ddlRgpSeries" })
                                </div>
                            </div>
                            @*<div class="col-lg-2">
                                <label class="inline-group" for="rgpNo">RGP No</label>
                                <input type="text" class="form-control" id="rgpNo" placeholder="RGP no" />
                            </div>*@
                        </div>

                        <div class="row col-lg-12">
                            @*<div class="col-lg-3">
                                    <label class="inline-group" for="shipTo">Ship To</label>
                                    <textarea type="text" class="form-control" id="shipToDisplay" placeholder="Ship To"></textarea>
                                    <input type="hidden" id="shipTo" name="shipTo" />
                                </div>*@

                            <div class="col-lg-2">
                                <label class="form-inline" for="fromBranch">From Branch</label>
                                <select class="select form-control" id="fromBranch">
                                    <option value="Packaging" selected class="select-item">Packaging</option>
                                    <option value="Manufacture">Manufacture</option>
                                </select>
                            </div>

                            <div class="col-lg-2">
                                <label class="form-inline" for="toWarehouse">To Warehouse</label>
                                <div class="select">
                                    @Html.DropDownListFor(model => model.WarehouseId, new SelectList(ViewBag.PkgWarehouseList, "Value", "Name"), "Select Warehouse", new { @class = "form-control select2", @id = "ddlFromWarehouse" })
                                </div>
                                @*<label class="form-inline" for="fromWarehouse">From Warehouse</label>
        @Html.DropDownListFor(model => model.WarehouseId, new SelectList(ViewBag.WarehouseList, "Value", "Text", SessionUtility.CompanyId), "Select Warehouse", new { @class = "form-control select2", @id = "ddlFromWarehouse" })*@
                            </div>

                            <div class="col-lg-2">
                                <label class="form-inline" for="toWarehouse">To Warehouse</label>
                                <div class="select">
                                    @Html.DropDownListFor(model => model.WarehouseId, new SelectList(ViewBag.PkgWarehouseList, "Value", "Name"), "Select Warehouse", new { @class = "form-control select2", @id = "ddlToWarehouse" })
                                </div>
                            </div>
                           

                        </div>

                        <div class="row-border">
                            <div class="col-lg-12">
                                <div class="col-lg-4">
                                    <label class="inline-group" for="ddlItemDetails">Select Item</label>
                                    <select class="form-control" id="ddlItemDetails" multiple>
                                        <option value="">Select an item</option>
                                    </select>
                                </div>

                                <table id="itemDetailsTable" class="table">
                                    <thead class="bg-primary">
                                        <tr>
                                            <th>Item Code</th>
                                            <th>Item Description</th>
                                            <th>From-WH</th>
                                            <th>To-WH</th>
                                            <th>Stock-Quantity</th>
                                            <th>Add-Quantity</th>
                                            <th>Action</th>
                                            <!-- Add more headers as necessary -->
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Item details will be appended here -->
                                    </tbody>
                                </table>



                            </div>
                        </div>

                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
                            Add Transporter Details
                        </button>

                        <!-- Modal -->
                        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                        <h4 class="modal-title" id="myModalLabel">RGP Transporter Details</h4>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col-lg-3">
                                                <label class="inline-group" for="ewayBillNo">EwayBill No</label>
                                                <input type="text" class="form-control" id="ewayBillNo" placeholder="EwayBill no" disabled />
                                            </div>

                                            <div class="col-lg-3">
                                                <label class="inline-group" for="transporterName">Transporter Name</label>
                                                <input type="text" class="form-control" id="transporterName" placeholder="Transporter Name" value="MLPL" disabled />
                                            </div>

                                            <div class="col-lg-3">
                                                <label class="inline-group" for="transporterGST">Transporter GST</label>
                                                <input type="text" class="form-control" id="transporterGST" placeholder="Transporter GST" disabled />
                                            </div>

                                            <div class="col-lg-3">
                                                <label class="inline-group" for="LRNo">LR No</label>
                                                <input type="text" class="form-control" id="LRNo" placeholder="LR No" disabled />
                                            </div>
                                            <div class="col-lg-3">
                                                <label class="inline-group" for="txtVehicalNo">Vehicle No</label>
                                                @Html.TextBoxFor(model => model.VehicalNo, new { @class = "form-control", @id = "txtVehicalNo" })
                                            </div>
                                            <div class="col-lg-3">
                                                <label class="form-inline" for="supplytype">SupplyType</label>
                                                <select class="select2" id="supplytype">
                                                    <option selected>--Select Supply Type--</option>
                                                    <option value="Outward Supply">Outward Supply</option>
                                                    <option value="Inward Supply">Inward Supply</option>
                                                </select>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-primary">Save changes</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function () {
    // Initialize Select2 for dropdowns
    var txtVehicalNo = $('#txtVehicalNo');
    var hdnVehicalNo = $('#hdnVehicalNo');

    VehicleAutoComplete(txtVehicalNo.attr('id'), hdnVehicalNo.attr('id'));
    $('#ddlCustomerId').select2();
    $('#ddlFromWarehouse').select2();
    $('#ddlToWarehouse').select2();
    $('#ddlAddress').select2();
    $('#ddlItemDetails').select2({
        placeholder: "Select items",
        allowClear: true,
        multiple: true // Enable multiple selection
    });

    let itemDetailsList = []; // List to store item details

    // Fetch master customer list on page load
    GetTheSapCustomerList();
    initializeCustomerDropdown();

    // Handle RGP Date input changes
    $('#txtRgpDocDateTime').on('change', function () {
        var rgpDateValue = $(this).val(); // Get the RGP Date value
        $('#postingDate').val(rgpDateValue); // Set the Posting Date to the same value
    });
    document.addEventListener("DOMContentLoaded", function () {
        // Get references to the RGP Date and Posting Date input fields
        const rgpDateInput = document.getElementById('txtRgpDocDateTime');
        const postingDateInput = document.getElementById('postingDate');

        // Add an event listener for changes to the RGP Date input
        rgpDateInput.addEventListener('input', function () {
            // Get the RGP Date value
            const rgpDateValue = rgpDateInput.value;

            // Set the Posting Date value to match the RGP Date
            postingDateInput.value = rgpDateValue;
        });
    });
    // Fetch items when customer or warehouse is selected
    $('#ddlCustomerId, #ddlFromWarehouse').on('change', function () {
        var cardCode = $('#ddlCustomerId').val(); // Get selected customer ID (card code)
        var fromWarehouse = $('#ddlFromWarehouse').val(); // Get selected warehouse

        if (cardCode && fromWarehouse) {
            $.ajax({
                url: '@Url.Action("GetTheRgpItemDetailsByIds", "RGP")',
                type: 'GET',
                dataType: 'json',
                data: {
                    cardCode: cardCode,
                    FromWH: fromWarehouse
                },
                success: function (response) {
                    itemDetailsList = response.data || []; // Store fetched data in the list
                    if (itemDetailsList.length > 0) {
                        var options = '<option value="">Select an item</option>';
                        $.each(itemDetailsList, function (index, item) {
                            options += '<option value="' + item.ItemCode + '">' + item.ItemDescription + '</option>';
                        });
                        $('#ddlItemDetails').html(options).trigger('change'); // Update dropdown options
                    } else {
                        $('#ddlItemDetails').html('<option value="">No items available</option>').trigger('change');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching items: ", error);
                }
            });
        }
    });

    // Event listener for item selection
    $('#ddlItemDetails').on('change', function () {
        var selectedItemCodes = $(this).val();
        if (selectedItemCodes) {
            // Fetch details for each selected item
            $.each(selectedItemCodes, function (index, itemCode) {
                var itemDetails = itemDetailsList.find(item => item.ItemCode === itemCode);

                if (itemDetails) {
                    appendItemToTable(itemDetails);
                } else {
                    // Fetch item details from the server
                    $.ajax({
                        url: '@Url.Action("GetSelectedItemDetails", "RGP")',
                        type: 'GET',
                        dataType: 'json',
                        data: {
                            itemCode: itemCode,
                            cardCode: $('#ddlCustomerId').val(),
                            warehouseId: $('#ddlFromWarehouse').val()
                        },
                        success: function (details) {
                            if (details) {
                                itemDetailsList.push(details);
                                appendItemToTable(details);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching item details: ", error);
                        }
                    });
                }
            });
        }
    });

    function appendItemToTable(itemDetails) {
        // Get the latest values of fromWarehouse and toWarehouse
        var fromWarehouse = $('#ddlFromWarehouse').val();
        var toWarehouse = $('#ddlToWarehouse').val();

        // Check if the item already exists in the table
        if ($('#itemDetailsTable tbody tr[data-itemcode="' + itemDetails.ItemCode + '"]').length === 0) {
            var rowHtml = '<tr data-itemcode="' + itemDetails.ItemCode + '">' +
                '<td>' + itemDetails.ItemCode + '</td>' +
                '<td>' + itemDetails.ItemDescription + '</td>' +
                '<td>' + fromWarehouse + '</td>' +
                '<td>' + toWarehouse + '</td>' +
                '<td>' + itemDetails.Quantity + '</td>' +
                '<td><input type="number" class="form-control add-quantity" data-stockquantity="' + itemDetails.Quantity + '" /></td>' +
                '<td><button class="btn btn-danger btn-sm remove-row">Remove</button></td>' +
                '<td><span class="validation-message text-danger"></span></td>' +
                '</tr>';
            $('#itemDetailsTable tbody').append(rowHtml);
        }
    }
    // Event listener for "Add-Quantity" input field
    $('#itemDetailsTable').on('input', '.add-quantity', function () {
        var $input = $(this);
        var stockQuantity = parseFloat($input.data('stockquantity'));
        var addQuantity = parseFloat($input.val());
        var $validationMessage = $input.closest('tr').find('.validation-message');

        if (addQuantity > stockQuantity) {
            $validationMessage.text('Add-Quantity cannot be greater than Stock-Quantity');
            $input.val(''); // Clear the input value
        } else {
            $validationMessage.text('');
        }
    });
    // Event listener for remove button
    $('#itemDetailsTable').on('click', '.remove-row', function () {
        // Remove the row from the table
        $(this).closest('tr').remove();

        // Update dropdown selection
        var itemCode = $(this).closest('tr').data('itemcode');
        var selectedItems = $('#ddlItemDetails').val();
        if (selectedItems) {
            var index = selectedItems.indexOf(itemCode);
            if (index > -1) {
                selectedItems.splice(index, 1);
                $('#ddlItemDetails').val(selectedItems).trigger('change'); // Update dropdown with remaining selected items
            }
        }
    });

    // Function to fetch SAP customer list and populate the customer dropdown
    function GetTheSapCustomerList() {
        $.ajax({
            url: '@Url.Action("GetSapCustomerList", "RGP")', // Adjust the URL to your action method
            type: 'GET',
            dataType: 'json',
            success: function (response) {
                if (response != null && response.length > 0) {
                    var options = '<option value="">Select a customer</option>';
                    $.each(response, function (index, customer) {
                        options += '<option value="' + customer.CardCode + '">' + customer.CardCode + ' - ' + customer.CardName + '</option>';
                    });
                    $('#ddlCustomerId').html(options).trigger('change'); // Update dropdown options
                } else {
                    $('#ddlCustomerId').html('<option value="">No customers available</option>').trigger('change');
                }
            },
            error: function (xhr, status, error) {
                console.error("Error fetching customer list: ", error);
            }
        });
    }

    // Function to initialize the customer dropdown with select2
    function initializeCustomerDropdown() {
        $('#ddlCustomerId').select2({
            placeholder: "Select Customer",
            allowClear: true,
            ajax: {
                url: '@Url.Action("GetTheBpMasterCustomerList", "RGP")',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        search: params.term || '' // Use the search term from select2
                    };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                id: item.CardCode,
                                text: item.CardCode + ' - ' + item.CardName,
                                addresses: item.BPAddresses // Store addresses with each item
                            };
                        })
                    };
                },
                cache: true
            },
            minimumInputLength: 0 // Show all results on open if no input
        }).on('select2:select', function (e) {
            var selectedData = e.params.data;
            populateAddressDropdown(selectedData.addresses);
        });
    }

    // Function to populate the address dropdown based on the selected customer
    function populateAddressDropdown(addresses) {
        var $ddlAddress = $('#ddlAddress');
        $ddlAddress.empty(); // Clear existing options
        $ddlAddress.append($('<option></option>').val('').text('Select Address')); // Add default option

        if (addresses) {
            $.each(addresses, function (index, address) {
                var formattedAddress = formatAddress(address);
                $ddlAddress.append($('<option></option>').val(address.AddressID).text(formattedAddress));
            });
        }

        $ddlAddress.trigger('change'); // Trigger change event
    }

    // Function to format the address for display
    function formatAddress(address) {
        var addressParts = [address.Street, address.City, address.State, address.ZipCode];
        return addressParts.filter(Boolean).join(', ');
    }
});
</script>

