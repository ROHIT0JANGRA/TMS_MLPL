@model  CodeLock.Models.ExpenseContract

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("ExpenseContract", "ExpenseContract", FormMethod.Post, new { @class = "j-forms" }))
{
    @Html.HiddenFor(m => m.ExpenseId, new { @id = "hdnExpenseId" })

    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ExpenseName, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.ExpenseId, new List<SelectListItem> {
                        new SelectListItem() {Text = "Select Expense Name", Value = ""},
                        new SelectListItem() {Text = "Labour Expense", Value = "1"},
                        new SelectListItem() {Text = "Docket Expense", Value="2"},}, new { @class = "form-control", @id = "ddlExpenseId" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.ExpenseName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PayBasId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.PayBasId, new SelectList(ViewBag.PayBasList, "Value", "Name"), "Select PayBas", new { @class = "form-control", @id = "ddlPayBasId" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.PayBasId)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4" id="divTransportMode">
                <div class="form-group">
                    @Html.LabelFor(model => model.TransportModeId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.TransportModeId, new SelectList(ViewBag.TransportModeList, "Value", "Name"), "Select Transport Mode", new { @class = "form-control", @id = "ddlTransportModeId" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.TransportModeId)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4" id="divMatrixType">
                <div class="form-group">
                    @Html.LabelFor(model => model.MatrixType, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.MatrixType, new SelectList(ViewBag.MatrixTypeList, "Value", "Name"), "Select Matrix Type", new { @class = "form-control", @id = "ddlMatrixType" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.MatrixType)
                </div>
            </div>
            <div class="col-sm-4" id="divFromLocation">
                <div class="form-group">
                    @Html.LabelFor(model => model.FromLocation, new { @class = "label" })
                    @Html.HiddenFor(model => model.FromLocationId, new { @id = "hdnFromLocation" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.FromLocation, null, new { @class = "form-control", @id = "txtFromLocation" })
                    </div>
                    @Html.ValidationMessageFor(model => model.FromLocation)
                </div>
            </div>
            <div class="col-sm-4" id="divToLocation">
                <div class="form-group">
                    @Html.LabelFor(model => model.ToLocation, new { @class = "label" })
                    @Html.HiddenFor(model => model.ToLocationId, new { @id = "hdnToLocation" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.ToLocation, null, new { @class = "form-control", @id = "txtToLocation" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ToLocation)
                </div>

            </div>
        </div>
        <div class="form-footer">
            <button type="submit" id="btnSubmit" class="btn btn-success primary-btn">Next</button>
        </div>
    </div>
}
<script>

    $(document).ready(function () {
        SetPageLoad('Customer Contract', 'Expense Contract');

        ddlMatrixType = $('#ddlMatrixType');
        hdnFromLocation = $('#hdnFromLocation');
        txtFromLocation = $('#txtFromLocation');
        hdnToLocation = $('#hdnToLocation');
        txtToLocation = $('#txtToLocation');
        ddlMatrixType.change(OnMatrixTypeChange);
        OnMatrixTypeChange();
        $('#btnSubmit').click(OnSubmit);

        txtFromLocation.blur(function () { return CheckIsValid(txtFromLocation, hdnFromLocation); });
        txtToLocation.blur(function () { return CheckIsValid(txtToLocation, hdnToLocation); });

    });

    function OnMatrixTypeChange() {
        txtFromLocation.val(''); txtToLocation.val(''); hdnFromLocation.val(''); hdnToLocation.val('');
        if ($('#ddlMatrixType').val() == '') {
            txtFromLocation.prop('disabled', true);
            txtToLocation.prop('disabled', true);
        }
        else {
            txtFromLocation.prop('disabled', false);
            txtToLocation.prop('disabled', false);
        }
        if ($('#ddlMatrixType').val() == 1) {
            CityAutoComplete('txtFromLocation', 'hdnFromLocation');
            CityAutoComplete('txtToLocation', 'hdnToLocation');
        }
        else if ($('#ddlMatrixType').val() == 2) {
            LocationAutoComplete('txtFromLocation', 'hdnFromLocation');
            LocationAutoComplete('txtToLocation', 'hdnToLocation');
        }
        else if ($('#ddlMatrixType').val() == 3) {
            ZoneAutoComplete('txtFromLocation', 'hdnFromLocation');
            ZoneAutoComplete('txtToLocation', 'hdnToLocation');
        }
    }

    function CheckIsValid(objName, objHdnId) {
        if ($('#ddlMatrixType').val() == 1) {
            IsCityNameExist(objName, objHdnId);
        }
        else if ($('#ddlMatrixType').val() == 2) {
            IsLocationCodeExist(objName, objHdnId);
        }
        else if ($('#ddlMatrixType').val() == 3) {
            IsZoneNameExist(objName, objHdnId);
        }
    }




    function OnSubmit() {
        var expenseId = $('#ddlExpenseId').val();
        var expenseName = $('#ddlExpenseId').val() == '' ? '' : $('#ddlExpenseId option:selected').text();
        var payBasId = $('#ddlPayBasId').val() == '' ? 0 : $('#ddlPayBasId').val();
        var payBas = $('#ddlPayBasId').val() == '' ? '' : $('#ddlPayBasId option:selected').text();
        var transportModeId = $('#ddlTransportModeId').val() == '' ? 0 : $('#ddlTransportModeId').val();
        var matrixType = $('#ddlMatrixType').val() == '' ? 0 : $('#ddlMatrixType').val();
        var fromLocation = txtFromLocation.val() == '' ? 0 : hdnFromLocation.val();
        var toLocation = txtToLocation.val() == '' ? 0 : hdnToLocation.val();



        window.location.href = "@Url.Action("ExpenseCharge")/" + expenseId + "?expenseName=" + expenseName + "&payBasId=" + payBasId + "&payBas=" + payBas + "&transportModeId=" + transportModeId + "&matrixType=" + matrixType + "&fromLocation=" + fromLocation + "&toLocation=" + toLocation;
        return false;

    }



</script>