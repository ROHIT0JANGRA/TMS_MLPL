@model CodeLock.Models.MasterDriver
@using Secure_Coding.MvcSecurityExtensions;
@using CodeLock.Models
@{
    ViewBag.Title = "Insert";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .fa-image {
        border: 2px solid #000; /* Black border */
        padding: 10px; /* Padding around the image */
        border-radius: 5px; /* Rounded corners */
        width: 100%; /* Adjust the width as needed */
        max-width: 150px; /* Maximum width */
        display: block; /* Center the image */
        margin: 0 auto; /* Center the image */
    }
</style>
@using (Html.BeginForm("Insert", "Driver", FormMethod.Post, new { @class = "j-forms", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.AntiModelInjectionFor(m => m.DriverId)
    @Html.Hidden("DriverId", 0)

<div class="widget-wrap">
    <div class="row p-0 m-0 mb-4">
        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.LicenseNo, new { @class = "label" })
                @Html.TextBoxFor(model => model.LicenseNo, new { @class = "form-control", @id = "dlNo" })
                @Html.ValidationMessageFor(model => model.LicenseNo)
            </div>
        </div>

        <div class="col-lg-2 col-md-8 col-sm-6 mb-3">
            <div class="">
                @Html.Partial("DateTimePicker", new DateTimePicker()
                {
                    FieldName = "DoB",
                    FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.DoB),
                    IsRequired = true,
                    AllowFutureDate = false,
                    AllowPastDate = true,
                    MinDate = new DateTime(1950, 1, 1),
                    MaxDate = DateTime.Now.AddDays(-18 * 365),
                    IsValidateFinYear = false,
                })
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <input type="button" id="btnGetDetail" class="btn btn-primary w-100" value="Autofill">
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.DriverName, new { @class = "label" })
                @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", @id = "txtDriverName", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.DriverName)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <label class="form-content"></label>
            <img id="fuDocumentAttachment" name="DocumentDetails[1].DocumentAttachment" class="fa-image" alt="Driver Profile Image" />
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.ManualDriverCode, new { @class = "label" })
                @Html.TextBoxFor(model => model.ManualDriverCode, new { @class = "form-control", @id = "txtManualDriverCode", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.ManualDriverCode)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.DriverFatherName, new { @class = "label" })
                @Html.TextBoxFor(model => model.DriverFatherName, new { @class = "form-control", @id = "txtDriverFatherName", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.DriverFatherName)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.HiddenFor(model => model.VehicleId, new { @id = "hdnVehicleId" })
                @Html.LabelFor(model => model.VehicleNo, new { @class = "label" })
                @Html.TextBoxFor(model => model.VehicleNo, new { @class = "form-control", @id = "txtVehicleNo" })
                @Html.ValidationMessageFor(model => model.VehicleNo)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.HiddenFor(model => model.DriverLocationId, new { @id = "hdnDriverLocationId" })
                @Html.LabelFor(model => model.DriverLocationCode, new { @class = "label" })
                @Html.TextBoxFor(model => model.DriverLocationCode, new { @class = "form-control", @id = "txtDriverLocationCode" })
                @Html.ValidationMessageFor(model => model.DriverLocationCode)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.MobileNo, new { @class = "label" })
                @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control", @id = "mobileNo" })
                @Html.ValidationMessageFor(model => model.MobileNo)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.PermanentAddress, new { @class = "label" })
                @Html.TextBoxFor(model => model.PermanentAddress, new { @class = "form-control", @id = "txtPermanentAddress" })
                @Html.ValidationMessageFor(model => model.PermanentAddress)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.HiddenFor(model => model.PermanentCityId, new { @id = "hdnPermanentCityId" })
                @Html.LabelFor(model => model.PermanentCityName, new { @class = "label" })
                @Html.TextBoxFor(model => model.PermanentCityName, new { @class = "form-control", @id = "txtPermanentCityName" })
                @Html.ValidationMessageFor(model => model.PermanentCityName)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.PermanentPincode, new { @class = "label" })
                @Html.TextBoxFor(model => model.PermanentPincode, new { @class = "form-control", @id = "txtPermanentPincode" })
                @Html.ValidationMessageFor(model => model.PermanentPincode)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.UsePermanentAddressAsCurrentAddress, new { @class = "label", @for = "chkCopyAddress" })
                <div class="form-check">
                    @Html.CheckBoxFor(model => model.UsePermanentAddressAsCurrentAddress, new { @class = "form-check-input", @id = "chkCopyAddress" })
                    <i></i>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.CurrentAddress, new { @class = "label" })
                @Html.TextBoxFor(model => model.CurrentAddress, new { @class = "form-control", @id = "txtCurrentAddress" })
                @Html.ValidationMessageFor(model => model.CurrentAddress)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.HiddenFor(model => model.CurrentCityId, new { @id = "hdnCurrentCityId" })
                @Html.LabelFor(model => model.CurrentCityName, new { @class = "label" })
                @Html.TextBoxFor(model => model.CurrentCityName, new { @class = "form-control", @id = "txtCurrentCityName" })
                @Html.ValidationMessageFor(model => model.CurrentCityName)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.CurrentPincode, new { @class = "label" })
                @Html.TextBoxFor(model => model.CurrentPincode, new { @class = "form-control", @id = "txtCurrentPincode", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.CurrentPincode)
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseValidityDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseValidityDate), IsRequired = true, AllowFutureDate = true, AllowPastDate = false, SetBlank = true, IsValidateFinYear = false })
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="form-group">
                @Html.LabelFor(model => model.LicenseIssueBy, new { @class = "label" })
                @Html.TextBoxFor(model => model.LicenseIssueBy, new { @class = "form-control", @id = "txtLicenseIssueBy" })
                @Html.ValidationMessageFor(model => model.LicenseIssueBy)
            </div>
        </div>

            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.GuarantorName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.GuarantorName, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.GuarantorName)
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, new { @class = "label" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.IsActive)
                        <i></i>
                    </label>
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.CategoryId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.CategoryId, new List<SelectListItem> {
                        new SelectListItem() {Text = "Select",Value=""},
                        new SelectListItem() {Text = "First", Value="1"},
                        new SelectListItem() {Text = "Second", Value="2"},
                        new SelectListItem() {Text = "Cleaner", Value="3"},}, new { @class = "form-control" })
                        <i></i>

                    </div>
                    @Html.ValidationMessageFor(model => model.CategoryId)
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Ethnicity, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.Ethnicity, new SelectList(ViewBag.EthnicityList, "Value", "Name"), "Select Ethnicity", new { @class = "form-control", @id = "ddlEthnicity" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.Ethnicity)

                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseInitialIssueDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseInitialIssueDate), IsRequired = true, AllowFutureDate = false, AllowPastDate = true, SetBlank = true, IsValidateFinYear = false })
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseCurrentIssueDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseCurrentIssueDate), IsRequired = true, AllowFutureDate = false, AllowPastDate = true, SetBlank = true, IsValidateFinYear = false })
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsLicenseVerified, new { @class = "label" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.IsLicenseVerified, new { @id = "chkIsLicenseVerified" })
                        @Html.Label("chkIsLicenseVerified", " ", new { @class = "label" })
                        <i></i>
                    </label>
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsAddressVerified, new { @class = "label" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.IsAddressVerified)
                        <i></i>
                    </label>
                </div>
            </div>
            <div class="m-0 col-12 col-sm-4 col-md-3">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseVerifiedDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseVerifiedDate), IsRequired = true, AllowFutureDate = false, AllowPastDate = true, SetBlank = true, IsValidateFinYear = false })
                </div>
            </div>
        </div>
            <div class="page-separator">Driver Document Type</div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="flip-scroll overflow-table">
                        <table class="table table-condensed cf" id="dtDocumentDetail">
                            <thead class="cf">
                                <tr>
                                    <th>Document</th>
                                    <th></th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.DocumentDetails.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            <div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DocumentDetails[i].DocumentTypeId, new { @class = "label" })
                                                    <div class="select">
                                                        @Html.DropDownListFor(model => model.DocumentDetails[i].DocumentTypeId, new SelectList(ViewBag.DriverDocumentList, "Value", "Name"), "Select Driver DocumentList", new { @class = "form-control", @id = "ddlDocumentTypeId" + i.ToString() })
                                                        <i></i>
                                                    </div>
                                                    @Html.ValidationMessageFor(model => model.DocumentDetails[i].DocumentTypeId)
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="input">
                                                Browse
                                                <input type="file" class="form-control" id="@("fuDocumentAttachment" + i)" name="@("DocumentDetails[" + i + "].DocumentAttachment")" onchange="document.getelementbyid('prepend-big-btn').value=this.value;">
                                                @Html.HiddenFor(model => model.DocumentDetails[i].DocumentAttachment, new { @id = "hdnDocumentAttachment", @Value = Model.DocumentDetails[i].DocumentAttachment })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DocumentDetails[i].DocumentAttachment)
                                        </td>
                                        <td></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="form-footer">
                <button type="submit" class="btn btn-success primary-btn">Create</button>
            </div>
        </div>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
    var mob = 0;
    $(document).ready(function () {
        SetPageLoad('Driver', 'Add', 'DriverName', 'Go To List', '@Url.Action("Index")');
        txtVehicleNo = $('#txtVehicleNo');
        hdnVehicleId = $('#hdnVehicleId');
        txtDriverLocationCode = $('#txtDriverLocationCode');
        hdnDriverLocationId = $('#hdnDriverLocationId');
        txtPermanentCityName = $('#txtPermanentCityName');
        hdnPermanentCityId = $('#hdnPermanentCityId');
        txtCurrentCityName = $('#txtCurrentCityName');
        hdnCurrentCityId = $('#hdnCurrentCityId');
        chkIsLicenseVerified = $('#chkIsLicenseVerified');
        chkIsLicenseVerified.change(LicenseVerifiedChange);
        LicenseVerifiedChange();
        btnSubmit = $('#btnSubmit');
        btnSubmit.click(OnSubmit);

        VehicleAutoComplete('txtVehicleNo', 'hdnVehicleId');
        txtVehicleNo.blur(function () { IsVehicleNoExist(txtVehicleNo, hdnVehicleId); });
        LocationAutoComplete('txtDriverLocationCode', 'hdnDriverLocationId');
        txtDriverLocationCode.blur(function () { IsLocationCodeExist(txtDriverLocationCode, hdnDriverLocationId); });
        CityAutoComplete('txtPermanentCityName', 'hdnPermanentCityId');
        txtPermanentCityName.blur(function () { IsCityNameExist(txtPermanentCityName, hdnPermanentCityId); });
        CityAutoComplete('txtCurrentCityName', 'hdnCurrentCityId');
        txtCurrentCityName.blur(function () { IsCityNameExist(txtCurrentCityName, hdnCurrentCityId); });
        $("#chkCopyAddress").change(CopyAddress);
        InitGrid('dtDocumentDetail', false, 2, Init);
    });

    function LicenseVerifiedChange() {
        $('#txtLicenseVerifiedDate').val('');
        if (chkIsLicenseVerified.IsChecked) {
            $('#txtLicenseVerifiedDate').enable();
            AddRequired($('#txtLicenseVerifiedDate'), "Please select License Verified Date")
        }
        else {
            $('#txtLicenseVerifiedDate').disable();
            RemoveRequired($('#txtLicenseVerifiedDate'));
        }
    }

    function Init() {
        $('[id*="ddlDocumentTypeId"]').each(function () {
            var ddlDocumentTypeId = $(this);
            ddlDocumentTypeId.change(function () {
                try {
                    IsDocumentExist($(this));
                }
                catch (e) {
                    $(this).val('');
                    SetDropDownValue($(this), '');
                    SetFormFieldFocus($(this).attr('id'));
                }
            });
        });
        return false;
    }

    function IsDocumentExist(obj) {
        if (obj.val() != '') {
            var outertr = obj.closest('tr');
            var outerddlDocumentTypeId = outertr.find('[id*="ddlDocumentTypeId"]');

            $('#dtDocumentDetail tr:not(:first)').each(function () {
                var innertr = $(this);
                var innerddlDocumentTypeId = innertr.find('[id*="ddlDocumentTypeId"]');

                if (innerddlDocumentTypeId.attr('id') != outerddlDocumentTypeId.attr('id') && innerddlDocumentTypeId.val() == outerddlDocumentTypeId.val()) {
                    ShowMessage("Document is already exist");
                    throw (true);
                }
            });
        }
    }

    function CopyAddress() {
        if ($('#chkCopyAddress').IsChecked) {
            $('#txtCurrentAddress').val($('#txtPermanentAddress').val());
            hdnCurrentCityId.val(hdnPermanentCityId.val());
            txtCurrentCityName.val(txtPermanentCityName.val());
            $('#txtCurrentPincode').val($('#txtPermanentPincode').val());
            $('#txtCurrentAddress').attr('readOnly', true);
            txtCurrentCityName.attr('readOnly', true);
            $('#txtCurrentPincode').attr('readOnly', true);
        }
        else {
            $('#txtCurrentAddress').val('');
            hdnCurrentCityId.val('');
            txtCurrentCityName.val('');
            $('#txtCurrentPincode').val('');
            $('#txtCurrentAddress').attr('readOnly', false);
            txtCurrentCityName.attr('readOnly', false);
            $('#txtCurrentPincode').attr('readOnly', false);
        }
    }

    function OnSubmit() {
        $('[id*="ddlDocumentTypeId"]').each(function () {
            var ddlDocumentTypeId = $(this);
            var fuDocumentAttachment = $('#' + ddlDocumentTypeId.attr('id').replace('ddlDocumentTypeId', 'fuDocumentAttachment'));
            if (fuDocumentAttachment.val() != '')
                AddRequired(ddlDocumentTypeId, "Please select Document");
            else
                RemoveRequired(ddlDocumentTypeId);
            if (ddlDocumentTypeId.val() != '')
                AddRequired(fuDocumentAttachment, "Please select Document File");
            else
                RemoveRequired(fuDocumentAttachment);
        });
    }

    $(document).ready(function () {
    $('#btnGetDetail').click(function () {
        var dlNo = $('#dlNo').val();
        var dlDobDate = moment($('#txtDoB').val(), "DD/MM/YYYY", true).format("YYYY-MM-DD");

        console.log('typeof dlDobDate : ', typeof dlDobDate);
        console.log('dlNo : ', dlNo, 'dlDobDate : ', dlDobDate);
        if (dlNo.value = '') {
            alert("Please Enter Driving License No");
        } if (dlDobDate.value = '') {
            alert("Please Enter Driver DOB");
        } if (dlNo && dlDobDate) { 
            $.ajax({
                url: '@Url.Action("FetchDriverDetailsFromApi", "Driver")',
                type: 'POST',
                data:
                {
                    dlNo: dlNo,
                    dlDobDate: dlDobDate
                },
                success: function (data) {
                    parseData = JSON.parse(data);
                    console.log(data);
                    if (parseData.code === "200") {
                        console.log('parseData : ', parseData);
                        bioObj = parseData.response[0].response.dldetobj[0].bioObj;
                        bioFullName = bioObj.bioFullName;
                        $('#txtDriverName').val(bioFullName);
                        bioSwdFullName = bioObj.bioSwdFullName;
                        $('#txtDriverFatherName').val(bioSwdFullName);
                        bioMobileNo = bioObj.bioMobileNo;                 
                        $('#mobileNo').val(bioMobileNo);
                        mob = bioMobileNo;
                        bioApplno = bioObj.bioApplno;
                        $('#txtManualDriverCode').val(bioApplno);
                        bioPermAdd1 = bioObj.bioPermAdd1;
                        bioPermAdd2 = bioObj.bioPermAdd2;
                        bioPermAdd3 = bioObj.bioPermAdd3;
                        $('#txtPermanentAddress').val(bioPermAdd1 + " " + bioPermAdd2 + " " + bioPermAdd3);
                        bioPermPin = bioObj.bioPermPin;
                        $('#txtPermanentPincode').val(bioPermPin);
                        bioPermSdName = bioObj.bioPermSdName;
                        $('#txtPermanentCityName').val(bioPermSdName);
                        bioTempAdd1 = bioObj.bioTempAdd1;
                        bioTempAdd2 = bioObj.bioTempAdd2;
                        bioTempAdd3 = bioObj.bioTempAdd3;
                        $('#txtCurrentAddress').val(bioTempAdd1 + " " + bioTempAdd2 + " " + bioTempAdd3);
                        bioTempPin = bioObj.bioTempPin;
                        $('#txtCurrentPincode').val(bioTempPin);
                        bioTempSdName = bioObj.bioTempSdName;
                        $('#txtCurrentCityName').val(bioTempSdName);
                        dlobj = parseData.response[0].response.dldetobj[0].dlobj;
                        olaName = dlobj.olaName;
                        $('#LicenseIssueBy').val(olaName);
                        dlNtValdtoDt = moment(dlobj.dlNtValdtoDt, "YYYY-MM-DD").format("DD/MM/YYYY");
                        $('#txtLicenseValidityDate').val(dlNtValdtoDt);
                        dlIssuedt = moment(dlobj.dlIssuedt, "YYYY-MM-DD").format("DD/MM/YYYY");
                        $('#txtLicenseInitialIssueDate').val(dlIssuedt);
                        $('#txtLicenseCurrentIssueDate').val(dlIssuedt);
                        // Set the driver image
                        var driverImageBase64 = parseData.response[0].response.dldetobj[0].bioImgObj.biPhoto;
                            // Assuming the image data is in bioDriverImage
                        console.log(driverImageBase64);                
                        if (driverImageBase64) {
                            $('#fuDocumentAttachment').attr('src', 'data:image/png;base64,' + driverImageBase64);
                        }
                    else {
                        console.log(parseData.code);
                        alert(parseData.message);
                    }
                    }
                    else {
                        console.log(parseData.code);
                        alert(parseData.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching details:', status, error);
                    console.error('Response:', xhr.responseText);
                    alert('Error fetching details');
                }
            });
        
        } else {
            alert('Driving License No and DOB are both mandatory');
        }

    });


    
});
</script>