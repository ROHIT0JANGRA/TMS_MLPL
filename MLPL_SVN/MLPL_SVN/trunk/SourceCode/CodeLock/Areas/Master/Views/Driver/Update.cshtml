@model CodeLock.Models.MasterDriver
@using Secure_Coding.MvcSecurityExtensions;
@using CodeLock.Models
@{
    ViewBag.Title = "Update";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Update", "Driver", FormMethod.Post, new { @class = "j-forms", @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.AntiModelInjectionFor(model => model.DriverId)
    @Html.HiddenFor(model => model.DriverId)
    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DriverCode, new { @class = "label" })
                    <div class="clearfix">
                        @Html.HiddenFor(model => model.DriverCode)
                        @Html.DisplayFor(model => model.DriverCode, new { @class = "label" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DriverName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", @id = "txtDriverName" })
                    </div>
                    @Html.ValidationMessageFor(model => model.DriverName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ManualDriverCode, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.ManualDriverCode, new { @class = "form-control", @id = "txtManualDriverCode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ManualDriverCode)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DriverFatherName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.DriverFatherName, new { @class = "form-control", @id = "txtDriverFatherName" })
                    </div>
                    @Html.ValidationMessageFor(model => model.DriverFatherName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.HiddenFor(model => model.VehicleId, new { @id = "hdnVehicleId" })
                    @Html.LabelFor(model => model.VehicleNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.VehicleNo, new { @class = "form-control", @id = "txtVehicleNo" })
                    </div>
                    @Html.ValidationMessageFor(model => model.VehicleNo)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.HiddenFor(model => model.DriverLocationId, new { @id = "hdnDriverLocationId" })
                    @Html.LabelFor(model => model.DriverLocationCode, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.DriverLocationCode, new { @class = "form-control", @id = "txtDriverLocationCode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.DriverLocationCode)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MobileNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.MobileNo)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PermanentAddress, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.PermanentAddress, new { @class = "form-control", @id = "txtPermanentAddress" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PermanentAddress)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.HiddenFor(model => model.PermanentCityId, new { @id = "hdnPermanentCityId" })
                    @Html.LabelFor(model => model.PermanentCityName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.PermanentCityName, new { @class = "form-control", @id = "txtPermanentCityName" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PermanentCityName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PermanentPincode, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.PermanentPincode, new { @class = "form-control", @id = "txtPermanentPincode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PermanentPincode)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.UsePermanentAddressAsCurrentAddress, new { @class = "label", @for = "chkCopyAddress" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.UsePermanentAddressAsCurrentAddress, new { @Id = "chkCopyAddress" })
                        <i></i>
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentAddress, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.CurrentAddress, new { @class = "form-control", @id = "txtCurrentAddress" })
                    </div>
                    @Html.ValidationMessageFor(model => model.CurrentAddress)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.HiddenFor(model => model.CurrentCityId, new { @id = "hdnCurrentCityId" })
                    @Html.LabelFor(model => model.CurrentCityName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.CurrentCityName, new { @class = "form-control", @id = "txtCurrentCityName" })
                    </div>
                    @Html.ValidationMessageFor(model => model.CurrentCityName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentPincode, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.CurrentPincode, new { @class = "form-control", @id = "txtCurrentPincode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.CurrentPincode)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LicenseNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.LicenseNo, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.LicenseNo)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseValidityDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseValidityDate), IsRequired = true, AllowFutureDate = true, AllowPastDate = false, IsValidateFinYear = false })
                </div>
            </div>

            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LicenseIssueBy, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.LicenseIssueBy, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.LicenseIssueBy)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.GuarantorName, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.GuarantorName, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.GuarantorName)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, new { @class = "label" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.IsActive)
                        <i></i>
                    </label>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CategoryId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.CategoryId, new List<SelectListItem> {
                        new SelectListItem() {Text = "Select",Value=""},
                        new SelectListItem() {Text = "First", Value="1"},
                        new SelectListItem() {Text = "Second", Value="2"},
                        new SelectListItem() {Text = "Cleaner", Value="3"},}, new { @class = "form-control" })
                        <i></i>

                    </div>
                    @Html.ValidationMessageFor(model => model.CategoryId)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "DoB", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.DoB), IsRequired = true, DefaultDate = Model.DoB, AllowFutureDate = false, AllowPastDate = true, MinDate = new DateTime(1950, 1, 1), MaxDate = DateTime.Now.AddDays(-18 * 365), IsValidateFinYear = false })
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Ethnicity, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.Ethnicity, new SelectList(ViewBag.EthnicityList, "Value", "Name"), "Select Ethnicity", new { @class = "form-control", @id = "ddlEthnicity" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.Ethnicity)

                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseInitialIssueDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseInitialIssueDate), IsRequired = true, DefaultDate = Model.LicenseInitialIssueDate, AllowFutureDate = false, AllowPastDate = true, IsValidateFinYear = false })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseCurrentIssueDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseCurrentIssueDate), IsRequired = true, DefaultDate = Model.LicenseCurrentIssueDate, AllowFutureDate = false, AllowPastDate = true, IsValidateFinYear = false })
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsLicenseVerified, new { @class = "label" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.IsLicenseVerified, new { @id = "chkIsLicenseVerified" })
                        @Html.Label("chkIsLicenseVerified", " ", new { @class = "label" })
                        <i></i>
                    </label>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.IsAddressVerified, new { @class = "label" })
                    <label class="checkbox">
                        @*<input type="checkbox">*@
                        @Html.CheckBoxFor(model => model.IsAddressVerified)
                        <i></i>
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Partial("DateTimePicker", new DateTimePicker() { FieldName = "LicenseVerifiedDate", FieldCaption = DataAnnotationHelper.GetDisplayName(Model, m => m.LicenseVerifiedDate), IsRequired = true, DefaultDate = Model.LicenseVerifiedDate, AllowFutureDate = false, AllowPastDate = true, IsValidateFinYear = false })
                </div>
            </div>
        </div>
        <div class="page-separator">Driver Document Type</div>
        <div class="row">
            <div class="col-sm-12">
                <div class="flip-scroll overflow-table">
                    <table class="table table-condensed cf" id="dtDocumentDetail">
                        <thead class="cf">
                            <tr>
                                <th>Document</th>
                                <th></th>
                                <th></th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.DocumentDetails.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.DocumentDetails[i].DocumentTypeId, new { @class = "label" })
                                                <div class="select">
                                                    @Html.DropDownListFor(model => model.DocumentDetails[i].DocumentTypeId, new SelectList(ViewBag.DriverDocumentList, "Value", "Name", Model.DocumentDetails[i].DocumentTypeId), "Select Driver DocumentList", new { @class = "form-control", @id = "ddlDocumentTypeId" + i.ToString() })
                                                    <i></i>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.DocumentDetails[i].DocumentTypeId)
                                            </div>
                                        </div>
                                    </td>

                                    <td>
                                        <div class="input">
                                            Browse
                                            <input type="file" class="form-control" id="@("fuDocumentAttachment" + i)" name="@("DocumentDetails[" + i + "].DocumentAttachment")" onchange="document.getelementbyid('prepend-big-btn').value = this.value;">
                                            @Html.HiddenFor(model => model.DocumentDetails[i].DocumentAttachment, new { @id = "hdnDocumentAttachment", @Value = Model.DocumentDetails[i].DocumentAttachment })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.DocumentDetails[i].DocumentAttachment)
                                    </td>

                                    <td>
                                        @{ var fileNamelnkId = "lnkAttachment" + i;}
                                        <a href="#" id=@fileNamelnkId onclick="return ViewAttachment(this.id);">View</a>
                                        @Html.HiddenFor(model => model.DocumentDetails[i].DocumentName, new { id = "hdnDocumentName" + i.ToString() })
                                    </td>
                                    <td></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="form-footer">
            <button type="submit" class="btn btn-success primary-btn">Update</button>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        SetPageLoad('Driver', 'Update', 'txtDriverName', 'Goto List', '@Url.Action("Index")', 'Add New', '@Url.Action("Insert")', 'View Detail', '@Url.Action("View", new { id = Model.DriverId })');
        txtVehicleNo = $('#txtVehicleNo');
        hdnVehicleId = $('#hdnVehicleId');
        txtDriverLocationCode = $('#txtDriverLocationCode');
        hdnDriverLocationId = $('#hdnDriverLocationId');
        txtPermanentCityName = $('#txtPermanentCityName');
        hdnPermanentCityId = $('#hdnPermanentCityId');
        txtCurrentCityName = $('#txtCurrentCityName');
        hdnCurrentCityId = $('#hdnCurrentCityId');
        chkIsLicenseVerified = $('#chkIsLicenseVerified');
        chkIsLicenseVerified.change(LicenseVerifiedChange);
        LicenseVerifiedChange();
        btnSubmit = $('#btnSubmit');
        btnSubmit.click(OnSubmit);

        VehicleAutoComplete('txtVehicleNo', 'hdnVehicleId');
        txtVehicleNo.blur(function () { IsVehicleNoExist(txtVehicleNo, hdnVehicleId); });
        LocationAutoComplete('txtDriverLocationCode', 'hdnDriverLocationId');
        txtDriverLocationCode.blur(function () { IsLocationCodeExist(txtDriverLocationCode, hdnDriverLocationId); });
        CityAutoComplete('txtPermanentCityName', 'hdnPermanentCityId');
        txtPermanentCityName.blur(function () { IsCityNameExist(txtPermanentCityName, hdnPermanentCityId); });
        CityAutoComplete('txtCurrentCityName', 'hdnCurrentCityId');
        txtCurrentCityName.blur(function () { IsCityNameExist(txtCurrentCityName, hdnCurrentCityId); });
        $("#chkCopyAddress").change(CopyAddress);
        InitGrid('dtDocumentDetail', false, 3, Init);

        if ('@SessionUtility.LoginUserRoleName' != "SITE ADMIN") {
            $('#txtDriverName').disable();
        }
    });

    function LicenseVerifiedChange() {
        if (chkIsLicenseVerified.IsChecked) {
            $('#txtLicenseVerifiedDate').enable();
            AddRequired($('#txtLicenseVerifiedDate'), "Please select License Verified Date")
        }
        else {
            $('#txtLicenseVerifiedDate').val('');
            $('#txtLicenseVerifiedDate').disable();
            RemoveRequired($('#txtLicenseVerifiedDate'));
        }
    }

    function Init() {
        $('[id*="ddlDocumentTypeId"]').each(function () {
            var ddlDocumentTypeId = $(this);
            ddlDocumentTypeId.change(function () {
                try {
                    IsDocumentExist($(this));
                }
                catch (e) {
                    $(this).val('');
                    SetDropDownValue($(this), '');
                    SetFormFieldFocus($(this).attr('id'));
                }
            });
        });
        return false;
    }

    function IsDocumentExist(obj) {
        if (obj.val() != '') {
            var outertr = obj.closest('tr');
            var outerddlDocumentTypeId = outertr.find('[id*="ddlDocumentTypeId"]');

            $('#dtDocumentDetail tr:not(:first)').each(function () {
                var innertr = $(this);
                var innerddlDocumentTypeId = innertr.find('[id*="ddlDocumentTypeId"]');

                if (innerddlDocumentTypeId.attr('id') != outerddlDocumentTypeId.attr('id') && innerddlDocumentTypeId.val() == outerddlDocumentTypeId.val()) {
                    ShowMessage("Document is already exist");
                    throw (true);
                }
            });
        }
    }

    function CopyAddress() {
        if ($('#chkCopyAddress').IsChecked) {
            $('#txtCurrentAddress').val($('#txtPermanentAddress').val());
            hdnCurrentCityId.val(hdnPermanentCityId.val());
            txtCurrentCityName.val(txtPermanentCityName.val());
            $('#txtCurrentPincode').val($('#txtPermanentPincode').val());
            $('#txtCurrentAddress').attr('readOnly', true);
            txtCurrentCityName.attr('readOnly', true);
            $('#txtCurrentPincode').attr('readOnly', true);
        }
        else {
            $('#txtCurrentAddress').val('');
            hdnCurrentCityId.val('');
            txtCurrentCityName.val('');
            $('#txtCurrentPincode').val('');
            $('#txtCurrentAddress').attr('readOnly', false);
            txtCurrentCityName.attr('readOnly', false);
            $('#txtCurrentPincode').attr('readOnly', false);
        }
    }

    function OnSubmit() {
        $('[id*="ddlDocumentTypeId"]').each(function () {
            var ddlDocumentTypeId = $(this);
            var fuDocumentAttachment = $('#' + ddlDocumentTypeId.attr('id').replace('ddlDocumentTypeId', 'fuDocumentAttachment'));
            if (fuDocumentAttachment.val() != '')
                AddRequired(ddlDocumentTypeId, "Please select Document");
            else
                RemoveRequired(ddlDocumentTypeId);
            if (ddlDocumentTypeId.val() != '')
                AddRequired(fuDocumentAttachment, "Please select Document File");
            else
                RemoveRequired(fuDocumentAttachment);
        });
    }

    function ViewAttachment(obj) {
        var obj = $('#' + obj);
        var hdnDocumentName = $('#' + obj.Id.replace('lnkAttachment', 'hdnDocumentName'));
        var filePath = '';
        if ('@ConfigHelper.IsLocalStorage' == 'True')
            filePath = '@ConfigHelper.JsLocalStoragePath' + 'Driver/';
        else
            filePath = "@ConfigHelper.CloudStoragePath";
        window.open(filePath + hdnDocumentName.val(), "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=100,left=500,width=400,height=300");
        return false;
    }
</script>