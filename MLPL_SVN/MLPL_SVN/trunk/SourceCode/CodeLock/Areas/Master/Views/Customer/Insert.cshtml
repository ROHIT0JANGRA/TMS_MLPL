@model CodeLock.Models.MasterCustomer
@using Secure_Coding.MvcSecurityExtensions;

@{
    ViewBag.Title = "Customer Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var groupData = new[]
    {
            Tuple.Create(103, "customer-packaging"),
            Tuple.Create(100, "Customers"),
            Tuple.Create(111, "Vendor-Raw MateriaL(Production)"),
            Tuple.Create(116, "Sub-Customer"),
            Tuple.Create(105, "Vendor-LOGISTIC(Logistic)"),
            Tuple.Create(107, "Vendor-PACKAGING(Packaging)"),
            Tuple.Create(114, "customer-production")
    // Continue to add other groups as provided in your list...
};

    List<Tuple<int, string>> tuplesGroup = new List<Tuple<int, string>>();

    // Add each tuple from groupData to tuplesGroup
    foreach (var tuple in groupData)
    {
        tuplesGroup.Add(tuple);
    }
}

<style>
    #loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Ensure it's above other content */
    }

    .spinner-img {
        width: 250px; /* Adjust size as needed */
        height: 250px; /* Adjust size as needed */
    }
</style>
<div id="loader" style="display: none;">
    <img src="~/assets/images/loader.gif" alt="Loading..." class="spinner-img">
</div>
<div id="dvWizard">
    <div class="panel-body">

        @using (Html.BeginForm("Insert", "Customer", FormMethod.Post, new { @class = "j-forms" }))
        {

            <div class="widget-wrap">
                @Html.AntiModelInjectionFor(m => m.CustomerId)
                @Html.HiddenFor(m => m.CustomerId, new { @id = "hdnCustomerId" })



                <div class="tab-pane">
                    <div class="row">
                        <div class="col-12">

                            <div class="col-sm-3" id="dvCustomerType">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.CustomerTypeId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerTypeId, new SelectList(ViewBag.CustomerTypeList, "Value", "Name"), "Select Customer Type", new { @class = "form-control", @id = "ddlCustomerType" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerTypeId)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GroupCode, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.GroupCode, new SelectList(ViewBag.GroupList, "Value", "Name"), "Select GroupCode", new { @class = "form-control", @id = "ddlGroupCode" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.GroupCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control", @id = "customerName" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CustomerName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.Password, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.Password, new { @class = "form-control", @type = "password" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.Password)
                                </div>
                            </div>
                            <div class="col-sm-3" id="dvGstTinNo">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.GstTinNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.GstTinNo, new { @class = "form-control", @id = "txtGstTinNo" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.GstTinNo)
                                    <button type="button" id="btnFetchData" class="btn btn-primary">Autofill</button>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.IndustryId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerDetail.IndustryId, new SelectList(ViewBag.IndustryList, "Value", "Name"), "Select Industry", new { @class = "form-control", @id = "ddlIndustry" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.IndustryId)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.PanNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.PanNo, new { @class = "form-control", @id = "txtPanNo" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.PanNo)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.MobileNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.MobileNo, new { @class = "form-control", @id = "txtMobileNo" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.MobileNo)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.EmailId, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.EmailId, new { @class = "form-control", @id = "txtEmail" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.EmailId)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row col-12">
                        <div class="col-sm-3" id="dvCustomerPhoneNo">
                            <div class="form-group">
                                @Html.LabelFor(model => model.PhoneNo, new { @class = "label" })
                                <div class="input-wrapper">
                                    @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control", @id = "txtPhoneNo" })
                                </div>
                                @Html.ValidationMessageFor(model => model.PhoneNo)
                            </div>
                          
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                <select id="groupSelect" name="groupCodeSelectedId" class="form-control">
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.TypeOfOwnershipId, new { @class = "label" })
                                <div class="select">
                                    @Html.DropDownListFor(model => model.MasterCustomerDetail.TypeOfOwnershipId, new SelectList(ViewBag.OwnerShipList, "Value", "Name"), "Select OwnerShip", new { @class = "form-control", @id = "ddlOwnership" })
                                    <i></i>
                                </div>
                                @Html.ValidationMessageFor(model => model.MasterCustomerDetail.TypeOfOwnershipId)
                            </div>
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.MasterCustomerDetail.CustomerLocation, new { @class = "label" })
                            @Html.HiddenFor(model => model.MasterCustomerDetail.CustomerLocation, new { @id = "hdnCustomerLocation" })
                            @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerLocation, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2-multiple", @multiple = "", @id = "ddlCustomerLocation", @placeholder = "Select Location" })
                            @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerLocation)
                        </div>

                        @*<div class="col-sm-3">
                                @Html.LabelFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new { @class = "label" })
                                @Html.HiddenFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new { @id = "hdnCustomerDeliveryLocation" })
                                @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2-multiple", @multiple = "", @id = "ddlCustomerDeliveryLocation", @placeholder = "Select Location" })
                                @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation)
                            </div>*@

                    </div>
                    <div class="row col-12">
                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsTruckForwardNote, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsTruckForwardNote)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsMilkrunHrsPerDayEnabled, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsMilkrunHrsPerDayEnabled)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsLaneID, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsLaneID)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.IsActive, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.IsActive)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="unit">
                                <div class="inline-group">
                                    @Html.LabelFor(model => model.PayBas, new { @class = "label-bold" })
                                    @for (var i = 0; i < Model.PayBas.Count(); i++)
                                    {
                                        <label class="checkbox">
                                            @Html.CheckBoxFor(m => m.PayBas[i].IsActive, new { @id = "chkPayBas" + i.ToString() })
                                            <i></i>
                                            @Html.LabelFor(m => m.PayBas[i].IsActive, Model.PayBas[i].CodeDescription, new { @class = "label", @For = "chkPayBas" + i.ToString() })
                                        </label>
                                        @Html.HiddenFor(m => m.PayBas[i].CodeTypeId)
                                        @Html.HiddenFor(m => m.PayBas[i].CodeId)
                                        @Html.HiddenFor(m => m.PayBas[i].CodeDescription)
                                    }
                                    @Html.ValidationMessageFor(model => model.PayBas)
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="btn-block">
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('primaryAddressForm')">Primary Address</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('secondaryAddressForm')">Secondary Address</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('ContactPerson')">ContactPerson</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('PaymentTerms')">PaymentTerms</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('BusinessPartnerBank')">Business Partner Bank</button>
                    <button class="btn btn-success" type="button" style="margin-top:2px" id="btnAddRow"><i class="fa fa-plus"></i> Add Row</button>
                </div>

                <div id="primaryAddressForm" class="address-form">
                    <div class="tab-pane">
                        <div class="page-separator">Address (Primary)</div>

                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Address1, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Address1, new { @class = "form-control", @id = "billingAddress1" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Address1)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Address2, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Address2, new { @class = "form-control", @id = "billingAddress2" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Address2)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.CountryId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.CountryId, new SelectList(ViewBag.CountryList, "Value", "Name"), "Select Country", new { @class = "form-control", @id = "ddlCountry" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.CountryId)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.StateId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.StateId, new SelectList(ViewBag.StateList, "Value", "Name"), "Select State", new { @class = "form-control", @id = "ddlState" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.StateId)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.CityId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.CityId, new SelectList(ViewBag.CityList, "Value", "Name"), "Select City", new { @class = "form-control", @id = "ddlCity" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.CityId)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Pincode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Pincode, new { @class = "form-control Number", @id = "billingPostalCode" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Pincode)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!---GST Mapping Here-->
                <div id="ContactPerson" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">ContactPerson</div>
                        <div class="tab-pane">
                            <div class="page-separator">Decision Maker</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerEmailId)
                                    </div>
                                </div>
                            </div>

                            <div class="page-separator">Sales Person(For Booking Deal)</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId)
                                    </div>
                                </div>
                            </div>

                            <div class="page-separator">Sales Person(For Closing Deal)</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId)
                                    </div>
                                </div>
                            </div>

                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="PaymentTerms" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Payment Terms</div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PaymentTerms, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.PaymentTerms, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PaymentTerms)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InterestOnArrearsPercentage, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.InterestOnArrearsPercentage, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.InterestOnArrearsPercentage)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PriceList, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.PriceList, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PriceList)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalDiscountPercentage, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.TotalDiscountPercentage, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.TotalDiscountPercentage)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CommitmentLimit, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.CommitmentLimit, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CommitmentLimit)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.EffectiveDiscountsGroups, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.EffectiveDiscountsGroups, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.EffectiveDiscountsGroups)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DunningTerm, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.DunningTerm, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DunningTerm)
                                </div>
                            </div>
                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="BusinessPartnerBank" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Business Partner Bank</div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankCountryRegion, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BankCountryRegion, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BankCountryRegion)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BankName, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BankName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BankCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BankCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Account, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.Account, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Account)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BICSWIFTCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BICSWIFTCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BICSWIFTCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BankAccountName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BankAccountName, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BankAccountName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Branch, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.Branch, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Branch)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CtrlIntID, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.CtrlIntID, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CtrlIntID)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MandateID, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MandateID, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MandateID)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DateOfSignature, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.DateOfSignature, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DateOfSignature)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AddressCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.AddressCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.AddressCode)
                                </div>
                            </div>
                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="secondaryAddressForm" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Address (Secondary)</div>
                        <div id="addressRowsContainer">
                            @if (Model.MasterAddressList != null && Model.MasterAddressList.Count > 0)
                            {
                                for (int i = 0; i < Model.MasterAddressList.Count; i++)
                                {

                                    @Html.Partial("_CustomerAddress", Model.MasterAddressList[i], new ViewDataDictionary(ViewData) { TemplateInfo = new TemplateInfo { HtmlFieldPrefix = $"MasterAddressList[{i}]" } })
                                }

                            }
                        </div>

                    </div>
                </div>

                <div class="display text-right">
                    <button class="btn btn-success" type="submit"><i class="fa fa-save fa-adjust"></i>Save</button>
                    <button class="btn btn-warning" type="reset"><i class="fa fa-refresh fa-adjust"></i>Reset</button>

                </div>
            </div>

        }

    </div>
</div>

<script>
    var ruleMasterUrl, ddlState = $("#ddlState");
    $(document).ready(function () {
        $('form.j-forms').on('submit', function () {

            $('#loader').hide();
        });
    $('#ddlCountry').change(function () {
        OnCountryChange();
        return false;
    });
    SetPageLoad('Customer', 'Create', 'ddlGroupCode', 'Go To List', '@Url.Action("Index")');
    ruleMasterUrl = '@Url.Action("", "Rules", new { Area = "Master" })';
        baseUrl = '@Url.Action("", "Gst", new { Area = "Master" })';
    ddlCustomerLocation = $('#ddlCustomerLocation');
    ddlCustomerDeliveryLocation = $('#ddlCustomerDeliveryLocation');
    // *****************Add Buttion Functaionality **************

    // Add Address
    $('#btnAddRow').click(function () {
        var addressIndex = $('#addressRowsContainer.address-row').length;
        $.ajax({
            url: '@Url.Action("GetNewCustomerAddress", "Customer")',
            type: 'POST',
            data: { Index: addressIndex, ClickCount:-1},
            success: function (partialView) {
                var newIndex = addressIndex++; // Increment addressIndex after sending it
                partialView = partialView.replace(new RegExp(`MasterAddressList\\[\\d+\\]`, 'g'), `MasterAddressList[${newIndex}]`);
                 $('#addressRowsContainer').append(partialView);
            },
            error: function () {
                alert('Error fetching new address.');
            }
        });

    });

    // Delete Address
    $(document).on('click', '.btnDelete', function () {
        var rowToRemove = $(this).closest('.address-row');
        var separatorToRemove = rowToRemove.next('.page-separator');
        if (separatorToRemove.length > 0) {
            separatorToRemove.remove();
        }
        if ($('#addressRowsContainer .address-row').length > 1) {
            $(this).closest('.address-row').remove();
            // Enable delete button for the new first row
            $('#addressRowsContainer .address-row:first-child .btnDelete').prop('disabled', false);
        } else {
            alert('At least one address must be present.');
        }
        $('#addressRowsContainer .address-row').each(function (index) {
            debugger;
            $(this).find('input, select').each(function () {
                var name = $(this).attr('name');
                if (name) {
                    var newName = name.replace(/\[\d+\]/, '[' + index + ']');
                    $(this).attr('name', newName);
                    $(this).attr('id', newName);
                }
            });
        });
    });



    AttachEvents();
    $('#ddlCustomerType').change(OnCustomerTypeChange);
    var requestData = { moduleId: 15, ruleId: 11 };
    AjaxRequestWithPostAndJson(ruleMasterUrl + '/GetModuleRuleByIdAndRuleId', JSON.stringify(requestData), function (result) {
        var useCustomerType = true;
        useCustomerType = result == "Y" ? true : false;
        $('#dvCustomerType').showHide(result == "Y" ? true : false);
        if (!useCustomerType)
            $('#ddlCustomerType').val(1);
    }, ErrorFunction, false);

    var allowPhoneNoMandatoryForCustomer = false;
    var request = { moduleId: 15, ruleId: 12 };
    AjaxRequestWithPostAndJson(ruleMasterUrl + '/GetModuleRuleByIdAndRuleId', JSON.stringify(request), function (result) {
        allowPhoneNoMandatoryForCustomer = (result == "Y" ? true : false);
        if (!allowPhoneNoMandatoryForCustomer) {
            RemoveRequired(txtPhoneNo);
        }
        else {
            AddRequired(txtPhoneNo, 'Please enter Phone No. ');
        }
    }, ErrorFunction, false);

    InitGrid('AddMultiAddress', false, 2, Init);

    OnCustomerTypeChange();
    InitObjects();
});

function AttachEvents() {
    $('#ddlState').change(OnStateChange);
    $('[id*="chkPayBas"]').prop("checked", false);
    InitMultiSelect(ddlCustomerLocation.Id, true, false, true);
    DropDownChange('ddlCustomerLocation', function () {
        $('#hdnCustomerLocation').val($(this).val());
    });

    InitMultiSelect(ddlCustomerDeliveryLocation.Id, true, false, true);

    DropDownChange('ddlCustomerDeliveryLocation', function () {
        $('#hdnCustomerDeliveryLocation').val($(this).val());
    });

    $('#txtMobileNo').on('input', function () {
        var numericValue = $(this).val().replace(/[^0-9]/g, '');
        $(this).val(numericValue);
    });

    $('#txtPhoneNo').on('input', function () {
        var numericValue = $(this).val().replace(/[^0-9]/g, '');
        $(this).val(numericValue);
    });

    $('.Number').on('input', function () {
        var numericValue = $(this).val().replace(/[^0-9]/g, '');
        $(this).val(numericValue);
    });
    ddlState.change(function () {
        //txtCityName.val('');
        //hdnCityId.val('');
        if (ddlState.val() != '') {
            var requestData = { GstId: 0, StateId: ddlState.val() };
            AjaxRequestWithPostAndJson(baseUrl + '/ValidateGSTState', JSON.stringify(requestData), function (result) {
                if (!result.IsSuccessfull) {
                    ShowMessage(result.ErrorMessage);
                    ddlState.val('');
                    hdnStateId.val('');
                    lblGstType.text('');
                    ddlState.focus();
                    isStepValid = false;
                    return false;
                }

            }, ErrorFunction, false);
        }

        /* var result = IsStateNameExist(ddlState);*/
        GetGstTypeByStateId(ddlState, lblGstType);
        debugger;
        /* return result;*/
        AutoComplete('txtCityName', cityMasterUrl + '/GetAutoCompleteCityNameListByStateId', 'cityName', 'l', 'l', 'l', 'd', '', 'hdnCityId', '', '', true, function () {
            return [{ Key: 'stateId', Value: ddlState.val() }];
        });
        //txtCityName.blur(function () { return IsCityNameExist(txtCityName, hdnCityId); });
        $("#ddlRegistrationType").change(RegistrationTypeChange);
        RegistrationTypeChange();
    });

}

function OnCustomerTypeChange() {
    $('#dvGstTinNo').showHide($('#ddlCustomerType').val() == 1);
    if ($('#ddlCustomerType').val() == 1)
        AddRequired($('#txtGstTinNo'), 'Please Enter Gst No');
    else
        RemoveRequired($('#txtGstTinNo'));
}
function showAddressForm(formId) {
    debugger;
        document.getElementById('primaryAddressForm').style.display = 'none';
        document.getElementById('secondaryAddressForm').style.display = 'none';
        //document.getElementById('GstMapping').style.display = 'none';
        document.getElementById('ContactPerson').style.display = 'none';
        document.getElementById('PaymentTerms').style.display = 'none';
        document.getElementById('BusinessPartnerBank').style.display = 'none';
        //document.getElementById('secondaryAddressMapping').style.display = 'none';

    document.getElementById(formId).style.display = 'block';
    //if (formId == 'secondaryAddressForm') {
    //    document.getElementById('btnAddRow').style.display = 'block';
    //} else {
    //    document.getElementById('btnAddRow').style.display = 'none';
    //}
    }
function ValidateOnStep1() {
    if (!ValidateMultiCheckBox('chkPayBas', 'PayBas')) {
        isStepValid = false;
        return false;
    }
    else {
        isStepValid = true;
    }
    return true;
}

function ValidateMultiCheckBox(partialId, entityName) {
    var selected = false, firstCheckBox = null;
    $('[id*="' + partialId + '"]').each(function () {
        if (firstCheckBox == null)
            firstCheckBox = $(this);
        if ($(this).is(':checked'))
            selected = true;
    });
    if (!selected) {
        ShowMessage("Please select at-least one " + entityName);
        firstCheckBox.focus();
        return false;
    }
    return true;
}
function OnCountryChange() {
    if ($('#ddlCountry').val() != "") {
        var requestData = { countryId: $('#ddlCountry').val() };
        AjaxRequestWithPostAndJson('@Url.Action("GetStateListByCountryId", "State")', JSON.stringify(requestData), GetStateListSuccess, ErrorFunction, false);
    }
    else
        GetStateListSuccess([]);
}

function GetStateListSuccess(responseData) {
    BindDropDownList('ddlState', responseData, 'Value', 'Name', '', 'Select State');
}

function OnStateChange() {
    if ($('#ddlState').val() != "") {
        var requestData = { stateId: $('#ddlState').val() };
        AjaxRequestWithPostAndJson('@Url.Action("GetCityListByStateId", "City")', JSON.stringify(requestData), GetCityListSuccess, ErrorFunction, false);
    }
    else
        GetCityListSuccess([]);
}

function GetCityListSuccess(responseData) {
    BindDropDownList('ddlCity', responseData, 'Value', 'Name', '', 'Select City');
}

        function GetGstTypeByStateId(ddlState, lblGstType) {
    if (ddlState.val() != 0 && ddlState.val() != '') {
        var requestData = { stateId: ddlState.val() };
    AjaxRequestWithPostAndJson('@Url.Action("CheckIsStateOrUnionTerritory","State")', JSON.stringify(requestData), function (result) {
        if (result.IsState)
            lblGstType.text('SGST');
        else
            lblGstType.text('UGST');

    }, ErrorFunction, false);
}
else
    lblGstType.text('');
}
function InitObjects() {
    txtStateName = $('#txtStateName');
    ddlState = $('#ddlState');
    txtCityName = $('#txtCityName'); hdnCityId = $('#hdnCityId'); lblGstType = $('#lblGstType'); hdnGstId = $('#hdnGstId');
    txtAddress = $('#txtAddress'); txtGstTinNo = $('#txtGstTinNo'); txtProvisionalId = $('#txtProvisionalId');
    spnMassage = $('#spnMassage');
    txtPanNo = $('#txtPanNo');
    cityMasterUrl = '@Url.Action("", "City", new { Area = "Master" })';
}

    function RegistrationTypeChange() {
        $("#dvgsttinno").showHide($("#ddlRegistrationType").val() != 2)
        if ($("#ddlRegistrationType").val() != 2) {
            if (hdnOwnerType.val() == 3) {
                var requestData = { CustomerId: hdnOwnerId.val() };
                AjaxRequestWithPostAndJson('@Url.Action("GetById", "Customer")', JSON.stringify(requestData), function (result) {
                    if (result.MasterCustomerDetail.IsTruckForwardNote) {
                        RemoveRequired(txtGstTinNo);
                        AddRequired($('#txtPanNo'), 'Please PAN No');
                    }
                }, ErrorFunction, false);
            }
            else
                AddRequired($('#txtGstTinNo'), 'Please Enter Gst No');
        } else {
            RemoveRequired($('#txtGstTinNo'));
        }

}

function OnChangeStateWiseCity(selectElement) {
    var stateId = $(selectElement).val(); // Get selected state ID
    var index = $(selectElement).attr('id').match(/\[(.*?)\]/)[1]; // Extract index from ID
    console.log("Selected State ID:", stateId);
    console.log("Index:", index);

    // AJAX request to fetch cities based on selected state ID
    $.ajax({
        url: '@Url.Action("GetCityListByStateId", "City")', // Replace with your actual endpoint
        type: 'POST',
        dataType: 'json',
        data: { stateId: stateId }, // Data to send to the server
        success: function(response) {
            console.log("Received response:", response);

            // Clear existing options and populate new ones
            var cityDropdown = $('#MasterAddressList\\[' + index + '\\]\\.CityId'); // Escape special characters in ID
            console.log("City Dropdown ID:", cityDropdown.attr('id'));
            cityDropdown.empty(); // Clear previous options

            // Populate dropdown with new options
            $.each(response, function(index, city) {
                console.log("Adding city:", city.Value, city.Name);
                cityDropdown.append($('<option>', {
                    value: city.Value,
                    text: city.Name
                }));
            });
        },
        error: function(xhr, status, error) {
            console.error('Error fetching cities:', error);
            // Handle error scenario
        }
    });
}
    /// *******************  Fetch the Gst Details From Ulip Api *******************
$(document).ready(function () {
    // Handle fetching customer data
    $('#btnFetchData').click(function () {
        var gstNo = $('#txtGstTinNo').val();
        if (gstNo) {
            $('#loader').show();
            $.ajax({
                url: '@Url.Action("FetchCustomerDetailsFromApi", "Customer")',
                type: 'POST',
                data: { gstin: gstNo },
                success: function (data) {
                    $('#loader').hide();
                    var parseData = JSON.parse(data);
                    if (parseData.code === "200") {
                        var response = parseData.response[0].response;

                        // Fetch and set main customer information
                        $('#customerName').val(response.legalNameOfBusiness || '');
                        $('#customerCode').val(response.gstIdentificationNumber || '');
                        $('#txtMobileNo').val(response.mobileNo || '');
                        $('#customerEmailId').val(response.emailId || '');
                        $('#natureOfBusinessActivity').val(response.natureOfBusinessActivity.join(", ") || '');
                        $('#centerJurisdiction').val(response.centerJurisdiction || '');
                        $('#constitutionOfBusiness').val(response.constitutionOfBusiness || '');
                        $('#dateOfRegistration').val(response.dateOfRegistration || '');
                        $('#gstnStatus').val(response.gstnStatus || '');
                        $('#stateJurisdictionCode').val(response.stateJurisdictionCode || '');
                        $('#dateOfCancellation').val(response.dateOfCancellation || '');
                        $('#lastUpdatedDate').val(response.lastUpdatedDate || '');
                        $('#tradeName').val(response.tradeName || '');
                        $('#taxpayerType').val(response.taxpayerType || '');
                        $('#eInvoiceStatus').val(response.eInvoiceStatus || '');
                        $('#stateJurisdiction').val(response.stateJurisdiction || '');
                        $('#centerJurisdictionCode').val(response.centerJurisdictionCode || '');

                        // Fetch and set principal place of business
                        var principalAddress = response.principalPlaceOfBusinessFields.principalPlaceOfBusinessAddress;
                        $('#billingAddress1').val(principalAddress.buildingNumber + ' ' + principalAddress.streetName + ' ' + principalAddress.buildingName || '');
                        $('#billingAddress2').val(principalAddress.floorNumber + ' ' + principalAddress.districtName + ' ' + principalAddress.stateName + ' ' + principalAddress.pincode || '');
                        $('#ddlCountry').val(1);

                        SetStateAndCity(principalAddress.districtName, principalAddress.stateName);
                        $('#billingPostalCode').val(principalAddress.pincode || '');

                        // Handle additional places of business
                        var additionalPlaces = response.additionalPlaceOfBusinessFields;
                        if (additionalPlaces && additionalPlaces.length > 0) {
                            $('#addressRowsContainer').empty(); // Clear existing rows
                            additionalPlaces.forEach(function (place, index) {
                                var addressData = place.additionalPlaceOfBusinessAddress;
                                var MasterAddress = {
                                    CityName: addressData.districtName,
                                    AddressCode: "",
                                    Address1: addressData.buildingNumber + ' ' + addressData.streetName + ' ' + addressData.buildingName,
                                    Address2: addressData.location + ' ' + addressData.districtName + ' ' + addressData.stateName + ' ' + addressData.pincode,
                                    MobileNo: "",
                                    StatisticalChargesCode: "",
                                    IsMreNoApplicable: false,
                                    EmailId: "",
                                    CountryId: 1,
                                    CityId: 0,
                                    StateId: 0,
                                    StateName: addressData.stateName,
                                    ProvisionalId: "",
                                    GstTinNo: "",
                                    GstType: "",
                                    Pincode: addressData.pincode,
                                    RegistrationType: "",
                                    RegistrationTypeId: 0,
                                    IsActive: true
                                };
                                var MasterAddressJson = JSON.stringify(MasterAddress);

                                // Fetch the partial view from the server and update the index
                                $.ajax({
                                    url: '@Url.Action("GetCustomerAddressForAPI", "Customer")',
                                    type: 'POST',
                                    contentType: 'application/json',
                                    data: JSON.stringify({ MasterAddressJson: MasterAddressJson, Index: index }),
                                    success: function (partialView) {
                                        // Ensure each address row has a unique index
                                        var newIndex = $('#addressRowsContainer.address-row').length;

                                        // Replace index in the partial view HTML
                                        partialView = partialView.replace(new RegExp(`MasterAddressList\\[\\d+\\]`, 'g'), `MasterAddressList[${newIndex}]`);

                                        // Append the partial view to the container
                                        $('#addressRowsContainer').append(partialView);

                                        // Populate the new row with address data
                                        $(`#MasterAddressList_${newIndex}__Address1`).val(addressData.buildingNumber + ' ' + addressData.streetName + ' ' + addressData.buildingName || '');
                                        $(`#MasterAddressList_${newIndex}__Address2`).val(addressData.location + ' ' + addressData.districtName + ' ' + addressData.stateName + ' ' + addressData.pincode || '');
                                        $(`#MasterAddressList_${newIndex}__City`).val(addressData.districtName || '');
                                        $(`#MasterAddressList_${newIndex}__State`).val(addressData.stateName || '');
                                        $(`#MasterAddressList_${newIndex}__Country`).val('India'); // Assuming 'India' as default
                                        $(`#MasterAddressList_${newIndex}__PostalCode`).val(addressData.pincode || '');
                                    },
                                    error: function (xhr, status, error) {
                                        console.error('AJAX request failed:', status, error);
                                        alert('Error fetching new address.');
                                    }
                                });
                            });
                        }
                    } else {
                        console.warn('No data found for the provided GST number');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX request failed:', status, error);
                    alert('Failed to fetch customer details. Please try again.');
                    $('#loader').hide();
                }
            });
        } else {
            alert('Please enter a GST number');
        }
    });

    // Add new address row functionality
    $('#btnAddRow').click(function () {
        var addressIndex = $('#addressRowsContainer .address-row').length;
        $.ajax({
            url: '@Url.Action("GetNewCustomerAddress", "Customer")',
            type: 'POST',
            data: { Index: addressIndex },
            success: function (partialView) {
                var newIndex = addressIndex; // Use the current count as new index
                partialView = partialView.replace(new RegExp(`MasterAddressList\\[\\d+\\]`, 'g'), `MasterAddressList[${newIndex}]`);
                $('#addressRowsContainer').append(partialView);
                $("#MasterAddressList[" + newIndex + "].AddressCode").prop('disabled', false); // Removing disabled in this class
            },
            error: function (xhr, status, error) {
                console.error('AJAX request failed:', status, error);
                alert('Error fetching new address.');
            }
        });
    });

    // Remove address row functionality
    // Remove address row functionality
    $('#addressRowsContainer').on('click', '.btnDelete', function () {
        // Remove the closest address row
        $(this).closest('.address-row').remove();

        // Update indices of remaining rows
        $('#addressRowsContainer .address-row').each(function (index) {
            // Update name and id attributes of inputs inside this row
            $(this).find('input, select, textarea').each(function () {
                var nameAttr = $(this).attr('name');
                if (nameAttr) {
                    var updatedName = nameAttr.replace(/MasterAddressList\[\d+\]/, `MasterAddressList[${index}]`);
                    $(this).attr('name', updatedName);
                }
                var idAttr = $(this).attr('id');
                if (idAttr) {
                    var updatedId = idAttr.replace(/MasterAddressList_\d+/, `MasterAddressList_${index}`);
                    $(this).attr('id', updatedId);
                }
            });
        });
    });
});


function SetStateAndCity(CityName, StateName) {
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetCustomerAddressInfoForApi", "Customer")',
        data: { CityName: CityName, StateName: StateName },
        success: function (result) {
            console.log(result);
            $('#ddlState').val(result.StateId);
            $('#ddlCity').val(result.CityId);
        }
    })
}
    $(document).ready(function () {
        var groupData = [
            {id:1,name :"--Select The Group --"},
            { id: 103, name: "customer-packaging" },
            { id: 100, name: "Customers" },
            { id: 111, name: "Vendor-Raw MateriaL(Production)" },
            { id: 116, name: "Sub-Customer" },
            { id: 105, name: "Vendor-LOGISTIC(Logistic)" },
            { id: 107, name: "Vendor-PACKAGING(Packaging)" },
            { id: 114, name: "customer-production" },
            // Continue to add other groups as provided in your list...
        ];

        var $groupSelect = $('#groupSelect');

        // Populate dropdown
        $.each(groupData, function (index, group) {
            $groupSelect.append($('<option>', {
                value: group.id,
                text: group.name
            }));
        });
    });


</script>
