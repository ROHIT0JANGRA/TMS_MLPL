@model CodeLock.Models.MasterCustomer
@using Secure_Coding.MvcSecurityExtensions;

@{
    ViewBag.Title = "Customer Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="dvWizard">
    <div class="panel-body">
        @using (Html.BeginForm("Insert", "Customer", FormMethod.Post, new { @class = "j-forms" }))
        {

            <div class="widget-wrap">
                @Html.AntiModelInjectionFor(m => m.CustomerId)
             @Html.HiddenFor(m => m.CustomerId, new { @id = "hdnCustomerId" })

                <div class="tab-pane">
                    <div class="row">
                        <div class="col-12">

                            <div class="col-sm-3" id="dvCustomerType">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.CustomerTypeId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerTypeId, new SelectList(ViewBag.CustomerTypeList, "Value", "Name"), "Select Customer Type", new { @class = "form-control", @id = "ddlCustomerType" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerTypeId)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GroupCode, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.GroupCode, new SelectList(ViewBag.GroupList, "Value", "Name"), "Select GroupCode", new { @class = "form-control", @id = "ddlGroupCode" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.GroupCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CustomerName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.Password, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.Password, new { @class = "form-control", @type = "password" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.Password)
                                </div>
                            </div>
                            <div class="col-sm-3" id="dvGstTinNo">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.GstTinNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.GstTinNo, new { @class = "form-control", @id = "txtGstTinNo" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.GstTinNo)
                                    <button type="button" id="btnFetchData" class="btn btn-primary">Autofill</button>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.IndustryId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerDetail.IndustryId, new SelectList(ViewBag.IndustryList, "Value", "Name"), "Select Industry", new { @class = "form-control", @id = "ddlIndustry" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.IndustryId)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.PanNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.PanNo, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.PanNo)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.MobileNo, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.MobileNo, new { @class = "form-control", @id = "txtMobileNo" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.MobileNo)
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerDetail.EmailId, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerDetail.EmailId, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerDetail.EmailId)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row col-12">


                        <div class="col-sm-3" id="dvCustomerPhoneNo">
                            <div class="form-group">
                                @Html.LabelFor(model => model.PhoneNo, new { @class = "label" })
                                <div class="input-wrapper">
                                    @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control", @id = "txtPhoneNo" })
                                </div>
                                @Html.ValidationMessageFor(model => model.PhoneNo)
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.TypeOfOwnershipId, new { @class = "label" })
                                <div class="select">
                                    @Html.DropDownListFor(model => model.MasterCustomerDetail.TypeOfOwnershipId, new SelectList(ViewBag.OwnerShipList, "Value", "Name"), "Select OwnerShip", new { @class = "form-control", @id = "ddlOwnership" })
                                    <i></i>
                                </div>
                                @Html.ValidationMessageFor(model => model.MasterCustomerDetail.TypeOfOwnershipId)
                            </div>
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.MasterCustomerDetail.CustomerLocation, new { @class = "label" })
                            @Html.HiddenFor(model => model.MasterCustomerDetail.CustomerLocation, new { @id = "hdnCustomerLocation" })
                            @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerLocation, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2-multiple", @multiple = "", @id = "ddlCustomerLocation", @placeholder = "Select Location" })
                            @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerLocation)
                        </div>

                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new { @class = "label" })
                            @Html.HiddenFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new { @id = "hdnCustomerDeliveryLocation" })
                            @Html.DropDownListFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2-multiple", @multiple = "", @id = "ddlCustomerDeliveryLocation", @placeholder = "Select Location" })
                            @Html.ValidationMessageFor(model => model.MasterCustomerDetail.CustomerDeliveryLocation)
                        </div>

                    </div>


                    <div class="row col-12">
                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsTruckForwardNote, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsTruckForwardNote)
                                    <i></i>
                                </label>
                            </div>
                        </div>


                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsMilkrunHrsPerDayEnabled, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsMilkrunHrsPerDayEnabled)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MasterCustomerDetail.IsLaneID, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.MasterCustomerDetail.IsLaneID)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.IsActive, new { @class = "label" })
                                <label class="checkbox">
                                    @Html.CheckBoxFor(model => model.IsActive)
                                    <i></i>
                                </label>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="unit">
                                <div class="inline-group">
                                    @Html.LabelFor(model => model.PayBas, new { @class = "label-bold" })
                                    @for (var i = 0; i < Model.PayBas.Count(); i++)
                                    {
                                        <label class="checkbox">
                                            @Html.CheckBoxFor(m => m.PayBas[i].IsActive, new { @id = "chkPayBas" + i.ToString() })
                                            <i></i>
                                            @Html.LabelFor(m => m.PayBas[i].IsActive, Model.PayBas[i].CodeDescription, new { @class = "label", @For = "chkPayBas" + i.ToString() })
                                        </label>
                                        @Html.HiddenFor(m => m.PayBas[i].CodeTypeId)
                                        @Html.HiddenFor(m => m.PayBas[i].CodeId)
                                        @Html.HiddenFor(m => m.PayBas[i].CodeDescription)
                                    }
                                    @Html.ValidationMessageFor(model => model.PayBas)
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="btn-block">
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('primaryAddressForm')">Primary Address</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('secondaryAddressForm')">Secondary Address</button>
                    @*<button class="btn btn-primary" type="button" onclick="showAddressForm('secondaryAddressMapping')">Secondary Address(Mapping)</button>*@
                    @*<button class="btn btn-primary" type="button" onclick="showAddressForm('GstMapping')">Gst(Mapping)</button>*@
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('ContactPerson')">ContactPerson</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('PaymentTerms')">PaymentTerms</button>
                    <button class="btn btn-primary" type="button" onclick="showAddressForm('BusinessPartnerBank')">Business Partner Bank</button>

                </div>

                <div id="primaryAddressForm" class="address-form">
                    <div class="tab-pane">
                        <div class="page-separator">Address (Primary)</div>

                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Address1, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Address1, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Address1)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Address2, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Address2, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Address2)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.CountryId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.CountryId, new SelectList(ViewBag.CountryList, "Value", "Name"), "Select Country", new { @class = "form-control", @id = "ddlCountry" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.CountryId)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.StateId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.StateId, new SelectList(ViewBag.StateList, "Value", "Name"), "Select State", new { @class = "form-control", @id = "ddlState" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.StateId)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.CityId, new { @class = "label" })
                                    <div class="select">
                                        @Html.DropDownListFor(model => model.MasterCustomerAddressInfo.CityId, new SelectList(ViewBag.CityList, "Value", "Name"), "Select City", new { @class = "form-control", @id = "ddlCity" })
                                        <i></i>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.CityId)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterCustomerAddressInfo.Pincode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.MasterCustomerAddressInfo.Pincode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MasterCustomerAddressInfo.Pincode)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!---GST Mapping Here-->
                <div id="ContactPerson" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">ContactPerson</div>
                        <div class="tab-pane">
                            <div class="page-separator">Decision Maker</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.DecisionMakerEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.DecisionMakerEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.DecisionMakerEmailId)
                                    </div>
                                </div>
                            </div>

                            <div class="page-separator">Sales Person(For Booking Deal)</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonBookingDealEmailId)
                                    </div>
                                </div>
                            </div>

                            <div class="page-separator">Sales Person(For Closing Deal)</div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealName)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealDesignation)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealMobileNo)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId, new { @class = "label" })
                                        <div class="input-wrapper">
                                            @Html.TextBoxFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId, new { @class = "form-control" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MasterCustomerDetail.SalesPersonClosingDealEmailId)
                                    </div>
                                </div>
                            </div>

                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="PaymentTerms" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Payment Terms</div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.PaymentTerms, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.PaymentTerms, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.PaymentTerms)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.InterestOnArrearsPercentage, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.InterestOnArrearsPercentage, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.InterestOnArrearsPercentage)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.PriceList, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.PriceList, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.PriceList)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.TotalDiscountPercentage, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.TotalDiscountPercentage, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.TotalDiscountPercentage)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.CommitmentLimit, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.CommitmentLimit, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.CommitmentLimit)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.EffectiveDiscountsGroups, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.EffectiveDiscountsGroups, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.EffectiveDiscountsGroups)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.DunningTerm, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.DunningTerm, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.DunningTerm)
                                </div>
                            </div>
                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="BusinessPartnerBank" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Business Partner Bank</div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.BankCountryRegion, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.BankCountryRegion, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.BankCountryRegion)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.BankName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.BankName, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.BankName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.BankCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.BankCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.BankCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.Account, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.Account, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.Account)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.BICSWIFTCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.BICSWIFTCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.BICSWIFTCode)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.BankAccountName, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.BankAccountName, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.BankAccountName)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.Branch, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.Branch, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.Branch)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.CtrlIntID, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.CtrlIntID, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.CtrlIntID)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.MandateID, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.MandateID, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.MandateID)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.DateOfSignature, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.DateOfSignature, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.DateOfSignature)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BusinessPartnerDetails.AddressCode, new { @class = "label" })
                                    <div class="input-wrapper">
                                        @Html.TextBoxFor(model => model.BusinessPartnerDetails.AddressCode, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BusinessPartnerDetails.AddressCode)
                                </div>
                            </div>
                        </div>
                        <!-- Similar structure to Primary Address form -->
                    </div>
                </div>
                <div id="secondaryAddressForm" class="address-form" style="display:none;">
                    <div class="tab-pane">
                        <div class="page-separator">Address (Secondary)</div>
                        <div id="addressRowsContainer">
                            <!-- Iterate over each item in the MasterAddressList -->
                            @for (int i = 0; i < Model.MasterAddressList.Count; i++)
                            {
                                <div class="row address-row">
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].AddressCode, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].AddressCode
                                       , new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].AddressCode" + i.ToString(), @Name = "MasterAddressList[" + i + "].AddressCode" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].Address1, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].Address1, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].Address1" + i.ToString(), @Name = "MasterAddressList[" + i + "].Address1" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].Address2, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].Address2, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].Address2" + i.ToString(), @Name = "MasterAddressList[" + i + "].Address2" })
                                        </div>
                                    </div>
                                    @*<div class="col-sm-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MasterAddressList[i].CityName, new { @class = "label" })

                                    @Html.HiddenFor(model => model.MasterAddressList[i].CityId, new { @id = "hdnMasterAddressList[" + i + "].CityId" + i.ToString(), @Name = "MasterAddressList[" + i + "].CityId" })
                                    @Html.TextBoxFor(model => model.MasterAddressList[i].CityName, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].CityName" + i.ToString(), @Name = "MasterAddressList[" + i + "].CityName" })
                                </div>
                            </div>*@
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].StateName, new { @class = "label" })
                                            <div class="select">
                                                @Html.DropDownListFor(model => model.MasterAddressList[i].StateId, new SelectList(ViewBag.StateList, "Value", "Name"), "Select State", new { @class = "form-control", @id = "ddlMasterAddressList[" + i + "].State", @onchange = "OnChangeStateWiseCity(this)" })
                                                <i></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MasterAddressList[i].StateId)

                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].CityId, new { @class = "label" })
                                            <div class="select">
                                                @Html.DropDownListFor(model => model.MasterAddressList[i].CityId, new SelectList(ViewBag.CityList, "Value", "Name"), "Select City", new { @class = "form-control", @id = "ddlMasterAddressList[" + i + "].CityId", @Name = "MasterAddressList[" + i + "].CityId" })
                                                <i></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MasterAddressList[i].CityId)
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].Pincode, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].Pincode, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].Pincode" + i.ToString(), @Name = "MasterAddressList[" + i + "].Pincode" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].MobileNo, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].MobileNo, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].MobileNo" + i.ToString(), @Name = "MasterAddressList[" + i + "].MobileNo" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].EmailId, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].EmailId, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].EmailId" + i.ToString(), @Name = "MasterAddressList[" + i + "].EmailId" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].StatisticalChargesCode, new { @class = "label" })

                                            @Html.TextBoxFor(model => model.MasterAddressList[i].StatisticalChargesCode, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].StatisticalChargesCode" + i.ToString(), @Name = "MasterAddressList[" + i + "].StatisticalChargesCode" })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <div class="input-wrapper">
                                                @Html.LabelFor(model => model.MasterAddressList[i].GstTinNo, new { @class = "label" })

                                                @Html.TextBoxFor(model => model.MasterAddressList[i].GstTinNo, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].GstTinNo" })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MasterAddressList[i].GstTinNo)
                                        </div>
                                    </div>

                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].ProvisionalId, new { @class = "label" })
                                            <div class="input-wrapper">
                                                @Html.TextBoxFor(model => model.MasterAddressList[i].ProvisionalId, new { @class = "form-control", @id = "txtMasterAddressList[" + i + "].ProvisionalId" })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MasterAddressList[i].ProvisionalId)
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].RegistrationType, new { @class = "label" })
                                            <div class="select">
                                                @Html.DropDownListFor(model => model.MasterAddressList[i].RegistrationType, new SelectList(ViewBag.RegistrationTypeList, "Value", "Name"), "Select Registration Type", new { @class = "form-control", @id = "ddltxtMasterAddressList[" + i + "].RegistrationType" })
                                                <i></i>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MasterAddressList[i].RegistrationType)
                                        </div>
                                    </div>
                                    @*<div class="col-sm-2">
                                <div class="form-group">
                                    @Html.Label("GstType", new { @class = "label" })
                                    <div class="clearfix">
                                        @Html.Label(" ", new { @id = "lbltxtMasterAddressList[" + i + "].GstType", @class = "label-bold" })
                                    </div>
                                </div>
                            </div>*@
                                    <div class="col-sm-1">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].IsActive, new { @class = "label" })
                                            <label class="checkbox">
                                                @Html.CheckBoxFor(model => model.MasterAddressList[i].IsActive, new { @id = "txtMasterAddressList[" + i + "].IsActive", @Name = "MasterAddressList[" + i + "].IsActive" })
                                                <i></i>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-sm-1">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MasterAddressList[i].IsMreNoApplicable, new { @class = "label" })
                                            <label class="checkbox">
                                                @Html.CheckBoxFor(model => model.MasterAddressList[i].IsMreNoApplicable, new { @id = "txtMasterAddressList[" + i + "].IsMreNoApplicable", @Name = "MasterAddressList[" + i + "].IsMreNoApplicable" })
                                                <i></i>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        @if (i == 0)
                                        {
                                            <button class="btn btn-primary btnAddRow" type="button" style="margin-top:2px;"><i class="fa fa-plus"></i> Add Row</button>
                                        }
                                        else
                                        { // Display Remove Row button for other rows
                                            <button class="btn btn-danger btnRemoveRow" type="button"><i class="fa fa-minus"></i> Remove</button>
                                        }
                                    </div>

                                </div>
                                <div class="page-separator"></div>

                            }
                        </div>

                    </div>
                </div>

                <div class="display text-right">
                    <button class="btn btn-success  " type="submit"><i class="fa fa-save fa-adjust"></i>Save</button>
                    <button class="btn btn-warning  " type="reset"><i class="fa fa-refresh fa-adjust"></i>Reset</button>

                </div>
            </div>

        }
    </div>

</div>

<script>
    var ruleMasterUrl, ddlState = $("#ddlState");
    $(document).ready(function () {
        $('#ddlCountry').change(function () {
            OnCountryChange();
            return false;

        });
        $(document).on('click', '.btnAddRow', function () {
            var index = $('.address-row').length; // Get current number of rows
            var newRow = $('.address-row').first().clone(); // Clone the first row
            // Clear input values in the cloned row
            newRow.find('input').val('');

            // Update IDs and Names with the new index
            newRow.find('[id]').each(function () {
                var newId = this.id.replace(/[0-9]+/, index);
                $(this).attr('id', newId);
            });

            newRow.find('[name]').each(function () {
                var newName = this.name.replace(/[0-9]+/, index);
                $(this).attr('name', newName);
            });

            // Update button types and add remove button
            newRow.find('.btnAddRow').remove(); // Remove add button

            var removeButton = $('<button type="button" class="btn btn-danger btnRemoveRow"><i class="fa fa-minus"></i> Remove</button>');
            newRow.find('.col-sm-2:last-child').append(removeButton); // Append remove button to last column

            // Append the cloned row to the container
            $('#addressRowsContainer').append(newRow);
            $('#addressRowsContainer').append("<div class='page-separator'></div>");
        });

        // Remove Row button click event
        $(document).on('click', '.btnRemoveRow', function () {
            //$(this).closest('.address-row').remove(); // Remove the row
            var rowToRemove = $(this).closest('.address-row');
            var separatorToRemove = rowToRemove.next('.page-separator');

            // Remove the row
            rowToRemove.remove();

            // Remove the separator if it exists
            if (separatorToRemove.length > 0) {
                separatorToRemove.remove();
            }
        });
        SetPageLoad('Customer', 'Create', 'ddlGroupCode', 'Go To List', '@Url.Action("Index")');
        ruleMasterUrl = '@Url.Action("", "Rules", new { Area = "Master" })';
         baseUrl = '@Url.Action("", "Gst", new { Area = "Master" })';
        ddlCustomerLocation = $('#ddlCustomerLocation');
        ddlCustomerDeliveryLocation = $('#ddlCustomerDeliveryLocation');
        // *****************Add Buttion Functaionality **************
        $('#btnAddRow').click(function () {
            var newRow = $('.address-row:first').clone();
            newRow.find('input').val('');
            newRow.find('.btn-remove').remove(); // Ensure the cloned row doesn't have remove button initially
            newRow.append('<button class="btn btn-dark btn-remove" type="button"><i class="fa fa-minus"></i></button>');
            $('#addressTableBody').append(newRow);
        });

        $(document).on('click', '.btn-remove', function () {
            $(this).closest('tr').remove();
        });

        //InitWizard('dvWizard', [
        //    { StepName: 'Basic Details', StepFunction: ValidateOnStep1 },
        //    { StepName: 'Deal Person Details' },
        //    { StepName: 'Billing Address Details' }
        //], 'Add Customer');
     //   InitWizard('dvWizard','Add Customer');

        AttachEvents();
        //$('#ddlCountry').val(1).change();
        $('#ddlCustomerType').change(OnCustomerTypeChange);
        //$("#ddlRegistrationType").change(RegistrationTypeChange);
        //RegistrationTypeChange();

        var requestData = { moduleId: 15, ruleId: 11 };
        AjaxRequestWithPostAndJson(ruleMasterUrl + '/GetModuleRuleByIdAndRuleId', JSON.stringify(requestData), function (result) {
            var useCustomerType = true;
            useCustomerType = result == "Y" ? true : false;
            $('#dvCustomerType').showHide(result == "Y" ? true : false);
            if (!useCustomerType)
                $('#ddlCustomerType').val(1);
        }, ErrorFunction, false);

        var allowPhoneNoMandatoryForCustomer = false;
        var request = { moduleId: 15, ruleId: 12 };
        AjaxRequestWithPostAndJson(ruleMasterUrl + '/GetModuleRuleByIdAndRuleId', JSON.stringify(request), function (result) {
            allowPhoneNoMandatoryForCustomer = (result == "Y" ? true : false);
            if (!allowPhoneNoMandatoryForCustomer) {
                RemoveRequired(txtPhoneNo);
            }
            else {
                AddRequired(txtPhoneNo, 'Please enter Phone No. ');
            }
        }, ErrorFunction, false);

        InitGrid('AddMultiAddress', false, 2, Init);

        OnCustomerTypeChange();
        InitObjects();
    });

    function AttachEvents() {
        $('#ddlState').change(OnStateChange);
       $('[id*="chkPayBas"]').prop("checked", false);
        InitMultiSelect(ddlCustomerLocation.Id, true, false, true);
        DropDownChange('ddlCustomerLocation', function () {
            $('#hdnCustomerLocation').val($(this).val());
        });

        InitMultiSelect(ddlCustomerDeliveryLocation.Id, true, false, true);

        DropDownChange('ddlCustomerDeliveryLocation', function () {
            $('#hdnCustomerDeliveryLocation').val($(this).val());
        });

        $('#txtMobileNo').on('input', function () {
            var numericValue = $(this).val().replace(/[^0-9]/g, '');
            $(this).val(numericValue);
        });

        $('#txtPhoneNo').on('input', function () {
            var numericValue = $(this).val().replace(/[^0-9]/g, '');
            $(this).val(numericValue);
        });


        ddlState.change(function () {
            txtCityName.val('');
            hdnCityId.val('');
            if (ddlState.val() != '') {
                var requestData = { GstId: 0, StateId: ddlState.val() };
                AjaxRequestWithPostAndJson(baseUrl + '/ValidateGSTState', JSON.stringify(requestData), function (result) {
                    if (!result.IsSuccessfull) {
                        ShowMessage(result.ErrorMessage);
                        ddlState.val('');
                        hdnStateId.val('');
                        lblGstType.text('');
                        ddlState.focus();
                        isStepValid = false;
                        return false;
                    }

                }, ErrorFunction, false);
            }

            /* var result = IsStateNameExist(ddlState);*/
            GetGstTypeByStateId(ddlState, lblGstType);
            debugger;
            /* return result;*/
            AutoComplete('txtCityName', cityMasterUrl + '/GetAutoCompleteCityNameListByStateId', 'cityName', 'l', 'l', 'l', 'd', '', 'hdnCityId', '', '', true, function () {
                return [{ Key: 'stateId', Value: ddlState.val() }];
            });
            txtCityName.blur(function () { return IsCityNameExist(txtCityName, hdnCityId); });
            $("#ddlRegistrationType").change(RegistrationTypeChange);
            RegistrationTypeChange();
        });

    }

    function OnCustomerTypeChange() {
        $('#dvGstTinNo').showHide($('#ddlCustomerType').val() == 1);
        if ($('#ddlCustomerType').val() == 1)
            AddRequired($('#txtGstTinNo'), 'Please Enter Gst No');
        else
            RemoveRequired($('#txtGstTinNo'));
    }
    function showAddressForm(formId) {
        debugger;
            document.getElementById('primaryAddressForm').style.display = 'none';
            document.getElementById('secondaryAddressForm').style.display = 'none';
            //document.getElementById('GstMapping').style.display = 'none';
            document.getElementById('ContactPerson').style.display = 'none';
            document.getElementById('PaymentTerms').style.display = 'none';
            document.getElementById('BusinessPartnerBank').style.display = 'none';
            //document.getElementById('secondaryAddressMapping').style.display = 'none';

            document.getElementById(formId).style.display = 'block';
        }
    function ValidateOnStep1() {
        if (!ValidateMultiCheckBox('chkPayBas', 'PayBas')) {
            isStepValid = false;
            return false;
        }
        else {
            isStepValid = true;
        }
        return true;
    }

    function ValidateMultiCheckBox(partialId, entityName) {
        var selected = false, firstCheckBox = null;
        $('[id*="' + partialId + '"]').each(function () {
            if (firstCheckBox == null)
                firstCheckBox = $(this);
            if ($(this).is(':checked'))
                selected = true;
        });
        if (!selected) {
            ShowMessage("Please select at-least one " + entityName);
            firstCheckBox.focus();
            return false;
        }
        return true;
    }
    function OnCountryChange() {
        if ($('#ddlCountry').val() != "") {
            var requestData = { countryId: $('#ddlCountry').val() };
            AjaxRequestWithPostAndJson('@Url.Action("GetStateListByCountryId", "State")', JSON.stringify(requestData), GetStateListSuccess, ErrorFunction, false);
        }
        else
            GetStateListSuccess([]);
    }

    function GetStateListSuccess(responseData) {
        BindDropDownList('ddlState', responseData, 'Value', 'Name', '', 'Select State');
    }

    function OnStateChange() {
        if ($('#ddlState').val() != "") {
            var requestData = { stateId: $('#ddlState').val() };
            AjaxRequestWithPostAndJson('@Url.Action("GetCityListByStateId", "City")', JSON.stringify(requestData), GetCityListSuccess, ErrorFunction, false);
        }
        else
            GetCityListSuccess([]);
    }

    function GetCityListSuccess(responseData) {
        BindDropDownList('ddlCity', responseData, 'Value', 'Name', '', 'Select City');
    }
    //**********************************-------------Customer Master Data push to  Sap Api through this method-----------------------************************/
    $(document).ready(function () {
        $('#btnFetchData').click(function () {
            debugger;
        $.ajax({
            url: '@Url.Action("FetchCustomerDetailsFromApi", "Customer")',
            method: 'POST',
            success: function (data) {
                // Process and populate table with fetched data
                data.forEach(function (customer) {
                    var newRow = $('.address-row:first').clone();
                    // Populate the cloned row with customer data
                    newRow.find('input[name="AddressCode[]"]').val(customer.AddressCode);
                    newRow.find('input[name="Address1[]"]').val(customer.Address1);
                    newRow.find('input[name="Address2[]"]').val(customer.Address2);
                    newRow.find('input[name="CityId[]"]').val(customer.CityId);
                    newRow.find('input[name="CityName[]"]').val(customer.CityName);
                    newRow.find('input[name="Pincode[]"]').val(customer.Pincode);
                    newRow.find('input[name="MobileNo[]"]').val(customer.MobileNo);
                    newRow.find('input[name="EmailId[]"]').val(customer.EmailId);
                    newRow.find('input[name="StatisticalChargesCode[]"]').val(customer.StatisticalChargesCode);
                    newRow.find('input[name="IsActive[]"]').prop('checked', customer.IsActive);
                    newRow.find('input[name="IsMreNoApplicable[]"]').prop('checked', customer.IsMreNoApplicable);

                    // Add other fields based on the provided models
                    newRow.find('input[name="SystemCode[]"]').val(customer.SystemCode);
                    newRow.find('input[name="GroupCode[]"]').val(customer.GroupCode);
                    newRow.find('input[name="GroupName[]"]').val(customer.GroupName);
                    newRow.find('input[name="CustomerCode[]"]').val(customer.CustomerCode);
                    newRow.find('input[name="CustomerName[]"]').val(customer.CustomerName);
                    newRow.find('input[name="CustomerLocation[]"]').val(customer.CustomerLocation);
                    newRow.find('input[name="CustomerDeliveryLocation[]"]').val(customer.CustomerDeliveryLocation);
                    newRow.find('input[name="PayBasId[]"]').val(customer.PayBasId);
                    newRow.find('input[name="PayBasName[]"]').val(customer.PayBasName);
                    newRow.find('input[name="SavedCustomerLocation[]"]').val(customer.SavedCustomerLocation);
                    newRow.find('input[name="SavedCustomerDeliveryLocation[]"]').val(customer.SavedCustomerDeliveryLocation);
                    newRow.find('input[name="IsMilkrunHrsPerDayEnabled[]"]').prop('checked', customer.IsMilkrunHrsPerDayEnabled);
                    newRow.find('input[name="PhoneNo[]"]').val(customer.PhoneNo);
                    newRow.find('input[name="TotalCustomers[]"]').val(customer.TotalCustomers);
                    newRow.find('input[name="FilterCustomers[]"]').val(customer.FilterCustomers);

                    // BusinessPartnerDetails fields
                    newRow.find('input[name="PaymentTerms[]"]').val(customer.BusinessPartnerDetails.PaymentTerms);
                    newRow.find('input[name="InterestOnArrearsPercentage[]"]').val(customer.BusinessPartnerDetails.InterestOnArrearsPercentage);
                    newRow.find('input[name="PriceList[]"]').val(customer.BusinessPartnerDetails.PriceList);
                    newRow.find('input[name="TotalDiscountPercentage[]"]').val(customer.BusinessPartnerDetails.TotalDiscountPercentage);
                    newRow.find('input[name="CreditLimit[]"]').val(customer.BusinessPartnerDetails.CreditLimit);
                    newRow.find('input[name="CommitmentLimit[]"]').val(customer.BusinessPartnerDetails.CommitmentLimit);
                    newRow.find('input[name="DunningTerm[]"]').val(customer.BusinessPartnerDetails.DunningTerm);
                    newRow.find('input[name="EffectiveDiscountsGroups[]"]').val(customer.BusinessPartnerDetails.EffectiveDiscountsGroups);
                    newRow.find('input[name="BankCountryRegion[]"]').val(customer.BusinessPartnerDetails.BankCountryRegion);
                    newRow.find('input[name="BankName[]"]').val(customer.BusinessPartnerDetails.BankName);
                    newRow.find('input[name="BankCode[]"]').val(customer.BusinessPartnerDetails.BankCode);
                    newRow.find('input[name="Account[]"]').val(customer.BusinessPartnerDetails.Account);
                    newRow.find('input[name="BICSWIFTCode[]"]').val(customer.BusinessPartnerDetails.BICSWIFTCode);
                    newRow.find('input[name="BankAccountName[]"]').val(customer.BusinessPartnerDetails.BankAccountName);
                    newRow.find('input[name="Branch[]"]').val(customer.BusinessPartnerDetails.Branch);
                    newRow.find('input[name="CtrlIntID[]"]').val(customer.BusinessPartnerDetails.CtrlIntID);
                    newRow.find('input[name="MandateID[]"]').val(customer.BusinessPartnerDetails.MandateID);
                    newRow.find('input[name="DateOfSignature[]"]').val(customer.BusinessPartnerDetails.DateOfSignature);
                    newRow.find('input[name="AddressCode[]"]').val(customer.BusinessPartnerDetails.AddressCode);

                    newRow.append('<button class="btn btn-dark btn-remove" type="button"><i class="fa fa-minus"></i></button>');
                    $('#addressTableBody').append(newRow);
                    debugger;
                });

                // Add click event for dynamically added remove buttons
                $('.btn-remove').click(function () {
                    $(this).closest('.address-row').remove();
                });
            },
            error: function (xhr, status, error) {
                console.error("Error fetching data: ", status, error);
                alert("An error occurred while fetching the data. Please try again.");
            }
        });
    });

    $('#btnSubmitData').click(function () {
        var customerData = [];

        $('#addressTableBody .address-row').each(function () {
            debugger;
            var customer = {
                AddressCode: $(this).find('input[name="AddressCode[]"]').val(),
                Address1: $(this).find('input[name="Address1[]"]').val(),
                Address2: $(this).find('input[name="Address2[]"]').val(),
                CityId: $(this).find('input[name="CityId[]"]').val(),
                CityName: $(this).find('input[name="CityName[]"]').val(),
                Pincode: $(this).find('input[name="Pincode[]"]').val(),
                MobileNo: $(this).find('input[name="MobileNo[]"]').val(),
                EmailId: $(this).find('input[name="EmailId[]"]').val(),
                StatisticalChargesCode: $(this).find('input[name="StatisticalChargesCode[]"]').val(),
                IsActive: $(this).find('input[name="IsActive[]"]').prop('checked'),
                IsMreNoApplicable: $(this).find('input[name="IsMreNoApplicable[]"]').prop('checked'),
                SystemCode: $(this).find('input[name="SystemCode[]"]').val(),
                GroupCode: $(this).find('input[name="GroupCode[]"]').val(),
                GroupName: $(this).find('input[name="GroupName[]"]').val(),
                CustomerCode: $(this).find('input[name="CustomerCode[]"]').val(),
                CustomerName: $(this).find('input[name="CustomerName[]"]').val(),
                CustomerLocation: $(this).find('input[name="CustomerLocation[]"]').val(),
                CustomerDeliveryLocation: $(this).find('input[name="CustomerDeliveryLocation[]"]').val(),
                PayBasId: $(this).find('input[name="PayBasId[]"]').val(),
                PayBasName: $(this).find('input[name="PayBasName[]"]').val(),
                SavedCustomerLocation: $(this).find('input[name="SavedCustomerLocation[]"]').val(),
                SavedCustomerDeliveryLocation: $(this).find('input[name="SavedCustomerDeliveryLocation[]"]').val(),
                IsMilkrunHrsPerDayEnabled: $(this).find('input[name="IsMilkrunHrsPerDayEnabled[]"]').prop('checked'),
                PhoneNo: $(this).find('input[name="PhoneNo[]"]').val(),
                TotalCustomers: $(this).find('input[name="TotalCustomers[]"]').val(),
                FilterCustomers: $(this).find('input[name="FilterCustomers[]"]').val(),
                BusinessPartnerDetails: {
                    PaymentTerms: $(this).find('input[name="PaymentTerms[]"]').val(),
                    InterestOnArrearsPercentage: $(this).find('input[name="InterestOnArrearsPercentage[]"]').val(),
                    PriceList: $(this).find('input[name="PriceList[]"]').val(),
                    TotalDiscountPercentage: $(this).find('input[name="TotalDiscountPercentage[]"]').val(),
                    CreditLimit: $(this).find('input[name="CreditLimit[]"]').val(),
                    CommitmentLimit: $(this).find('input[name="CommitmentLimit[]"]').val(),
                    DunningTerm: $(this).find('input[name="DunningTerm[]"]').val(),
                    EffectiveDiscountsGroups: $(this).find('input[name="EffectiveDiscountsGroups[]"]').val(),
                    BankCountryRegion: $(this).find('input[name="BankCountryRegion[]"]').val(),
                    BankName: $(this).find('input[name="BankName[]"]').val(),
                    BankCode: $(this).find('input[name="BankCode[]"]').val(),
                    Account: $(this).find('input[name="Account[]"]').val(),
                    BICSWIFTCode: $(this).find('input[name="BICSWIFTCode[]"]').val(),
                    BankAccountName: $(this).find('input[name="BankAccountName[]"]').val(),
                    Branch: $(this).find('input[name="Branch[]"]').val(),
                    CtrlIntID: $(this).find('input[name="CtrlIntID[]"]').val(),
                    MandateID: $(this).find('input[name="MandateID[]"]').val(),
                    DateOfSignature: $(this).find('input[name="DateOfSignature[]"]').val(),
                    AddressCode: $(this).find('input[name="AddressCode[]"]').val()
                }
            };

            customerData.push(customer);
        });
        debugger;
        $.ajax({
            url: '@Url.Action("PostBPMasterDataWithApi", "Customer")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(customerData),
            success: function (response) {
                debugger
                console.log("Data submitted successfully", response);
                alert("Data submitted successfully!");
            },
            error: function (xhr, status, error) {
                console.error("Error submitting data: ", status, error);
                alert("An error occurred while submitting the data. Please try again.");
            }
        });
    });
});
    @*
        $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("PostBPMasterDataWithApi", "Customer")',
            type: 'POST',
            dataType: 'json', // Specify the expected data type
            success: function (data) {
                parseData = JSON.parse(data);
                console.log(parseData); // Log the response data to console

                var nextLink = parseData['odata.nextLink'];
                console.log(nextLink);


                value = parseData.value;
                $('#dataTable').DataTable({
                    data: value, // Assuming 'value' is the array of objects in your JSON
                    columns: [
                        { data: 'CardCode', title: 'Party Code' },
                        { data: 'CardType', title: 'Type' },
                        { data: 'CardName', title: 'Name' },
                        { data: 'CreateDate', title: 'Create Date' }
                    ]
                });
            },
            error: function (xhr, status, error) {
                console.error('Error:', error); // Log any errors to console
            }
        });

    });
        *@

         function GetGstTypeByStateId(ddlState, lblGstType) {
     if (ddlState.val() != 0 && ddlState.val() != '') {
         var requestData = { stateId: ddlState.val() };
     AjaxRequestWithPostAndJson('@Url.Action("CheckIsStateOrUnionTerritory","State")', JSON.stringify(requestData), function (result) {
         if (result.IsState)
             lblGstType.text('SGST');
         else
             lblGstType.text('UGST');

     }, ErrorFunction, false);
 }
 else
     lblGstType.text('');
    }
    function InitObjects() {
       txtStateName = $('#txtStateName');
       ddlState = $('#ddlState');
       txtCityName = $('#txtCityName'); hdnCityId = $('#hdnCityId'); lblGstType = $('#lblGstType'); hdnGstId = $('#hdnGstId');
       txtAddress = $('#txtAddress'); txtGstTinNo = $('#txtGstTinNo'); txtProvisionalId = $('#txtProvisionalId');
       spnMassage = $('#spnMassage');
       txtPanNo = $('#txtPanNo');
       cityMasterUrl = '@Url.Action("", "City", new { Area = "Master" })';
    }

    // ******************  FETCH UULIP-API *******************

    @*$(document).ready(function () {
        $('#btnFetchData').click(function () {
         
        $.ajax({
            url: '@Url.Action("FetchCustomerDetailsFromApi", "Customer")',
            method: 'POST',
            success: function (data) {
                data.forEach(function (customer) {
                    var newRow = $('.address-row:first').clone();

                    newRow.find('input[name="AddressCode[]"]').val(customer.AddressCode);
                    newRow.find('input[name="Address1[]"]').val(customer.Address1);
                    newRow.find('input[name="Address2[]"]').val(customer.Address2);
                    newRow.find('input[name="CityId[]"]').val(customer.CityId);
                    newRow.find('input[name="CityName[]"]').val(customer.CityName);
                    newRow.find('input[name="Pincode[]"]').val(customer.Pincode);
                    newRow.find('input[name="MobileNo[]"]').val(customer.MobileNo);
                    newRow.find('input[name="EmailId[]"]').val(customer.EmailId);
                    newRow.find('input[name="StatisticalChargesCode[]"]').val(customer.StatisticalChargesCode);
                    newRow.find('input[name="IsActive[]"]').prop('checked', customer.IsActive);
                    newRow.find('input[name="IsMreNoApplicable[]"]').prop('checked', customer.IsMreNoApplicable);

                    // Add other fields based on the provided models
                    newRow.find('input[name="SystemCode[]"]').val(customer.SystemCode);
                    newRow.find('input[name="GroupCode[]"]').val(customer.GroupCode);
                    newRow.find('input[name="GroupName[]"]').val(customer.GroupName);
                    newRow.find('input[name="CustomerCode[]"]').val(customer.CustomerCode);
                    newRow.find('input[name="CustomerName[]"]').val(customer.CustomerName);
                    newRow.find('input[name="CustomerLocation[]"]').val(customer.CustomerLocation);
                    newRow.find('input[name="CustomerDeliveryLocation[]"]').val(customer.CustomerDeliveryLocation);
                    newRow.find('input[name="PayBasId[]"]').val(customer.PayBasId);
                    newRow.find('input[name="PayBasName[]"]').val(customer.PayBasName);
                    newRow.find('input[name="SavedCustomerLocation[]"]').val(customer.SavedCustomerLocation);
                    newRow.find('input[name="SavedCustomerDeliveryLocation[]"]').val(customer.SavedCustomerDeliveryLocation);
                    newRow.find('input[name="IsMilkrunHrsPerDayEnabled[]"]').prop('checked', customer.IsMilkrunHrsPerDayEnabled);
                    newRow.find('input[name="PhoneNo[]"]').val(customer.PhoneNo);
                    newRow.find('input[name="TotalCustomers[]"]').val(customer.TotalCustomers);
                    newRow.find('input[name="FilterCustomers[]"]').val(customer.FilterCustomers);

                    // BusinessPartnerDetails fields
                    newRow.find('input[name="PaymentTerms[]"]').val(customer.BusinessPartnerDetails.PaymentTerms);
                    newRow.find('input[name="InterestOnArrearsPercentage[]"]').val(customer.BusinessPartnerDetails.InterestOnArrearsPercentage);
                    newRow.find('input[name="PriceList[]"]').val(customer.BusinessPartnerDetails.PriceList);
                    newRow.find('input[name="TotalDiscountPercentage[]"]').val(customer.BusinessPartnerDetails.TotalDiscountPercentage);
                    newRow.find('input[name="CreditLimit[]"]').val(customer.BusinessPartnerDetails.CreditLimit);
                    newRow.find('input[name="CommitmentLimit[]"]').val(customer.BusinessPartnerDetails.CommitmentLimit);
                    newRow.find('input[name="DunningTerm[]"]').val(customer.BusinessPartnerDetails.DunningTerm);
                    newRow.find('input[name="EffectiveDiscountsGroups[]"]').val(customer.BusinessPartnerDetails.EffectiveDiscountsGroups);
                    newRow.find('input[name="BankCountryRegion[]"]').val(customer.BusinessPartnerDetails.BankCountryRegion);
                    newRow.find('input[name="BankName[]"]').val(customer.BusinessPartnerDetails.BankName);
                    newRow.find('input[name="BankCode[]"]').val(customer.BusinessPartnerDetails.BankCode);
                    newRow.find('input[name="Account[]"]').val(customer.BusinessPartnerDetails.Account);
                    newRow.find('input[name="BICSWIFTCode[]"]').val(customer.BusinessPartnerDetails.BICSWIFTCode);
                    newRow.find('input[name="BankAccountName[]"]').val(customer.BusinessPartnerDetails.BankAccountName);
                    newRow.find('input[name="Branch[]"]').val(customer.BusinessPartnerDetails.Branch);
                    newRow.find('input[name="CtrlIntID[]"]').val(customer.BusinessPartnerDetails.CtrlIntID);
                    newRow.find('input[name="MandateID[]"]').val(customer.BusinessPartnerDetails.MandateID);
                    newRow.find('input[name="DateOfSignature[]"]').val(customer.BusinessPartnerDetails.DateOfSignature);
                    newRow.find('input[name="AddressCode[]"]').val(customer.BusinessPartnerDetails.AddressCode);

                    newRow.append('<button class="btn btn-dark btn-remove" type="button"><i class="fa fa-minus"></i></button>');
                    $('#addressTableBody').append(newRow);
                });

                // Add click event for dynamically added remove buttons
                $('.btn-remove').click(function () {
                    $(this).closest('.address-row').remove();
                });
            },
            error: function (xhr, status, error) {
                console.error("Error fetching data: ", status, error);
                alert("An error occurred while fetching the data. Please try again.");
            }
        });
    });
});
        *@

    @*
        $('#btnFetchData').click(function () {
        $.ajax({
             url: '@Url.Action("FetchCustomerDetailsFromApi", "Customer")',
            method: 'POST',
            success: function (data) {
                data.forEach(function (address) {
                    var newRow = $('.address-row:first').clone();
                    newRow.find('input[name="AddressCode[]"]').val(address.AddressCode);
                    newRow.find('input[name="Address1[]"]').val(address.Address1);
                    newRow.find('input[name="Address2[]"]').val(address.Address2);
                    newRow.find('input[name="CityId[]"]').val(address.CityId);
                    newRow.find('input[name="CityName[]"]').val(address.CityName);
                    newRow.find('input[name="Pincode[]"]').val(address.Pincode);
                    newRow.find('input[name="MobileNo[]"]').val(address.MobileNo);
                    newRow.find('input[name="EmailId[]"]').val(address.EmailId);
                    newRow.find('input[name="StatisticalChargesCode[]"]').val(address.StatisticalChargesCode);
                    newRow.find('input[name="IsActive[]"]').prop('checked', address.IsActive);
                    newRow.find('input[name="IsMreNoApplicable[]"]').prop('checked', address.IsMreNoApplicable);
                    newRow.append('<button class="btn btn-dark btn-remove" type="button"><i class="fa fa-minus"></i></button>');
                    $('#addressTableBody').append(newRow);
                });
            }
        });
    });*@
    //************************************ ULIP API END LINE ****************************************** */
     function RegistrationTypeChange() {
            $("#dvgsttinno").showHide($("#ddlRegistrationType").val() != 2)
            if ($("#ddlRegistrationType").val() != 2) {
                if (hdnOwnerType.val() == 3) {
                    var requestData = { CustomerId: hdnOwnerId.val() };
                    AjaxRequestWithPostAndJson('@Url.Action("GetById", "Customer")', JSON.stringify(requestData), function (result) {
                        if (result.MasterCustomerDetail.IsTruckForwardNote) {
                            RemoveRequired(txtGstTinNo);
                            AddRequired($('#txtPanNo'), 'Please PAN No');
                        }
                    }, ErrorFunction, false);
                }
                else
                    AddRequired($('#txtGstTinNo'), 'Please Enter Gst No');
            } else {
                RemoveRequired($('#txtGstTinNo'));
            }

    }

    function OnChangeStateWiseCity(selectElement) {
        var stateId = $(selectElement).val(); // Get selected state ID
        var index = $(selectElement).attr('id').match(/\[(.*?)\]/)[1]; // Extract index from ID
        console.log("Selected State ID:", stateId);
        console.log("Index:", index);

        // AJAX request to fetch cities based on selected state ID
        $.ajax({
            url: '@Url.Action("GetCityListByStateId", "City")', // Replace with your actual endpoint
            type: 'POST',
            dataType: 'json',
            data: { stateId: stateId }, // Data to send to the server
            success: function(response) {
                console.log("Received response:", response);

                // Clear existing options and populate new ones
                var cityDropdown = $('#ddlMasterAddressList\\[' + index + '\\]\\.CityId'); // Escape special characters in ID
                console.log("City Dropdown ID:", cityDropdown.attr('id'));
                cityDropdown.empty(); // Clear previous options

                // Populate dropdown with new options
                $.each(response, function(index, city) {
                    console.log("Adding city:", city.Value, city.Name);
                    cityDropdown.append($('<option>', {
                        value: city.Value,
                        text: city.Name
                    }));
                });
            },
            error: function(xhr, status, error) {
                console.error('Error fetching cities:', error);
                // Handle error scenario
            }
        });
    }

</script>