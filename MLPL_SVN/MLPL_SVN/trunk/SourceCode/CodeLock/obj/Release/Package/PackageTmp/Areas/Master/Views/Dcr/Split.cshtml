@model CodeLock.Models.MasterDcr
@{
    ViewBag.Title = "Split";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm("Split", "DCR", FormMethod.Post, new { @class = "j-forms", @id = "j-forms" }))
{
    @Html.AntiForgeryToken()
    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DocumentTypeName, new { @class = "label" })
                    <div class="clearfix">
                        @Html.LabelFor(model => model.DocumentTypeName, " ", new { @id = "lblDocumentTypeName", @class = "label-bold" })
                        @Html.HiddenFor(model => model.DocumentTypeId, new { @id = "hdnDocumentTypeId" })
                        @Html.HiddenFor(model => model.Id, new { @id = "hdnDocumentId" })
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.BookCode, new { @class = "label" })
                    <div class="clearfix">
                        @Html.LabelFor(model => model.BookCode, new { @id = "lblBookCode", @class = "label-bold" })
                        @Html.HiddenFor(model => model.BookCode, new { @id = "hdnBookCode" })
                        @Html.HiddenFor(model => model.SuffixBase, new { @id = "hdnSuffixBase" })
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.BusinessTypeId, new { @class = "label" })
                    <div class="clearfix">
                        @Html.LabelFor(model => model.BusinessType, new { @id = "lblBusinessType", @class = "label-bold" })
                        @Html.HiddenFor(model => model.BusinessTypeId, new { @id = "hdnBusinessTypeId" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SeriesFrom, new { @class = "label" })
                    @Html.LabelFor(model => model.SeriesFrom, " ", new { @id = "lblSeriesFrom", @class = "label-bold" })
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SeriesTo, new { @class = "label" })
                    @Html.LabelFor(model => model.SeriesTo, " ", new { @id = "lblSeriesTo", @class = "label-bold" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.CompanyId, new SelectList(ViewBag.CompanyList, "Value", "Name"), "Select Company", new { @class = "form-control", @id = "ddlCompany" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => Model.CompanyId)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Label("Split Series From", new { @class = "label" })
                    <div class="input">
                        @Html.HiddenFor(model => model.SeriesTo, new { @id = "hdnSeriesTo" })
                        @Html.HiddenFor(model => model.SeriesFromBase, new { @id = "hdnDCRSeriesFrom" })
                        @Html.HiddenFor(model => model.SeriesToBase, new { @id = "hdnDCRSeriesTo" })
                        @Html.TextBoxFor(model => model.SeriesFrom, null, new { @class = "form-control", @id = "txtSeriesFrom" })
                    </div>
                    @Html.ValidationMessageFor(model => model.SeriesFrom)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Total, new { @class = "label" })
                    <div class="clearfix">
                        @Html.Label("Total", "0", new { @id = "lblTotalLeaf", @class = "label-bold" })
                        @Html.HiddenFor(model => model.Total, new { @id = "hdnTotalLeaf" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LocationId, new { @class = "label" })
                    <div class="input">
                        @Html.HiddenFor(model => model.LocationId, new { @id = "hdnLocationId" })
                        @Html.HiddenFor(model => model.LocationIdOld, new { @id = "hdnLocationIdOld" })
                        @Html.HiddenFor(model => model.LocationCodeOld, new { @id = "hdnLocationCodeOld" })
                        @Html.TextBoxFor(model => model.LocationCode, null, new { @class = "form-control", @id = "txtLocationCode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.LocationCode)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.AllotedCategory, new { @class = "label" })
                    <div class="select">
                        @Html.HiddenFor(model => model.AllotedCategoryOld, new { @id = "hdnAllotedCategoryOld" })
                        @Html.DropDownListFor(model => model.AllotedCategory, new List<SelectListItem> { new SelectListItem() { Text = "User", Value = "U" }, new SelectListItem() { Text = "Business Associate", Value = "B" } }, "Select Alloted Category", new { @class = "form-control", @id = "ddlAllotedCategory" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.AllotedCategory)
                </div>

            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.AllotedTo, new { @class = "label" })
                    <div class="input">
                        @Html.HiddenFor(model => model.AllotedTo, new { @id = "hdnAllotedToId" })
                        @Html.HiddenFor(model => model.AllotedToOld, new { @id = "hdnAllotedToIdOld" })
                        @Html.HiddenFor(model => model.AllotedToNameOld, new { @id = "hdnAllotedToNameOld" })
                        @Html.TextBoxFor(model => model.AllotedToName, null, new { @class = "form-control", @id = "txtAllotedToName" })
                    </div>
                    @Html.ValidationMessageFor(model => model.AllotedToName)
                </div>
            </div>
        </div>
        <div class="form-footer">
            <button type="submit" class="btn btn-success primary-btn" tabindex="3">Create</button>
        </div>
    </div>
}
<script>
    var locationId, ddlCompany;
        $(document).ready(function () {
            SetPageLoad('DCR', 'Split', '');
            hdnDocumentId = $('#hdnDocumentId');
            hdnDocumentTypeId = $('#hdnDocumentTypeId');
            lblDocumentTypeName = $('#lblDocumentTypeName');
            lblBookCode = $('#lblBookCode');
            hdnBookCode = $('#hdnBookCode');
            lblSuffixBase = $('#lblSuffixBase');
            hdnSuffixBase = $('#hdnSuffixBase');
            lblBusinessType = $('#lblBusinessType');
            hdnBusinessTypeId = $('#hdnBusinessTypeId');
            hdnDCRSeriesFrom = $('#hdnDCRSeriesFrom');
            hdnDCRSeriesTo = $('#hdnDCRSeriesTo');
            lblSeriesFrom = $('#lblSeriesFrom');
            lblSeriesTo = $('#lblSeriesTo');
            txtSeriesFrom = $('#txtSeriesFrom');
            hdnSeriesTo = $('#hdnSeriesTo');
            lblTotalLeaf = $('#lblTotalLeaf');
            hdnTotalLeaf = $('#hdnTotalLeaf');
            txtLocationCode = $('#txtLocationCode');
            hdnLocationCodeOld = $('#hdnLocationCodeOld');
            hdnLocationId = $('#hdnLocationId');
            hdnLocationIdOld = $('#hdnLocationIdOld');
            ddlAllotedCategory = $('#ddlAllotedCategory');
            hdnAllotedCategoryOld = $('#hdnAllotedCategoryOld');
            hdnAllotedToId = $('#hdnAllotedToId');
            hdnAllotedToIdOld = $('#hdnAllotedToIdOld');
            txtAllotedToName = $('#txtAllotedToName');
            hdnAllotedToNameOld = $('#hdnAllotedToNameOld');
            btnSubmit = $('#btnSubmit');
            ddlCompany = $('#ddlCompany');

            LocationAutoComplete('txtLocationCode', 'hdnLocationId');
            Init();
            txtLocationCode.blur(function () {
                IsLocationCodeExist(txtLocationCode, hdnLocationId);
                OnAllocatedCategoryChange();
                return false;
            });
            txtLocationCode.change(OnLocationChange);
            txtSeriesFrom.blur(function () { return CheckValidSeriesFrom(); });
            ddlAllotedCategory.change(OnAllocatedCategoryChange);
            btnSubmit.click(OnSubmitClick);
        });

        function Init() {
            hdnDCRSeriesFrom.val('@ViewBag.DCRSeriesFrom');
            var requestData = { DocumentTypeId: hdnDocumentTypeId.val(), SeriesFrom: hdnDCRSeriesFrom.val() };
            AjaxRequestWithPostAndJson('@Url.Action("GetDetailByDocumentTypeIdAndDocumentNumber")', JSON.stringify(requestData), OnGetDCRSuccess, ErrorFunction, false);
        }

        function OnLocationChange() {
            locationId = hdnLocationId.val();
            txtAllotedToName.val('');
            hdnAllotedToId.val('');
        }

        function OnGetDCRSuccess(responseData) {
            hdnDocumentId.val(responseData.Id);
            hdnDCRSeriesTo.val(responseData.SeriesTo);
            hdnSeriesTo.val(responseData.SeriesTo);
            lblSeriesFrom.text(responseData.SeriesFrom);
            lblSeriesTo.text(responseData.SeriesTo);
            lblDocumentTypeName.text(responseData.DocumentTypeName);
            lblBookCode.text(responseData.BookCode + responseData.Suffix);
            hdnBookCode.val(responseData.BookCode);
            lblSuffixBase.text(responseData.Suffix);
            hdnSuffixBase.val(responseData.Suffix);
            hdnBusinessTypeId.val(responseData.BusinessTypeId);
            lblBusinessType.text(responseData.BusinessType);
            txtLocationCode.val(responseData.LocationCode);
            hdnLocationCodeOld.val(responseData.LocationCode);
            hdnLocationId.val(responseData.LocationId);
            hdnLocationIdOld.val(responseData.LocationId);
            ddlAllotedCategory.val(responseData.AllotedCategory);
            hdnAllotedCategoryOld.val(responseData.AllotedCategory);
            //SetDropDownValue(ddlAllotedCategory, responseData.AllotedCategory);
            txtAllotedToName.val(responseData.AllotedToName);
            hdnAllotedToNameOld.val(responseData.AllotedToName);
            hdnAllotedToId.val(responseData.AllotedTo);
            hdnAllotedToIdOld.val(responseData.AllotedTo);
            ddlCompany.val(responseData.CompanyId);
            OnLocationChange();
            OnAllocatedCategoryChange();
        }

        function CheckValidSeriesFrom() {
            if (txtSeriesFrom.val() != '') {
                var requestData = { DCRSeriesFrom: hdnDCRSeriesFrom.val(), DCRSeriesTo: hdnDCRSeriesTo.val(), SeriesFrom: txtSeriesFrom.val() };
                AjaxRequestWithPostAndJson('@Url.Action("CheckValidSeriesFrom")', JSON.stringify(requestData), OnCheckValidSeriesFrom, ErrorFunction, false);
            }
        }

        function OnCheckValidSeriesFrom(isValid) {
            if (isValid) {
                var requestData = { DocumentId: hdnDocumentId.val(), DCRSeriesFrom: $("#lblSeriesFrom").text(), SeriesFrom: txtSeriesFrom.val() };
                AjaxRequestWithPostAndJson('@Url.Action("GetMaxDocumentNumber")', JSON.stringify(requestData), OnGetMaxDocumentSuccess, ErrorFunction, false);
            }
            else {
                ShowMessage('Docuement No <b>\'' + txtSeriesFrom.val() + '</b>\' is not in DCR Series');
                txtSeriesFrom.val('');
                lblTotalLeaf.text('0');
                hdnTotalLeaf.val('0');
                txtSeriesFrom.focus();
                return false;
            }
        }

        function OnGetMaxDocumentSuccess(maxDocumentNo) {
            if (maxDocumentNo != '') {
                ShowMessage('Docuement No <b>\'' + txtSeriesFrom.val() + '</b>\' is already used. Please enter Series From grater than <b>\'' + maxDocumentNo + '</b>\'');
                txtSeriesFrom.val('');
                lblTotalLeaf.text('0');
                hdnTotalLeaf.val('0');
                txtSeriesFrom.focus();
                return false;
            }
            else
                GetTotalLeaf();
        }

        function GetTotalLeaf() {
            var requestData = { SeriesFrom: txtSeriesFrom.val(), DCRSeriesTo: hdnDCRSeriesTo.val() };
            AjaxRequestWithPostAndJson('@Url.Action("GetTotalLeaf")', JSON.stringify(requestData), OnGetTotalLeafSuccess, ErrorFunction, false);
        }

        function OnGetTotalLeafSuccess(totalLeaf) {
            lblTotalLeaf.text(totalLeaf);
            hdnTotalLeaf.val(totalLeaf);
            return false;
        }

        function OnAllocatedCategoryChange() {
        txtAllotedToName.val('');
        hdnAllotedToId.val('');
        locationId = hdnLocationId.val();
        $('#txtAllotedToName').off("blur");
        if ($('#ddlAllotedCategory').val() == 'U') {
            UserAutoCompleteByLocation($('#txtAllotedToName').attr('id'), $('#hdnAllotedToId').attr('id'), 'User Name', hdnLocationId.val());
            RemoveRequired($('#txtAllotedToName'));
            AddRequired($('#txtAllotedToName'), "Please enter Employee Name");
            $('#txtAllotedToName').blur(function () {
                return IsUserNameExist($(this), $('#hdnAllotedToId'));
            });
        }
        else if ($('#ddlAllotedCategory').val() == 'B') {
            VendorAutoComplete($('#txtAllotedToName').attr('id'), $('#hdnAllotedToId').attr('id'), 'Business Associate Name', 4);
            RemoveRequired($('#txtAllotedToName'));
            AddRequired($('#txtAllotedToName'), "Please enter Business Associate Name");
            $('#txtAllotedToName').blur(function () {
                return CheckVendorCodeExist($(this), $('#hdnAllotedToId', 'Business Associate Name', 4));
            });
        }
        else {
            RemoveRequired($('#txtAllotedToName'));
        }
    }

   function CheckVendorCodeExist(txtObj, hdnObj, fieldName, vendorType) {
    if (IsObjectNullOrEmpty(fieldName)) fieldName = 'Vendor';
    if (IsObjectNullOrEmpty(vendorType)) vendorType = '0';
    if (txtObj.val() != "") {
        var requestData = { vendorCode: txtObj.val(), vendorTypeId: vendorType };
        AjaxRequestWithPostAndJson(ReplaceUrl('Vendor', 'IsVendorCodeExist'), JSON.stringify(requestData), function (result) {
            if (IsObjectNullOrEmpty(result)) {
                ShowMessage('Invalid ' + fieldName);
                txtObj.val('').focus();
                hdnObj.val(0);
            }
            else {
                hdnObj.val(result.Value);
                txtObj.val(result.Description);
            }
        }, ErrorFunction, false);
    }
    return false;
}

        function OnSubmitClick() {

        }
</script>
