@using CodeLock.Models
@model BarcodePrint
@using Secure_Coding.MvcSecurityExtensions;
@{
    ViewBag.Title = "PrintersInfo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{

    <style type="text/css">
        .glyphicon-refresh-animate {
            -animation: spin .7s infinite linear;
            -webkit-animation: spin2 .7s infinite linear;
        }

        @@-webkit-keyframes spin2 {
            from {
                -webkit-transform: rotate(0deg);
            }

            to {
                -webkit-transform: rotate(360deg);
            }
        }

        @@keyframes spin {
            from {
                transform: scale(1) rotate(0deg);
            }

            to {
                transform: scale(1) rotate(360deg);
            }
        }
    </style>

    <!-- Required scripts -->
    <script type="text/javascript" src="~/js/dependencies/rsvp-3.1.0.min.js"></script>
    <script type="text/javascript" src="~/js/dependencies/sha-256.min.js"></script>
    <script type="text/javascript" src="~/js/qz-tray.js"></script>

    <!-- Page styling -->
    <script type="text/javascript" src="~/js/additional/jquery-1.11.3.min.js"></script>
    <script type="text/javascript" src="~/js/additional/bootstrap.min.js"></script>
}

@using (Html.BeginForm("Index", "BarcodePrint", FormMethod.Post, new { @class = "j-forms", @id = "j-forms" }))
{
    @Html.AntiForgeryToken()
    @* Store User's SessionId *@
    <input type="hidden" id="sid" name="sid" value="@HttpContext.Current.Session.SessionID" />
    <div class="widget-wrap">
        <div style="display:none">
            <div id="msgInProgress">
                <div id="mySpinner" style="width:32px;height:32px"></div>
                <h3>Detecting WCPP utility at client side...</h3>
                <h3><span class="label label-info"><span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Please wait a few seconds...</span></h3>
                <br />
            </div>
            <div id="msgInstallWCPP" style="display:none;">
                <h3>#1 Install WebClientPrint Processor (WCPP)!</h3>
                <p>
                    <strong>WCPP is a native app (without any dependencies!)</strong> that handles all print jobs
                    generated by the <strong>WebClientPrint for ASP.NET component</strong> at the server side. The WCPP
                    is in charge of the whole printing process and can be
                    installed on <strong>Windows, Linux, Mac & Raspberry Pi!</strong>
                </p>
                <p>
                    <a href="//www.neodynamic.com/downloads/wcpp/" target="_blank" class="btn btn-warning">Download and Install WCPP from Neodynamic website</a><br />
                </p>
                <h3>#2 After installing WCPP...</h3>
                <p>
                    @*<a href="@Url.Action(" Samples", "Home" )" class="btn btn-info">You can go and test the printing page...</a>*@
                    <a href="#" onclick="javascript:return ShowBarcodePrint();" class="nbtn">
                        Click here to Print Bar code
                    </a>
                </p>

            </div>

            <div id="dvPrintersInfo" style="display:none;">
                <div class="row">

                    <div class="col-md-3">
                        <a onclick="javascript:jsWebClientPrint.getPrintersInfo(); $('#spinner').css('visibility', 'visible');" class="btn btn-success">Get Printers Info...</a>
                    </div>
                    <div class="col-md-9">
                        <h3 id="spinner" style="visibility: hidden"><span class="label label-info"><span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span>Please wait a few seconds...</span></h3>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label for="ddlInstalledPrinter">Select Printer</label>
                        <div class="select">
                            <select name="ddlInstalledPrinter" id="ddlInstalledPrinter" onchange="showSelectedPrinterInfo();" class="form-control"></select>
                            <i></i>
                        </div>
                    </div>

                    <div class="col-sm-8">
                        <div class="inline-group">
                            @Html.LabelFor(model => model.PrinterDPIType, new { @class = "label" })
                            <label class="radio" id="lblComputerizedEntry">
                                @Html.RadioButtonFor(model => model.PrinterDPIType, "3Z", new { @id = "rbtnPrinterDpi0", @checked = "checked" })
                                <i></i>
                                @Html.LabelFor(model => model.PrinterDPIType, "Citizen 300 DPI (ZPL)", new { @for = "rbtnPrinterDpi0" })
                            </label>
                            <label class="radio" id="lblManualEntry">
                                @Html.RadioButtonFor(model => model.PrinterDPIType, "2Z", new { @id = "rbtnPrinterDpi1" })
                                <i></i>
                                @Html.LabelFor(model => model.PrinterDPIType, "TSC 200 DPI (ZPL)", new { @for = "rbtnPrinterDpi1" })
                            </label>
                            <label class="radio" id="lblManualEntry">
                                @Html.RadioButtonFor(model => model.PrinterDPIType, "2E_INTERMEC", new { @id = "rbtnPrinterDpi2" })
                                <i></i>
                                @Html.LabelFor(model => model.PrinterDPIType, "Intermec 200 DPI (EPL)", new { @for = "rbtnPrinterDpi2" })
                            </label>
                            @Html.ValidationMessageFor(model => model.PrinterDPIType)

                        </div>
                    </div>
                </div>
                <br />

                <div class="row">
                    <div id="helpDiv" style="background-color: lightskyblue; padding-right: 10px; padding-left: 10px; padding-bottom: 1px; padding-top: 1px; margin: 15px 15px; border: solid black 1px;">
                        <div class="blackfnt">
                            <b>Note:</b>
                            1. Before Printing Bar code it is required to install WebClientPrint Processor (WCPP)
                        </div>
                        <br />
                    </div>
                </div>
            </div>
            <div class="form-footer" id="trSubmit">
                @*<button type="button" class="btn btn-success primary-btn" tabindex="3" id="btnSubmit" onclick="javascirpt: return PrintBarcode();">Print to Selected Printer</button>*@
                @*<a class="btn btn-success btn-lg" onclick="javascript: jsWebClientPrint.print('useDefaultPrinter=false&printerName=' + encodeURIComponent($('#ddlInstalledPrinter').val()) + '&filetype=TXT');">Print File...</a>*@
                <a href="#" onclick="javascript:doClientPrint();" class="btn btn-lg btn-success">Print Barcode</a>
            </div>
        </div>
        <div>
            <div id="qz-alert" style="position: fixed; width: 60%; margin: 5% 4% 0 36%; z-index: 900;"></div>
            <div id="qz-pin" style="position: fixed; width: 30%; margin: 5% 66% 0 4%; z-index: 900;"></div>
            <div class="container" role="main">

                <div class="row spread">
                    <div class="col-md-4">
                        <div id="qz-connection" class="panel panel-default">
                            <div class="panel-heading">
                                <button class="close tip" data-toggle="tooltip" title="Launch QZ" id="launch" href="#" onclick="launchQZ();" style="display: none;">
                                    <i class="fa fa-external-link"></i>
                                </button>
                                <h3 class="panel-title">
                                    Connection: <span id="qz-status" class="text-muted" style="font-weight: bold;">Unknown</span>
                                </h3>
                            </div>

                            <div class="panel-body">
                                <div class="btn-toolbar">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-success" onclick="startConnection();">Connect</button>
                                        <button type="button" class="btn btn-warning" onclick="endConnection();">Disconnect</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="panel panel-primary">
                            <div class="panel-heading">
                            </div>

                            <div class="panel-body">
                                <div class="form-group">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-default btn-sm" onclick="findDefaultPrinter(true);">Find Default Printer</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-content">
                        <div id="rawContent" class="tab-pane active col-md-8">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="btn-group">
                                            @*<button type="button" class="btn btn-default" id="btnid2" onclick="printEPL();">EPL</button>*@
                                            <button type="button" id="btnid1" class="btn btn-default">ZPL(TSC)</button>
                                            <button type="button" id="btnid2" class="btn btn-default">EPL(ZEBRA)</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-default" id="btnEnable">Enable</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    $("#btnEnable").hide();

    var trInstallWcppLbl, trInstallWcpp, trShowLinklbl, trShowLink, trHead, trInstalledPrinter, trPrinterType,
    trSKUNo, trdocketno, txtSKUNo, txtdocketno,trUSNNo,txtUSNNo,
       trSubmit, hdnIsDetectFailure, ddlInstalledPrinter;
    var clientPrinters = null;

    var wcppGetPrintersTimeout_ms = 10000; //10 sec
    var wcppGetPrintersTimeoutStep_ms = 500; //0.5 sec
    $(document).ready(function () {
        SetPageLoad('Barcode Printing', 'Print');
    });
    txtDocketNo = $('#txtDocketNo');
    txtSKUNo = $('#txtSKUNo');
    txtUSNNo = $('#txtUSNNo');

    ddlInstalledPrinter = $('#ddlInstalledPrinter');

    function ShowBarcodePrint() {
        //$('#' + msgInProgress).show();
        $('#msgInProgress').hide();
        $('#msgInstallWCPP').hide();
        $('#dvPrintersInfo').show();
        jsWebClientPrint.getPrintersInfo();
    }
function wcpGetPrintersOnSuccess() {
        $('#spinner').css('visibility', 'hidden');
        if (arguments[0].length > 0) {
            if (JSON) {
                try {
                    clientPrinters = JSON.parse(arguments[0]);
                    if (clientPrinters.error) {
                        alert(clientPrinters.error)
                    } else {
                        var options = '';
                        for (var i = 0; i < clientPrinters.length; i++) {
                            options += '<option>' + clientPrinters[i].name + '</option>';
                        }
                        $('#ddlInstalledPrinter').html(options);
                        $('#ddlInstalledPrinter').focus();

                        showSelectedPrinterInfo();
                    }
                } catch (e) {
                    alert(e.message)
                }
            }


        } else {
            alert("No printers are installed in your system.");
        }
    }

    function wcpGetPrintersOnFailure() {
        $('#spinner').css('visibility', 'hidden');
        // Do something if printers cannot be got from the client
        alert("No printers are installed in your system.");
    }
    function showSelectedPrinterInfo() {
        // get selected printer index
        var idx = $("#ddlInstalledPrinter")[0].selectedIndex;
        // get supported trays
        var options = '';
        for (var i = 0; i < clientPrinters[idx].trays.length; i++) {
            options += '<option>' + clientPrinters[idx].trays[i] + '</option>';
        }
        $('#lstPrinterTrays').html(options);
        // get supported papers
        options = '';
        for (var i = 0; i < clientPrinters[idx].papers.length; i++) {
            options += '<option>' + clientPrinters[idx].papers[i] + '</option>';
        }
        $('#lstPrinterPapers').html(options);
        // additional info...
        $('#txtPortName').val(clientPrinters[idx].portName);
        $('#txtHRes').val(clientPrinters[idx].hRes);
        $('#txtVRes').val(clientPrinters[idx].vRes);
        $('#isConnected').attr('class', (clientPrinters[idx].isConnected ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
        $('#isDefault').attr('class', (clientPrinters[idx].isDefault ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
        $('#isBIDIEnabled').attr('class', (clientPrinters[idx].isBIDIEnabled ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
        $('#isLocal').attr('class', (clientPrinters[idx].isLocal ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
        $('#isNetwork').attr('class', (clientPrinters[idx].isNetwork ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
        $('#isShared').attr('class', (clientPrinters[idx].isShared ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
    }


    function doClientPrint() {
        debugger;
        //var rbtnPrinterDpi0 = document.getElementById('<%=rbtnPrinterDpi.ClientID%>' + '_0');
        //var rbtnPrinterDpi1 = document.getElementById('<%=rbtnPrinterDpi.ClientID%>' + '_1');
        //var rbtnPrinterDpi2 = document.getElementById('<%=rbtnPrinterDpi.ClientID%>' + '_2');
        var InstalledPrinter = $("#ddlInstalledPrinter").val();
        var printerDpi = "";

        if (rbtnPrinterDpi0.checked) //if 300 dpi ZPL Checked
            printerDpi = rbtnPrinterDpi0.value;
        else if (rbtnPrinterDpi1.checked) //if 300 dpi ZPL Checked
            printerDpi = rbtnPrinterDpi1.value;
        else if (rbtnPrinterDpi2.checked) //if 200 dpi EPL INTERMEC Checked
            printerDpi = rbtnPrinterDpi2.value;
        else if (rbtnPrinterDpi3.checked) //if 200 dpi EPL TSC Checked
            printerDpi = rbtnPrinterDpi3.value;
        var sessionId = $("#sid").val();
        //collect printer settings and raw commands
       // var printerSettings = 'sid=' + sessionId + '&pid=2&installedPrinterName=' + InstalledPrinter + '&netPrinterHost=&netPrinterPort=&parallelPort=LPT1&serialPort=COM1&serialPortBauds=9600&serialPortDataBits=8&serialPortParity=None&serialPortStopBits=One&serialPortFlowControl=None&printerCommands=asds&printerDpi=' + printerDpi + '&DocketNo=' + txtDocketNo.val() + "&skuNo=" + txtSKUNo.val() + "&docketno=" + txtdocketno.val()  // $("#j-forms").serialize();
        var printerSettings = 'sid=' + sessionId + '&pid=2&installedPrinterName=' + InstalledPrinter + '&netPrinterHost=&netPrinterPort=&parallelPort=LPT1&serialPort=COM1&serialPortBauds=9600&serialPortDataBits=8&serialPortParity=None&serialPortStopBits=One&serialPortFlowControl=None&printerCommands=asds&printerDpi=' + printerDpi + '&DocketNo=' + txtDocketNo.val() + "&skuNo=" + txtSKUNo.val() + "&usnNo=" + txtUSNNo.val()  // $("#j-forms").serialize();
        //store printer settings in the server cache...
        $.post('@Url.Action("ClientPrinterSettings", "Home")',
            printerSettings
        );

        // Launch WCPP at the client side for printing...

        if (txtDocketNo.val() != "" || txtSKUNo.val() != "" || txtUSNNo.val() != "") {
            if (InstalledPrinter != "") {
                jsWebClientPrint.print('sid=' + sessionId);
            }
            else {
                alert("Please Select Printer from Dropdown");
                ddlInstalledPrinter.focus();
                return false;
            }
        }
        else {
            alert("Please Enter USN No.");
            return false;
        }

        return false;
    }
</script>
<script src="https://cdn.rawgit.com/kjur/jsrsasign/89f70bd4872473733f10579a77b554c81f3a7136/jsrsasign-all-min.js"></script>

<script src="~/js/js_lib_kjur-jsrsasign_keyutil-1.0.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script>
<script>


    /// Authentication setup ///
    qz.security.setCertificatePromise(function (resolve, reject) {
        //Preferred method - from server
        $.ajax({ url: "assets/signing/digital-certificate.txt", cache: false, dataType: "text" }).then(resolve, reject);

        //Alternate method 1 - anonymous
        //        resolve();

        //Alternate method 2 - direct
        resolve("-----BEGIN CERTIFICATE-----" +
            "MIIFOjCCAySgAwIBAgIEODA5NDALBgkqhkiG9w0BAQUwgZgxCzAJBgNVBAYTAlVT" +
            "MQswCQYDVQQIDAJOWTEbMBkGA1UECgwSUVogSW5kdXN0cmllcywgTExDMRswGQYD" +
            "VQQLDBJRWiBJbmR1c3RyaWVzLCBMTEMxGTAXBgNVBAMMEHF6aW5kdXN0cmllcy5j" +
            "b20xJzAlBgkqhkiG9w0BCQEWGHN1cHBvcnRAcXppbmR1c3RyaWVzLmNvbTAeFw0y" +
            "MDAzMTgwNDAwMDBaFw0yMTAzMTkwNDAwMDBaMIIBBDELMAkGA1UEBgwCSU4xDjAM" +
            "BgNVBAgMBWRlbGhpMRIwEAYDVQQHDAluZXcgZGVsaGkxJTAjBgNVBAoMHGlzb3Vy" +
            "c2UgdGVjaG5vbG9naWVzIHB2dCBsdGQxJTAjBgNVBAsMHGlzb3Vyc2UgdGVjaG5v" +
            "bG9naWVzIHB2dCBsdGQxJTAjBgNVBAMMHGlzb3Vyc2UgdGVjaG5vbG9naWVzIHB2" +
            "dCBsdGQxHjAcBgkqhkiG9w0BCQEMD3JhakBpc291cnNlLmNvbTE8MDoGA1UEDQwz" +
            "cmVuZXdhbC1vZi03ZjIzYzM3YmUyZTkzNzQ4Zjc5MmMzZTZkOGRhYjEyOWViYTI4" +
            "ZDU4MIIBIDALBgkqhkiG9w0BAQEDggEPADCCAQoCggEBAIeNmUmde+pdoD6e7UHp" +
            "2u9sUzTnNXTY+6Sj94rNg08aGrwiqrcaZRsvIZ4OZwHmyPpg/m6XttxBTgPY0rhJ" +
            "BXYxwkcU9kwPwEcbPRPR7pKePhBt0Hsx9qc7lPYqYQp4Wf65X85VdEzaNP5lDHzl" +
            "XyqvZr+lvWlCm7MRkz4VrHxqu0/m1FRTzK50JqC5VnYSVAGCI9n+k/r6txJfvqBK" +
            "AM+nYK7qwB6Wp+9aGOgJ845B31qEcgssZ/FnZLlBoNMr5YAE06kOcitcqyrOx1g0" +
            "Sn12AsQCfEMcnt37JnexFrUjB7JutkJHRXKqkYUI5WsN6RKcK6pF06X1Wxn1AuqB" +
            "710CAwEAAaMjMCEwHwYDVR0jBBgwFoAUkKZQt4TUuepf8gWEE3hF6Kl1VFwwCwYJ" +
            "KoZIhvcNAQEFA4ICAQA0AtQLvfixibUhfcWe3Y+bMtArFX5WlAwv+9a7LpX5zrOX" +
            "TAxwGsh0IQnwrSL7jvlnZeyNh1f+T3G6Mgz2eMG5bESRYuoAlrTc301M6f9X8kW7" +
            "JhDcqlTp7Cfzd9iLsfnyLvyyn8t7yueK6HtSfyCKxD0CZpYqzPhiKJeqIoVf5bGC" +
            "nQIvcHVNOFkdodzutbLCTrTW4Nnot/9coS+yOt0NaBHvSERKBPrKq/k1bvBqV0bn" +
            "JHeMWZspfiazg1YXUr9U4zqOeUQHUqbNoqP9Ww12yMEB45mULf2iD9T8WRi9flUs" +
            "y+Lj+COuWMpIThp91LC2ghtOXNWEK7Xo4cdQ9w54R6gDv7Gyj8trPIdSosk+i4aV" +
            "vhozDQWz9wYgUropTVCy41iLwi+yyXFUvGF8BKntgYK+dSPtCdcOEp7YVbcCm4/t" +
            "sBwexVewtVs8yKp5WqVfP62vGLLdPLM/yxWRgle5of6gQ3NNHUox8iufx7HevJD5" +
            "eY74tqkMK65XtT++Sd+Ou+Z7sBQDDbhmwwCNOhH9UTNOT1Y3n7QhQHXtHWTzf1f6" +
            "bFgE4d3MTDU7N094WkI73IabZ9H0XA4ihQHIJbQcxvC8WKoswm5i35+Oar3oPb0o" +
            "b9g9ICjB2RNKBc4WHnW5JfBx1fjYCja1FLDRhhHqE6E2HbPG8Cg8R7O9oD65Ig==" +
            "-----END CERTIFICATE-----" +
            "--START INTERMEDIATE CERT--" +
            "-----BEGIN CERTIFICATE-----" +
            "MIIFEjCCA/qgAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwgawxCzAJBgNVBAYTAlVT" +
            "MQswCQYDVQQIDAJOWTESMBAGA1UEBwwJQ2FuYXN0b3RhMRswGQYDVQQKDBJRWiBJ" +
            "bmR1c3RyaWVzLCBMTEMxGzAZBgNVBAsMElFaIEluZHVzdHJpZXMsIExMQzEZMBcG" +
            "A1UEAwwQcXppbmR1c3RyaWVzLmNvbTEnMCUGCSqGSIb3DQEJARYYc3VwcG9ydEBx" +
            "emluZHVzdHJpZXMuY29tMB4XDTE1MDMwMjAwNTAxOFoXDTM1MDMwMjAwNTAxOFow" +
            "gZgxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJOWTEbMBkGA1UECgwSUVogSW5kdXN0" +
            "cmllcywgTExDMRswGQYDVQQLDBJRWiBJbmR1c3RyaWVzLCBMTEMxGTAXBgNVBAMM" +
            "EHF6aW5kdXN0cmllcy5jb20xJzAlBgkqhkiG9w0BCQEWGHN1cHBvcnRAcXppbmR1" +
            "c3RyaWVzLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANTDgNLU" +
            "iohl/rQoZ2bTMHVEk1mA020LYhgfWjO0+GsLlbg5SvWVFWkv4ZgffuVRXLHrwz1H" +
            "YpMyo+Zh8ksJF9ssJWCwQGO5ciM6dmoryyB0VZHGY1blewdMuxieXP7Kr6XD3GRM" +
            "GAhEwTxjUzI3ksuRunX4IcnRXKYkg5pjs4nLEhXtIZWDLiXPUsyUAEq1U1qdL1AH" +
            "EtdK/L3zLATnhPB6ZiM+HzNG4aAPynSA38fpeeZ4R0tINMpFThwNgGUsxYKsP9kh" +
            "0gxGl8YHL6ZzC7BC8FXIB/0Wteng0+XLAVto56Pyxt7BdxtNVuVNNXgkCi9tMqVX" +
            "xOk3oIvODDt0UoQUZ/umUuoMuOLekYUpZVk4utCqXXlB4mVfS5/zWB6nVxFX8Io1" +
            "9FOiDLTwZVtBmzmeikzb6o1QLp9F2TAvlf8+DIGDOo0DpPQUtOUyLPCh5hBaDGFE" +
            "ZhE56qPCBiQIc4T2klWX/80C5NZnd/tJNxjyUyk7bjdDzhzT10CGRAsqxAnsjvMD" +
            "2KcMf3oXN4PNgyfpbfq2ipxJ1u777Gpbzyf0xoKwH9FYigmqfRH2N2pEdiYawKrX" +
            "6pyXzGM4cvQ5X1Yxf2x/+xdTLdVaLnZgwrdqwFYmDejGAldXlYDl3jbBHVM1v+uY" +
            "5ItGTjk+3vLrxmvGy5XFVG+8fF/xaVfo5TW5AgMBAAGjUDBOMB0GA1UdDgQWBBSQ" +
            "plC3hNS56l/yBYQTeEXoqXVUXDAfBgNVHSMEGDAWgBQDRcZNwPqOqQvagw9BpW0S" +
            "BkOpXjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAJIO8SiNr9jpLQ" +
            "eUsFUmbueoxyI5L+P5eV92ceVOJ2tAlBA13vzF1NWlpSlrMmQcVUE/K4D01qtr0k" +
            "gDs6LUHvj2XXLpyEogitbBgipkQpwCTJVfC9bWYBwEotC7Y8mVjjEV7uXAT71GKT" +
            "x8XlB9maf+BTZGgyoulA5pTYJ++7s/xX9gzSWCa+eXGcjguBtYYXaAjjAqFGRAvu" +
            "pz1yrDWcA6H94HeErJKUXBakS0Jm/V33JDuVXY+aZ8EQi2kV82aZbNdXll/R6iGw" +
            "2ur4rDErnHsiphBgZB71C5FD4cdfSONTsYxmPmyUb5T+KLUouxZ9B0Wh28ucc1Lp" +
            "rbO7BnjW" +
            "-----END CERTIFICATE-----");
    });

    qz.security.setSignaturePromise(function (toSign) {

        var privateKey = "-----BEGIN PRIVATE KEY-----" +
            "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCHjZlJnXvqXaA+" +
            "nu1B6drvbFM05zV02Puko/eKzYNPGhq8Iqq3GmUbLyGeDmcB5sj6YP5ul7bcQU4D" +
            "2NK4SQV2McJHFPZMD8BHGz0T0e6Snj4QbdB7MfanO5T2KmEKeFn+uV/OVXRM2jT+" +
            "ZQx85V8qr2a/pb1pQpuzEZM+Fax8artP5tRUU8yudCaguVZ2ElQBgiPZ/pP6+rcS" +
            "X76gSgDPp2Cu6sAelqfvWhjoCfOOQd9ahHILLGfxZ2S5QaDTK+WABNOpDnIrXKsq" +
            "zsdYNEp9dgLEAnxDHJ7d+yZ3sRa1IweybrZCR0VyqpGFCOVrDekSnCuqRdOl9VsZ" +
            "9QLqge9dAgMBAAECggEABhg/xCeTOBPC7g3cl7zECJp+Q0ACD0w87vIltyqhCiAf" +
            "rkXWFyrV+5rq5V27E+151oggkyhkeGgXRzpV1Hi0CNRulR5EKgyrQIc2VSXN7ERh" +
            "K1aaARqwqbmWwQVhckRnB3pI7HtlzJl4Yy0impsAOb3D3j9oJ3YZ5LtC5jpjPv9y" +
            "HA7zsVIXMccpdqNF7A/3weZ8WDltHR0oo34VV8J7u1ZDzdTrOrFHsgnszEhqC/At" +
            "g4dkLJX/nvmMy6qNQlPQbosCXojQgbQ0IQyUguHiOGZe5qDlv3RCfZNasVHFMjP6" +
            "pLHOn4DOb+ZDQkymHcDGigSsf9V9JV9Cwsx3vVxoAQKBgQC7v3y62+bsp6byATgS" +
            "P6Yiw2hqwKEbqoB5Q9m5Y9Slwrl3NX5fZFETovkXFDwTXw4DPSLjkJs5kcess+GZ" +
            "QGpuPNpqfQLuyDPATCIVF7QKmTtcr342KrPZ0U28inm3LD49T3NRFM+RxsJtAPQE" +
            "i4gCUXM1clhVdhCk+apnxB7sHQKBgQC41KqGzAVFoItcMubOlG8am54pV2pxfbAv" +
            "YufyMdEG6RP7MGIXjWYJs1VK9d7u3XXCxZ0fZJnZ1/4lYaNdy6eCpCt9bN5riawA" +
            "bCp5xSh3EDIjNpcfYA3I1Bq9nkp/2wk0qqVjNduALbML6N4qzNqNjIXCoHjCg5u4" +
            "9X+rq+8sQQKBgQCDcC5pPvQu77wfppzTob20jqr2OX9QuBATVV4CvRItLeLbwxaC" +
            "v99G6QyLjL32LdDIka9wM1eIeTeZ/6DLwl4AaRfb/0LjWkNot6QQsjR4SwhU/gNU" +
            "9pZMwowyl5tYkl/MWmf39qLOgqCw4T70Q57nSJBodXHD+tDyPlt/I70mPQKBgCdx" +
            "qxqtO4rKYjNA4aTAZJ2HDE/CSgMCUbErKFi1bOhOoWb/wk9Ia7gyP0eKBRNwy4rP" +
            "ZWKns3Wb9K7BkX2Y0py8sFNKAoVskfpdGwt1mdce67Q8GDAn7YkoSrSgrUFv2x0U" +
            "NctgWQGXvxgRkCgOI64FiR4p5NuN/pOQQLjALoCBAoGAW5Tm+17ekjE26r1at/NH" +
            "SFkvVDg0EuSuF882ar5rsE2Ney68kXB5SJwWxLvbvbbGO2WubwG7dTM1Onl2fAG5" +
            "5u8bg/cLyTBX828ZoH60pTjdTvRZ6ZyoKvz4bH0Oc0TbOpl0DQQGO/Fav1qfF1RJ" +
            "6xhW+6M6xWslKHALKH2c7Zw=" +
            "-----END PRIVATE KEY-----";
        return function (resolve, reject) {
            try {
                var pk = KEYUTIL.getKey(privateKey);
                var sig = new KJUR.crypto.Signature({ "alg": "SHA1withRSA" });
                sig.init(pk);
                sig.updateString(toSign);
                var hex = sig.sign();
                console.log("DEBUG: \n\n" + stob64(hextorstr(hex)));
                resolve(stob64(hextorstr(hex)));
            }
            catch (err) {
                console.error(err);
                reject(err);
            }
        };



    });
    /// Connection ///
    function launchQZ() {
        if (!qz.websocket.isActive()) {
            window.location.assign("qz:launch");
            //Retry 5 times, pausing 1 second between each attempt
            startConnection({ retries: 5, delay: 1 });
        }
    }

    function startConnection(config) {
        if (!qz.websocket.isActive()) {
            updateState('Waiting', 'default');

            qz.websocket.connect(config).then(function () {
                updateState('Active', 'success');
                findVersion();
            }).catch(handleConnectionError);
        } else {
            displayMessage('An active connection with QZ already exists.', 'alert-warning');
        }
    }

    function endConnection() {
        if (qz.websocket.isActive()) {
            qz.websocket.disconnect().then(function () {
                updateState('Inactive', 'default');
            }).catch(handleConnectionError);
        } else {
            displayMessage('No active connection with QZ exists.', 'alert-warning');
        }
    }
        function listNetworkInfo() {
        qz.websocket.getNetworkInfo().then(function (data) {
            if (data.macAddress == null) { data.macAddress = 'UNKNOWN'; }
            if (data.ipAddress == null) { data.ipAddress = "UNKNOWN"; }

            var macFormatted = '';
            for (var i = 0; i < data.macAddress.length; i++) {
                macFormatted += data.macAddress[i];
                if (i % 2 == 1 && i < data.macAddress.length - 1) {
                    macFormatted += ":";
                }
            }

            displayMessage("<strong>IP:</strong> " + data.ipAddress + "<br/><strong>Physical Address:</strong> " + macFormatted);
        }).catch(displayError);
    }

    /// Detection ///
    function findPrinter(query, set) {
        $("#printerSearch").val(query);
        qz.printers.find(query).then(function (data) {
            displayMessage("<strong>Found:</strong> " + data);
            if (set) { setPrinter(data); }
        }).catch(displayError);
    }

    function findDefaultPrinter(set) {
        qz.printers.getDefault().then(function (data) {
            displayMessage("<strong>Found:</strong> " + data);
            if (set) { setPrinter(data); }
        }).catch(displayError);
    }

    function findPrinters() {
        qz.printers.find().then(function (data) {
            var list = '';
            for (var i = 0; i < data.length; i++) {
                list += "&nbsp; " + data[i] + "<br/>";
            }

            displayMessage("<strong>Available printers:</strong><br/>" + list);
        }).catch(displayError);
    }

    function printEPL() {

        var url1 = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        var urlparam = url1[0].split('=');
        var DocketId = urlparam[1];

        var requestData = { DocketId: DocketId };
        var person = {
            DocketId: DocketId,

        }
        AjaxRequestWithPostAndJson('/Home/GetDocketBarcodeInfo', JSON.stringify(person), function (responseData) {
            if (responseData.length != 0) {
                var config = getUpdatedConfig();

                $.each(responseData, function () {
                    var printData = [
                        '\nN\n',
                        'q609\n',
                        'Q203,20\n',
                        'B100,110,0,1A,2,6,80,B,"1236758"\n',
                        'A100,250,0,3,1,1,N,"From"\n',
                        'A100,280,0,3,1,1,N,"To"\n',
                        'A100,310,0,3,1,1,N,"Consignee"\n',
                        'A100,340,0,3,1,1,N,"Packages"\n',
                        '\nP1,1\n'
                    ];

                    qz.print(config, printData).catch(displayError);

                })
            }
            else {
                alert("hogya");
            }
        }, ErrorFunction, false);

    }
    var gstMasterUrl;

    gstMasterUrl = '@Url.Action("", "home")';

    $("#btnEnable").click(function () {
        $("#btnid1").show();
        $("#btnid2").show();
        $("#btnEnable").hide();

    });
    $('#btnid1').click(function () {
        debugger
        $("#btnEnable").show();
        $("#btnid1").hide();
        $("#btnid2").hide();
        var DocketId = 0, DocketNo = 0, Count = 0;
        var id = 1;
        var url1 = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        console.log(url1);
        var person;
        var urlparam = url1[0].split('=');
        DocketId = urlparam[1];
        var urlparam1;
        var urlparam2;
        person = {
            DocketId: DocketId

        }
        if (url1[1] != null) {
            urlparam1 = url1[1].split('=');
            DocketNo = urlparam1[1];
            person = {
                DocketId: DocketId,
                DocketNo: DocketNo
            }
        }
        if (url1[2] != null) {
            urlparam2 = url1[2].split('=');
            Count = urlparam2[1];
            person = {
                DocketId: DocketId,
                DocketNo: DocketNo
            }


        }
        if (Count == '1') {
            if (person.DocketId != null) {

                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/GetDocketBarcodeInfo",
                    data: JSON.stringify(person),
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();
                        var printData = [];
                        var Data = '';
                        var arr = [];
                        var i=0;



                        $.each(response, function () {
                            if (this.LotCount == 1) {

                                printData = [
                                    '^XA\n',
                                    '^FO180,80^BY3',
                                    '^B2N,60,Y,N,N',
                                    '^FD' + parseInt(this.docketno) + '^FS',


                                    '^FO180,170^A0,22,24^FDFrom:' + this.FromLocation + '^FS\n',
                                    '^FO180,195^A0,22,24^FDTo:' + this.ToLocation + '^FS\n',
                                    '^FO180,170^A0,22,24^FDCosignee:' + this.Cosignee + '^FS\n',
                                    '^FO180,195^A0,22,24^FDPackages:' + this.Packages + '^FS\n',

                                    '^XZ\n'
                                ];
                                Data += printData + '\n';
                            }
                            else if (this.LotCount == 2) {
                                printData = [
                                    '^XA\n',



                                    '^FO180,80^BY3',
                                    '^B2N,60,Y,N,N',
                                    '^FD' + this.LotNo + '^FS',
                                    '^FO180,170^A0,22,24^FDFrom:' + this.FromLocation + '^FS\n',
                                    '^FO180,195^A0,22,24^FDTo:' + this.ToLocation + '^FS\n',
                                    '^FO180,220^A0,22,24^FDCosignee:' + this.Cosignee + '^FS\n',
                                    '^FO180,245^A0,22,24^FDPackages:' + this.Packages + '^FS\n',
                                    '^XZ\n'
                                ];
                                Data += printData + '\n';
                            }

                        })
                        arr.push(Data);
                        var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/BarCodePrintersInfo",
                    data: '{}',
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();


                        $.each(response, function () {
                            if (this.PRINTTYPE == "BinCodeLabel") {


                                var docketno = this.DocketNo.split(',');
                                var count = docketno[1];
                                var docketno1 = docketno[0];

                                for (var i = 0; i <= count - 1; i++) {


                                    var printData = [
                                        '\nN\n',
                                        'q609\n',
                                        'Q163,20\n',
                                        'B60,110,0,1A,2,6,80,B,"' + DocketNo + '"\n',
                                        '\nP1,1\n'
                                    ];

                                    qz.print(config, printData).catch(displayError);
                                }
                            }
                            else if (this.PRINTTYPE == "USN_Reprint_Label_Param1_USN" && this.USNCOUNT != 0) {
                                var printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,100,B,"' + ltrim(this.DocketNo, "0") + '"\n',
                                    'A60,170,0,3,1,1,N,"From ' + this.FromLocation + '"\n',
                                    'A60,190,0,3,1,1,N,"To ' + this.ToLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"Cosignee : ' + this.Cosignee + '"\n',
                                    'A60,230,0,3,1,1,N,"Packages' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];




                                qz.print(config, printData).catch(displayError);
                            }



                        });
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
        }
        if (Count == 'R') {
            if (person.DocketId != null) {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/GetDocketBarcodeInfo",
                    data: JSON.stringify(person),
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();
                        $.each(response, function () {
                            var printData = [
                                '^XA\n',
                                '^FO180,80^BY3',
                                '^B2N,60,Y,N,N',
                                '^FD' + this.DocketNo + '^FS',
                                '^FO180,170^A0,22,24^FD^FS\n',
                                '^FO180,195^A0,22,24^FD^FS\n',
                                '^FO180,220^A0,22,24^FD^FS\n',
                                '^FO180,245^A0,22,24^FD^FS\n',
                                '^FO180,270^A0,22,24^FD^FS\n',
                                '^XZ\n'
                            ];

                            qz.print(config, printData).catch(displayError);
                        })

                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
        }
        else {
            if (person.DocketId != null) {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/GetDocketBarcodeInfo",
                    data: JSON.stringify(person),
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();


                        var printData = [];
                        var Data = '';
                        var arr = [];

                        $.each(response, function () {
                            if (this.LotCount == 1) {

                                printData = [
                                    '^XA\n',



                                    '^FO180,80^BY3',
                                    '^B2N,60,Y,N,N',
                                    '^FD' + this.docketno + '^FS',
                                    '^FO180,170^A0,22,24^FDFrom:' + this.FromLocation + '^FS\n',
                                    '^FO180,195^A0,22,24^FDTo:' + this.ToLocation + '^FS\n',
                                    '^FO180,245^A0,22,24^FDCosignee:' + this.Cosignee + '^FS\n',
                                    '^FO180,270^A0,22,24^FDPackages:' + this.Packages + '^FS\n',
                                    '^XZ\n'
                                ];
                                Data += printData + '\n';
                            }

                            else if (this.LotCount == 2) {
                                printData = [
                                    '^XA\n',
                                    '^FO180,80^BY3',
                                    '^B2N,60,Y,N,N',
                                    '^FD' + this.LotNo + '^FS',
                                    '^FO180,170^A0,22,24^FDFrom:' + this.FromLocation + '^FS\n',
                                    '^FO180,195^A0,22,24^FDTo:' + this.ToLocation + '^FS\n',
                                    '^FO180,220^A0,22,24^FDCosignee' + this.Cosignee + '^FS\n',
                                    '^FO180,245^A0,22,24^FDPackages ' + this.Packages + '^FS\n',
                                    '^XZ\n'
                                ];
                                Data += printData + '\n';
                            }

                        })
                        arr.push(Data);
                        var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);

                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/BarCodePrintersInfo",
                    data: '{}',
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();
                        var printData = [];
                        var Data = '';
                        var arr = [];

                        $.each(response, function () {
                            if (this.PRINTTYPE == "BinCodeLabel") {
                                var docketno = this.DocketNo.split(',');
                                var count = docketno[1];
                                var DocketNo = docketno[0];
                                for (var i = 0; i <= count - 1; i++) {
                                    printData = [
                                        '\nN\n',
                                        'q609\n',
                                        'Q163,20\n',
                                        'B60,110,0,1A,2,6,80,B,"' + DocketNo + '"\n',
                                        '\nP1,1\n'
                                    ];
                                    Data += printData + '\n';
                                }
                            }
                            else if (this.PRINTTYPE == "USN_Reprint_Label_Param1_USN" && this.USNCOUNT != 0) {
                                printData = [
                                    '^XA\n',

                                    '^FO180,80^BY3',
                                    '^B2N,60,Y,N,N',
                                    '^FD' + parseInt(this.DocketNo) + '^FS',

                                    '^FO180,170^A0,22,24^FDFrom:' + this.FromLocation + '^FS\n',
                                    '^FO180,195^A0,22,24^FDTo:' + this.ToLocation + '^FS\n',
                                    '^FO180,245^A0,22,24^FDCosignee:' + this.Cosignee + '^FS\n',
                                    '^FO180,270^A0,22,24^FDPackages:' + this.Packages + '^FS\n',

                                    '^XZ\n'

                                ];

                                Data += printData + '\n';
                            }
                        });
                        arr.push(Data);
                        //var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);
                        //alert(arr[0]);
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
        }
    })

    $('#btnid2').click(function () {
        $("#btnEnable").show();
        $("#btnid1").hide();
        $("#btnid2").hide();
        var DocketId = 0, DocketNo = 0, Count = "";
        var id = 1;
        var url1 = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        console.log(url1);
        var person;
        var urlparam = url1[0].split('=');
        DocketId = urlparam[1];
        var urlparam1;
        var urlparam2;
        person = {
            DocketId: DocketId
        }
        var s = url1[1];
        if (url1[1] != null) {
            urlparam1 = url1[1].split('=');
            if (urlparam1[0] != "From") {
                DocketNo = urlparam1[1];
                person = {
                    DocketId: DocketId,
                    DocketNo: DocketNo
                }
            }
            else {
                person = {
                    DocketId: '',
                    DocketNo: DocketId,
                    Count: urlparam1[1]
                }
                Count = urlparam1[1];
            }
        }
        if (url1[2] != null) {

            person = {
                DocketId: DocketId,
                DocketNo: DocketNo,
                Count: Count

            }

            urlparam2 = url1[2].split('=');
            Count = urlparam2[1];
        }




        if (Count == '1') {
            if (person.DocketId != null) {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/GetDocketBarcodeInfo",
                    data: JSON.stringify(person),
                    dataType: "json",

                    success: function (response) {
                        debugger;
                        var config = getUpdatedConfig();
                        $.each(response, function () {
                            if (this.LotCount == 1) {

                                var printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,100,B,"' + this.DocketNo + '"\n',
                                    'A60,190,0,3,1,1,N,"From ' + this.FromLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"To ' + this.ToLocation + '"\n',
                                    'A60,230,0,3,1,1,N,"Cosignee ' + this.Cosignee + '"\n',
                                    'A60,250,0,3,1,1,N,"Packages' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                            }
                            else if (this.LotCount == 2) {
                                var printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'A60,170,0,3,1,1,N,"From:' + this.FromLocation + '"\n',
                                    'A60,190,0,3,1,1,N,"To ' + this.ToLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"Cosignee: ' + this.Cosignee + '"\n',
                                    'A60,230,0,3,1,1,N,"Packages ' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                            }
                            qz.print(config, printData).catch(displayError);

                        })
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/BarCodePrintersInfo",
                    data: '{}',
                    dataType: "json",

                    success: function (response) {

                        debugger;

                        var config = getUpdatedConfig();
                        var printData = [];
                        var Data = '';
                        var arr = [];

                        $.each(response, function () {
                            if (this.PRINTTYPE == "BinCodeLabel") {
                                var docketno = this.DocketNo.split(',');
                                var count = docketno[1];
                                var DocketNo = docketno[0];

                                for (var i = 0; i <= count - 1; i++) {
                                    printData = [
                                        '\nN\n',
                                        'q609\n',
                                        'Q163,20\n',
                                        'B60,110,0,1A,2,6,80,B,"' + DocketNo + '"\n',
                                        '\nP1,1\n'
                                    ];

                                    Data += printData + '\n';

                                }
                            }
                            else if (this.PRINTTYPE == "USN_Reprint_Label_Param1_USN" && this.USNCOUNT != 0) {
                                printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,100,B,"' + this.DocketNo + '"\n',
                                    'A60,170,0,3,1,1,N,"From : ' + this.FromLocation + '"\n',
                                    'A60,190,0,3,1,1,N,"To :' + this.ToLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"Cosignee: ' + this.Cosignee + '"\n',
                                    'A60,230,0,3,1,1,N,"Packages : ' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                                Data += printData + '\n';

                            }
                        });
                        arr.push(Data);
                        var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
        }

        else if (Count == 'R') {
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                url: "../Home/GetDocketBarcodeInfo",
                data: JSON.stringify(person),
                dataType: "json",
                success: function (response) {

                    debugger;
                    var config = getUpdatedConfig();
                    $.each(response, function () {

                        var printData = [
                            '\nN\n',
                            'q609\n',
                            'Q163,20\n',
                            'B60,40,0,1A,2,6,90,B,"' + this.DocketNo + '"\n',
                            '\nP1,1\n'
                        ];
                    })
                    qz.print(config, printData).catch(displayError);
                },
                error: function (re) {
                    alert(JSON.stringify(re));
                }
            });
        }
        else {
            if (person.DocketId != null) {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/GetDocketBarcodeInfo",
                    data: JSON.stringify(person),
                    dataType: "json",

                    success: function (response) {

                        debugger;
                        var config = getUpdatedConfig();

                        var printData = [];
                        var Data = '';
                        var arr = [];

                        $.each(response, function () {
                            if (this.LotCount == 1) {

                                printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,100,B,"' + this.DocketNo + '"\n',
                                    'A60,190,0,3,1,1,N,"From: ' + this.FromLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"To: ' + this.ToLocation + '"\n',
                                    'A60,230,0,3,1,1,N,"Cosignee: ' + this.Cosignee + '"\n',
                                    'A60,250,0,3,1,1,N,"Packages: ' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                                Data += printData + '\n';
                            }
                            else if (this.LotCount == 2) {
                                printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,90,B,"' + this.DocketNo + '"\n',
                                    'A60,170,0,3,1,1,N,"From: ' + this.FromLocation + '"\n',
                                    'A60,190,0,3,1,1,N,"To: ' + this.ToLocation + '"\n',
                                    'A60,230,0,3,1,1,N,"Cosignee: ' + this.Cosignee + '"\n',
                                    'A60,250,0,3,1,1,N,"Packages: ' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                                Data += printData + '\n';
                            }
                        })
                        arr.push(Data);
                        var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
            else {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "../Home/BarCodePrintersInfo",
                    data: '{}',
                    dataType: "json",

                    success: function (response) {

                        var config = getUpdatedConfig();
                        var printData = [];
                        var Data = '';
                        var arr = [];
                        $.each(response, function () {
                            if (this.PRINTTYPE == "BinCodeLabel") {


                                var docketno = this.docketno.split(',');
                                var count = docketno[1];
                                var docketno1 = docketno[0];

                                for (var i = 0; i <= count - 1; i++) {

                                    printData = [
                                        '\nN\n',
                                        'q609\n',
                                        'Q163,20\n',
                                        'B60,110,0,1A,2,6,80,B,"' + docketno + '"\n',


                                        '\nP1,1\n'
                                    ];

                                    Data += printData + '\n';
                                }
                            }
                            else if (this.PRINTTYPE == "USN_Reprint_Label_Param1_USN" && this.USNCOUNT != 0) {

                                printData = [
                                    '\nN\n',
                                    'q609\n',
                                    'Q163,20\n',
                                    'B60,40,0,1A,2,6,100,B,"' + this.DocketNo + '"\n',
                                    'A60,170,0,3,1,1,N,"From: ' + this.FromLocation + '"\n',
                                    'A60,190,0,3,1,1,N,"To: ' + this.ToLocation + '"\n',
                                    'A60,210,0,3,1,1,N,"Cosignee: ' + this.Cosignee + '"\n',
                                    'A60,230,0,3,1,1,N,"Packages: ' + this.Packages + '"\n',
                                    '\nP1,1\n'
                                ];
                                Data += printData + '\n';
                            }

                        });
                        arr.push(Data);
                        var s = JSON.parse(JSON.stringify(arr))
                        qz.print(config, arr).catch(displayError);
                    },
                    error: function (re) {
                        alert(JSON.stringify(re));
                    }
                });
            }
        }
    })
    function printEvolis() {
        var config = getUpdatedConfig();

        var printData = [
            '\x1BPps;0\x0D',   // Enable raw/disable driver printer parameter supervision
            '\x1BPwr;0\x0D',   // Landscape (zero degree) orientation
            '\x1BWcb;k;0\x0D', // Clear card memory

            '\x1BSs\x0D',      // Start of sequence
            { type: 'raw', format: 'image', data: 'assets/img/fade-test.png', options: { language: "EVOLIS", precision: 128 } },
            '\x1BWt;50;60;0;30;Printed using QZ Tray ' + qzVersion + '\x0D', // 50,60 = coordinates; 0 = arial font
            '\x1BSe\x0D'       // End of sequence
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printESCPOS() {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'raw', format: 'image', data: 'assets/img/image_sample_bw.png', options: { language: 'ESCPOS', dotDensity: 'single' } },
            { type: 'raw', data: '\nPrinted using qz-tray plugin.\n\n\n\n\n\n' }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printEPCL() {
        var config = getUpdatedConfig();

        var printData = [];
        $.merge(printData, convertEPCL('+RIB 4'));     // Monochrome ribbon
        $.merge(printData, convertEPCL('F'));          // Clear monochrome print buffer
        $.merge(printData, convertEPCL('+C 8'));       // Adjust monochrome intensity
        $.merge(printData, convertEPCL('&R'));         // Reset magnetic encoder
        $.merge(printData, convertEPCL('&CDEW 0 0'));  // Set R/W encoder to ISO default
        $.merge(printData, convertEPCL('&CDER 0 0'));  // Set R/W encoder to ISO default
        $.merge(printData, convertEPCL('&SVM 0'));     // Disable magnetic encoding verifications
        $.merge(printData, convertEPCL('T 80 600 0 1 0 45 1 QZ INDUSTRIES'));   // Write text buffer
        $.merge(printData, convertEPCL('&B 1 123456^INDUSTRIES/QZ^789012'));    // Write mag strip buffer
        $.merge(printData, convertEPCL('&E*'));        // Encode magnetic data
        $.merge(printData, convertEPCL('I 10'));       // Print card (10 returns to print ready pos.)
        $.merge(printData, convertEPCL('MO'));         // Move card to output hopper

        qz.print(config, printData).catch(displayError);
    }

    /**
     * EPCL helper function that appends a single line of EPCL data, taking into account
     * special EPCL NUL characters, data length, escape character and carriage return
     */
    function convertEPCL(data) {
        if (data == null || data.length == 0) {
            console.warn('Empty EPCL data, skipping');
        }

        // Data length for this command, in 2 character Hex (base 16) format
        var len = (data.length + 2).toString(16);
        if (len.length < 2) { len = '0' + len; }

        return [
            { type: 'raw', format: 'hex', data: 'x00x00x00' },  // Append 3 NULs
            { type: 'raw', format: 'hex', data: 'x' + len },    // Append our command length, in base16
            { type: 'raw', format: 'plain', data: data },       // Append our command
            { type: 'raw', format: 'plain', data: '\r' }        // Append carriage return
        ];
    }

    function printBase64() {
        var config = getUpdatedConfig();

        // Send base64 encoded characters/raw commands to qz using data type 'base64'.
        // This will automatically convert provided base64 encoded text into text/ascii/bytes, etc.
        // This example is for EPL and contains an embedded image.
        // Please adapt to your printer language.

        //noinspection SpellCheckingInspection
        var printData = [
            {
                type: 'raw',
                format: 'base64',
                data: 'Ck4KcTYwOQpRMjAzLDI2CkI1LDI2LDAsMUEsMyw3LDE1MixCLCIxMjM0IgpBMzEwLDI2LDAsMywx' +
                    'LDEsTiwiU0tVIDAwMDAwIE1GRyAwMDAwIgpBMzEwLDU2LDAsMywxLDEsTiwiUVogUFJJTlQgQVBQ' +
                    'TEVUIgpBMzEwLDg2LDAsMywxLDEsTiwiVEVTVCBQUklOVCBTVUNDRVNTRlVMIgpBMzEwLDExNiww' +
                    'LDMsMSwxLE4sIkZST00gU0FNUExFLkhUTUwiCkEzMTAsMTQ2LDAsMywxLDEsTiwiUVpJTkRVU1RS' +
                    'SUVTLkNPTSIKR1cxNTAsMzAwLDMyLDEyOCz/////////6SSSX///////////////////////////' +
                    '//////////6UlUqX////////////////////////////////////8kqkpKP/////////////////' +
                    '//////////////////6JUpJSVf//////////////////////////////////9KpKVVU+////////' +
                    '//////////////////////////8KSSlJJf5/////////////////////////////////9KUqpVU/' +
                    '/7////////////////////////////////9KqUkokf//P///////////////////////////////' +
                    '+VKUqpZP//+P///////////////////////////////ElKUlSf///9f/////////////////////' +
                    '////////+ipSkqin////y/////////////////////////////+lVUpUlX/////r////////////' +
                    '/////////////////qlJKUql/////+n////////////////////////////BFKVKUl//////8v//' +
                    '/////////////////////////zVSlKUp///////0f//////////////////////////wiSlSUpf/' +
                    '//////q///////////////////////////KqlJUpV///////+R//////////////////////////' +
                    '4UlKSpSX///////9T/////////6L///////////////BKlKpSqP///////1X////////0qg/23/V' +
                    'VVVVVVf//8CSlJKklf///////kv///////+pS0/JP8AAAAAAB///wFSlSSpV///////+pf//////' +
                    '/pUoq+qfwAAAAAAH//+AClSqpUT///////9S///////8pJUlkr+AAAAAAA///4AFJSSSUv//////' +
                    '/yl///////KVUpTUv8AAAAAAH///gBKSqlVU////////lX//////6UkqoiU/wAAAAAA///+ABKpJ' +
                    'Uko////////JH//////UpIiqlJ/AAAAAAD///wACkSUpJX///////6q//////6pVVSqiv4AAAAAA' +
                    'f///AAJVVIqpP///////pI//////pSVtSSq/wAAAAAD///8AAJSlVJVf///////Sp/////8Sq//U' +
                    'qL/ttttoAP///wAAUpVSpJ///////+pT/////qkn//UlH/////AB////AABKUSpSX///////5Sn/' +
                    '///+lJ//+pS/////4AP///8AABKUkpVP///////ylP////1Kv//+qr/////AA////4AAKVVJUl//' +
                    '/////+lKf////KS///8kv////8AH////gAAKSSpJR///////9Kq////9Kv///5Kf////gAf///+A' +
                    'AAUlUqov///////1JT////lS////qn////8AD////4AABKpKSqf///////Skj///+kr////JH///' +
                    '/wAf////wAACkqUlK///////8pKv///ypf///9V////+AD/////AAAFKUVSj///////wqlP///JT' +
                    '////yR////wAP////8AAAFKqkpv///////JSlf//9Sv////U/////AB/////4AAAVIpKRf//////' +
                    '+ElV///pS////8of///4AP/////gAAASZVKr///////4qkj///Sn////0v////AA//////AAABUS' +
                    'VJH///////glJn//8pP////KH///8AH/////+AAACtUlVf//////+ClRP//qV////9K////gA///' +
                    '///4AAACEpJK///////8BSqf/+lX////yr///8AD//////wAAAVUqVH///////gUlU//5Rf////R' +
                    'P///gAf//////gAAApKqTP//////8AVSV//pU////6qf//+AD//////+AAAAqkki//////8AEpVL' +
                    '/+qP////1L///wAP//////4AAACSVVB/////+AFUpKX/9KP////Sv//+AB///////AAAAEqSgH//' +
                    '//+ACkpSUv/lV////6k///4AP//////+AAAAUlSgf////gAJKRUpf/ST////1J///AA///////4A' +
                    'AAAVJVB////gAtVFUpV/8lX///+Vf//4AH///////gAAABKSSD///wASSVVJSR/1Vf///8kf//gA' +
                    '///////+AAAABVUof//4AElUpKqqv/SL////1L//8AD///////4AAAABJJQ//8AFVJKVKSSP+qj/' +
                    '///Kv//gAf///////gAAAAKSpT/+ACkqSlKUkqf5Rf///6S//+AD///////+AAAAAKqpP/ABJKVS' +
                    'klKqU/xUf///qp//wAP///////4AAAAAkko+gASVKUlVKlKX/VK///9Sf/+AB////////gAAAACp' +
                    'UrgAKqVKVJKSlKf+Sl///0kf/4AP///////+AAAAABSVIAFJUlKqSUpKV/0pX//8qr//AA//////' +
                    '//8AAAAACklACSopKSVUqVKX/qpH//okv/4AH////////gAAAAAVVKBUpUqUkkpKSk//SSv/xVK/' +
                    '/AAAAAAD////AAAAAAJKWSUpVKVVUqVSp/+qqH9SlR/8AAAAAAH///4AAAAABSUklJSSlJJKUkpf' +
                    '/8klQFSo//gAAAAAA////wAAAAABVKqlUkqlSqkqqU//6pUqkkof8AAAAAAB/r//AAAAAAElEpSK' +
                    'qSlSSpJKL//pUqpVKr/wAAAAAAP8v/8AAAAAAJLKUqkkpSqkqSVf//yUkpKSv+AAAAAAAfqf/wAA' +
                    'AAAAVClKVVUoklUqqp///UpKVVS/wAAAAAAD+S//AAAAAAAlpSkkkpVKkpKSX///JVKTpR+AAAAA' +
                    'AAH9X/8AAAAAABRUpVJUqqSpSUlf///SSk/Sv4AAAAAAA/y//wAAAAAAFSVUlSUkUkpUqr////VS' +
                    'v9S/AAAAAAAB/3//AAAAAAAFUkpSlJMqqUpJP////13/pT////////////8AAAAAAAEpJSlSqUkk' +
                    'pVS////////Un////////////wAAAAAABJVSlSpUqpUpJX///////8q/////////////gAAAAAAC' +
                    'pSqkkpKSUpSSP///////5L////////////+AAAAAAACSkVVKSklKpVV///////+SX///////////' +
                    '/4AAAAAAAFSqJKlSqqiVSX///////9U/////////////gAAAAAAASpVSlSkklVJU////////yr//' +
                    '//////////+AAAAAAAAkpJSklKpKSUp////////kn////////////4AAAAAAABJSqlKqkqUqVf//' +
                    '/////5K/////////////gAAAAAAACpUlKpJKUqlI////////1L////////////+AAAAAAAAFSVKS' +
                    'SqkpFKX////////SX////////////4AAAAAAAAiklKlSSpTKKv///////9U/////////////wAAA' +
                    'AAAABSpSlSqlSiVJ////////pV/////////////AAAAAAAAVUpSkklSlUqX////////Uv///////' +
                    '/////8AAAAAAAAkqUpVJJSqpVf///////8pf////////////4AAAAAAAFJKUpKqUpJUT////////' +
                    '4r/////////////wAAAAAAAKqVKVKUqSSVX///////+Uv/////////////gAAAAAAASUlKSkpKql' +
                    'S////////+qf/////////////AAAAAAAEkpKUlUpJJCn////////iH///////////wAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/4B+A8AH/AAAAA' +
                    'AAAAAAAAAAAAAA//AAfwD4H4HwAAf/4H4DwB//gAAAAAAAAAAAAAAAAAD/+AB/APgfgfAAB//wfw' +
                    'PAf/+AAAAAAAAAAAAAgAAAAP/8AH8AfB+D4AAH//B/g8D//4AAAAAAAAAAAADwAAAA//4A/4B8H4' +
                    'PgAAfB+H+DwP4HgAAAAAAAAAAAAPwAAAD4fgD/gHw/w+AAB8D4f8PB+AGAAAAAAAAAAAAA/wAAAP' +
                    'g+Af/AfD/D4AAHwPh/48HwAAAAAAAAAAAAAAB/4AAA+D4B98A+P8PAAAfA+Hvjw+AAAAAAAAAAAA' +
                    'AAAB/4AAD4PgH3wD4/x8AAB8H4e/PD4AAAAAAAAAAAAAAAB/8AAPh8A+PgPn/nwAAH//B5+8Pg/4' +
                    'AH/j/x/4/8f+AA/8AA//wD4+A+eefAAAf/4Hj7w+D/gAf+P/H/j/x/4AA/wAD/+APj4B5554AAB/' +
                    '/AeP/D4P+AB/4/8f+P/H/gAD/AAP/wB8HwH3nvgAAH/wB4f8Pw/4AH/j/x/4/8f+AA/8AA//AH//' +
                    'Af+f+AAAfAAHg/wfAPgAAAAAAAAAAAAAf/AAD5+A//+B/w/4AAB8AAeD/B+A+AAAAAAAAAAAAAH/' +
                    'gAAPj8D//4D/D/AAAHwAB4H8H+D4AAAAAAAAAAAAB/4AAA+H4P//gP8P8AAAfAAHgPwP//gAAAAA' +
                    'AAAAAAAP8AAAD4fh+A/A/w/wAAB8AAeA/Af/+AAAAAAAAAAAAA/AAAAPg/HwB8B+B+AAAHwAB4B8' +
                    'Af/4AAAAAAAAAAAADwAAAA+B+fAHwH4H4AAAfAAHgHwAf4AAAAAAAAAAAAAIAAAAD4H/8Afgfgfg' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
                    'AAAAAAAAAAAAAAAAAAAAAAAAClAxLDEK'
            }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printXML() {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'raw', format: 'xml', data: 'assets/zpl_sample.xml', options: { xmlTag: 'v7:Image' } }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printHex() {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'raw', format: 'hex', data: '4e0d0a713630390d0a513230332c32360d0a42352c32362c' },
            { type: 'raw', format: 'hex', data: '302c31412c332c372c3135322c422c2231323334220d0a41' },
            { type: 'raw', format: 'hex', data: '3331302c32362c302c332c312c312c4e2c22534b55203030' },
            { type: 'raw', format: 'hex', data: '303030204d46472030303030220d0a413331302c35362c30' },
            { type: 'raw', format: 'hex', data: '2c332c312c312c4e2c22515a205072696e7420506c756769' },
            { type: 'raw', format: 'hex', data: '6e220d0a413331302c38362c302c332c312c312c4e2c2254' },
            { type: 'raw', format: 'hex', data: '657374207072696e74207375636365737366756c220d0a41' },
            { type: 'raw', format: 'hex', data: '3331302c3131362c302c332c312c312c4e2c2266726f6d20' },
            { type: 'raw', format: 'hex', data: '73616d706c652e68746d6c220d0a413331302c3134362c30' },
            { type: 'raw', format: 'hex', data: '2c332c312c312c4e2c227072696e7448657828292066756e' },
            { type: 'raw', format: 'hex', data: '6374696f6e2e220d0a50312c310d0a' }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printFile(file) {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'raw', format: 'file', data: 'assets/' + file }
        ];

        qz.print(config, printData).catch(displayError);
    }


    /// Pixel Printers ///
    function printHTML() {
        var config = getUpdatedConfig();

        var colA = '<h2>*&nbsp; QZ Print Plugin HTML Printing &nbsp;*</h2>' +
            '<span style="color: #F00;">Version:</span> ' + qzVersion + '<br/>' +
            '<span style="color: #F00;">Visit:</span> https://qz.io/';
        var colB = '<img src="' + getPath() + '/assets/img/image_sample.png">';

        var printData = [
            {
                type: 'html',
                format: 'plain',
                data: '<html>' +
                    '   <table style="font-family: monospace; border: 1px;">' +
                    '       <tr style="height: 6cm;">' +
                    '           <td valign="top">' + colA + '</td>' +
                    '           <td valign="top">' + colB + '</td>' +
                    '       </tr>' +
                    '   </table>' +
                    '</html>'
            }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printPDF() {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'pdf', data: 'assets/pdf_sample.pdf' }
        ];

        qz.print(config, printData).catch(displayError);
    }

    function printImage() {
        var config = getUpdatedConfig();

        var printData = [
            { type: 'image', data: 'assets/img/image_sample.png' }
        ];

        qz.print(config, printData).catch(displayError);
    }


    /// Serial ///
    function listSerialPorts() {
        qz.serial.findPorts().then(function (data) {
            var list = '';
            for (var i = 0; i < data.length; i++) {
                list += "&nbsp; <code>" + data[i] + "</code>" + serialButton(["serialPort"], [data[i]]) + "<br/>";
            }

            displayMessage("<strong>Available serial ports:</strong><br/>" + list);
        }).catch(displayError);
    }

    function openSerialPort() {
        var widthVal = $("#serialWidth").val();
        if (!widthVal) { widthVal = null; }

        var properties = {
            start: $("#serialStart").val(),
            end: $("#serialEnd").val(),
            width: widthVal,
            baudRate: $("#serialBaud").val(),
            dataBits: $("#serialData").val(),
            stopBits: $("#serialStop").val(),
            parity: $("#serialParity").val(),
            flowControl: $("#serialFlow").val()
        };

        qz.serial.openPort($("#serialPort").val(), properties).then(function () {
            displayMessage("Serial port opened");
        }).catch(displayError);
    }

    function sendSerialData() {
        qz.serial.sendData($("#serialPort").val(), $("#serialCmd").val()).catch(displayError);
    }

    function closeSerialPort() {
        qz.serial.closePort($("#serialPort").val()).then(function () {
            displayMessage("Serial port closed");
        }).catch(displayError);
    }


    /// USB ///
    function listUsbDevices() {
        qz.usb.listDevices(true).then(function (data) {
            var list = '';
            for (var i = 0; i < data.length; i++) {
                var device = data[i];
                if (device.hub) { list += "USB Hub"; }

                list += "<p>" +
                    "   VendorID: <code>0x" + device.vendorId + "</code>" +
                    usbButton(["usbVendor", "usbProduct"], [device.vendorId, device.productId]) + "<br/>" +
                    "   ProductID: <code>0x" + device.productId + "</code><br/>";

                if (device.manufacturer) { list += "   Manufacturer: <code>" + device.manufacturer + "</code><br/>"; }
                if (device.product) { list += "   Product: <code>" + device.product + "</code><br/>"; }

                list += "</p><hr/>";
            }

            pinMessage("<strong>Available usb devices:</strong><br/>" + list);
        }).catch(displayError);
    }

    function listUsbDeviceInterfaces() {
        qz.usb.listInterfaces({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val()
        })
            .then(function (data) {
                var list = '';
                for (var i = 0; i < data.length; i++) {
                    list += "&nbsp; <code>0x" + data[i] + "</code>" + usbButton(["usbInterface"], [data[i]]) + "<br/>";
                }

                displayMessage("<strong>Available device interfaces:</strong><br/>" + list);
            }).catch(displayError);
    }

    function listUsbInterfaceEndpoints() {
        qz.usb.listEndpoints({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            interface: $("#usbInterface").val()
        })
            .then(function (data) {
                var list = '';
                for (var i = 0; i < data.length; i++) {
                    list += "&nbsp; <code>0x" + data[i] + "</code>" + usbButton(["usbEndpoint"], [data[i]]) + "<br/>";
                }

                displayMessage("<strong>Available interface endpoints:</strong><br/>" + list);
            }).catch(displayError);
    }

function claimUsbDevice() {
        qz.usb.claimDevice({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            interface: $("#usbInterface").val()
        })
            .then(function () {
                displayMessage("USB Device claimed");
            }).catch(displayError);
    }

    function checkUsbDevice() {
        qz.hid.isClaimed({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val()
        })
            .then(function (claimed) {
                displayMessage("USB Device is " + (claimed ? "" : "not ") + "claimed");
            }).catch(displayError);
    }

    function sendUsbData() {
        qz.usb.sendData({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            endpoint: $("#usbEndpoint").val(),
            data: $("#usbData").val()
        })
            .catch(displayError);
    }

    function readUsbData() {
        qz.usb.readData({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            endpoint: $("#usbEndpoint").val(),
            responseSize: $("#usbResponse").val()
        })
            .then(function (data) {
                displayMessage("<strong>Response:</strong> " + (window.readingWeight ? readScaleData(data) : data) + "<br/>");
            }).catch(displayError);
    }

    function openUsbStream() {
        qz.usb.openStream({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            endpoint: $("#usbEndpoint").val(),
            responseSize: $("#usbResponse").val(),
            interval: $("#usbStream").val()
        })
            .then(function () {
                pinMessage("Waiting on device", '' + $("#usbVendor").val() + $("#usbProduct").val());
            }).catch(displayError);
    }

    function closeUsbStream() {
        qz.usb.closeStream({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val(),
            endpoint: $("#usbEndpoint").val()
        })
            .then(function () {
                $('#' + $("#usbVendor").val() + $("#usbProduct").val()).attr('id', '').html("Stream closed");
            }).catch(displayError);
    }

    function releaseUsbDevice() {
        qz.usb.releaseDevice({
            vendorId: $("#usbVendor").val(),
            productId: $("#usbProduct").val()
        })
            .then(function () {
                displayMessage("USB Device released");
            }).catch(displayError);
    }

    /// HID ///
    function listHidDevices() {
        qz.hid.listDevices().then(function (data) {
            var list = '';
            for (var i = 0; i < data.length; i++) {
                var device = data[i];

                list += "<p>" +
                    "   VendorID: <code>0x" + device.vendorId + "</code>" +
                    usbButton(["hidVendor", "hidProduct", "hidUsagePage", "hidSerial"],
                        [device.vendorId, device.productId, device.usagePage, device.serial]) + "<br/>" +
                    "   ProductID: <code>0x" + device.productId + "</code><br/>" +
                    (device.usagePage ? "   Usage Page: <code>0x" + device.usagePage + "</code><br/>" : "") +
                    (device.serial ? "   Serial: <code>" + device.serial + "</code><br/>" : "") +
                    (device.manufacturer ? "   Manufacturer: <code>" + device.manufacturer + "</code><br/>" : "") +
                    (device.product ? "   Product: <code>" + device.product + "</code><br/>" : "") +
                    "</p><hr/>";
            }

            pinMessage("<strong>Available hid devices:</strong><br/>" + list);
        }).catch(displayError);
    }

    function startHidListen() {
        qz.hid.startListening().then(function () {
            displayMessage("Started listening for HID events");
        }).catch(displayError);
    }

    function stopHidListen() {
        qz.hid.stopListening().then(function () {
            displayMessage("Stopped listening for HID events");
        }).catch(displayError);
    }

    function claimHidDevice() {
        qz.hid.claimDevice({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val()
        })
            .then(function () {
                displayMessage("HID Device claimed");
            }).catch(displayError);
    }

    function checkHidDevice() {
        qz.hid.isClaimed({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val()
        })
            .then(function (claimed) {
                displayMessage("HID Device is " + (claimed ? "" : "not ") + "claimed");
            }).catch(displayError);
    }

    function sendHidData() {
        qz.hid.sendData({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val(),
            data: $("#hidData").val(),
            endpoint: $("#hidReport").val()
        })
            .catch(displayError);
    }

    function readHidData() {
        qz.hid.readData({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val(),
            responseSize: $("#hidResponse").val()
        })
            .then(function (data) {
                displayMessage("<strong>Response:</strong> " + (window.readingWeight ? readScaleData(data) : data) + "<br/>");
            }).catch(displayError);
    }

    function openHidStream() {
        qz.hid.openStream({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val(),
            responseSize: $("#hidResponse").val(),
            interval: $("#hidStream").val()
        })
            .then(function () {
                pinMessage("Waiting on device", '' + $("#hidVendor").val() + $("#hidProduct").val());
            }).catch(displayError);
    }

    function closeHidStream() {
        qz.hid.closeStream({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val()
        })
            .then(function () {
                $('#' + $("#hidVendor").val() + $("#hidProduct").val()).attr('id', '').html("Stream closed");
            }).catch(displayError);
    }

    function releaseHidDevice() {
        qz.hid.releaseDevice({
            vendorId: $("#hidVendor").val(),
            productId: $("#hidProduct").val(),
            usagePage: $("#hidUsagePage").val(),
            serial: $("#hidSerial").val()
        })
            .then(function () {
                displayMessage("HID Device released");
            }).catch(displayError);
    }


    /// Resets ///
    function resetRawOptions() {
        $("#rawPerSpool").val(1);
        $("#rawEncoding").val(null);
        $("#rawEndOfDoc").val(null);
        $("#rawAltPrinting").prop('checked', false);
        $("#rawCopies").val(1);
    }

    function resetPixelOptions() {
        $("#pxlColorType").val("color");
        $("#pxlCopies").val(1);
        $("#pxlDensity").val('');
        $("#pxlDuplex").prop('checked', false);
        $("#pxlInterpolation").val("");
        $("#pxlJobName").val("");
        $("#pxlLegacy").prop('checked', false);
        $("#pxlOrientation").val("");
        $("#pxlPaperThickness").val(null);
        $("#pxlPrinterTray").val(null);
        $("#pxlRasterize").prop('checked', true);
        $("#pxlRotation").val(0);
        $("#pxlScale").prop('checked', true);
        $("#pxlUnitsIN").prop('checked', true);

        $("#pxlMargins").val(0).css('display', '');
        $("#pxlMarginsTop").val(0);
        $("#pxlMarginsRight").val(0);
        $("#pxlMarginsBottom").val(0);
        $("#pxlMarginsLeft").val(0);
        $("#pxlMarginsActive").prop('checked', false);
        $("#pxlMarginsGroup").css('display', 'none');

        $("#pxlSizeWidth").val('');
        $("#pxlSizeHeight").val('');
        $("#pxlSizeActive").prop('checked', false);
        $("#pxlSizeGroup").css('display', 'none');
    }

    function resetSerialOptions() {
        $("#serialPort").val('');
        $("#serialCmd").val('');
        $("#serialStart").val("0x0002"); //String.fromCharCode(2)
        $("#serialEnd").val("0x000D"); //String.fromCharCode(13)

        $("#serialBaud").val(9600);
        $("#serialData").val(8);
        $("#serialStop").val(1);
        $("#serialParity").val('NONE');
        $("#serialFlow").val('NONE');

        // M/T PS60 - 9600, 7, 1, EVEN, NONE
    }

    function resetUsbOptions() {
        $("#usbVendor").val('');
        $("#usbProduct").val('');

        $("#usbInterface").val('');
        $("#usbEndpoint").val('');
        $("#usbData").val('');
        $("#usbResponse").val(8);
        $("#usbStream").val(100);

        // M/T PS60 - V:0x0EB8 P:0xF000, I:0x0 E:0x81
        // Dymo S100 - V:0x0922 P:0x8009, I:0x0 E:0x82
    }

    function resetHidOptions() {
        $("#hidVendor").val('');
        $("#hidProduct").val('');
        $("#hidUsagePage").val('');
        $("#hidSerial").val('');

        $("#hidInterface").val('');
        $("#hidEndpoint").val('');
        $("#hidData").val('');
        $("#hidReport").val('');
        $("#hidResponse").val(8);
        $("#hidStream").val(100);
    }


    /// Page load ///
    $(document).ready(function () {
        window.readingWeight = false;

        resetRawOptions();
        resetPixelOptions();
        resetSerialOptions();
        resetUsbOptions();
        resetHidOptions();

        startConnection();

        $("#printerSearch").on('keyup', function (e) {
            if (e.which == 13 || e.keyCode == 13) {
                findPrinter($('#printerSearch').val(), true);
                return false;
            }
        });

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            if (window.readingWeight) {
                $("#usbWeightRadio").click();
                $("#hidWeightRadio").click();
            } else {
                $("#usbRawRadio").click();
                $("#hidRawRadio").click();
            }
        });

        $("#usbRawRadio").click(function () { window.readingWeight = false; });
        $("#usbWeightRadio").click(function () { window.readingWeight = true; });
        $("#hidRawRadio").click(function () { window.readingWeight = false; });
        $("#hidWeightRadio").click(function () { window.readingWeight = true; });

        $("[data-toggle='tooltip']").tooltip();
    });

    qz.websocket.setClosedCallbacks(function (evt) {
        updateState('Inactive', 'default');
        console.log(evt);

        if (evt.reason) {
            displayMessage("<strong>Connection closed:</strong> " + evt.reason, 'alert-warning');
        }
    });

    qz.websocket.setErrorCallbacks(handleConnectionError);

    qz.serial.setSerialCallbacks(function (streamEvent) {
        if (streamEvent.type !== 'ERROR') {
            console.log('Serial', streamEvent.portName, 'received output', streamEvent.output);
            displayMessage("Received output from serial port [" + streamEvent.portName + "]: <em>" + streamEvent.output + "</em>");
        } else {
            console.log(streamEvent.exception);
            displayMessage("Received an error from serial port [" + streamEvent.portName + "]: <em>" + streamEvent.exception + "</em>", 'alert-error');

        }
    });

    qz.usb.setUsbCallbacks(function (streamEvent) {
        var vendor = streamEvent.vendorId;
        var product = streamEvent.productId;

        if (vendor.substring(0, 2) != '0x') { vendor = '0x' + vendor; }
        if (product.substring(0, 2) != '0x') { product = '0x' + product; }
        var $pin = $('#' + vendor + product);

        if (streamEvent.type !== 'ERROR') {
            if (window.readingWeight) {
                $pin.html("<strong>Weight:</strong> " + readScaleData(streamEvent.output));
            } else {
                $pin.html("<strong>Raw data:</strong> " + streamEvent.output);
            }
        } else {
            console.log(streamEvent.exception);
            $pin.html("<strong>Error:</strong> " + streamEvent.exception);
        }
    });

    qz.hid.setHidCallbacks(function (streamEvent) {
        var vendor = streamEvent.vendorId;
        var product = streamEvent.productId;

        if (vendor.substring(0, 2) != '0x') { vendor = '0x' + vendor; }
        if (product.substring(0, 2) != '0x') { product = '0x' + product; }
        var $pin = $('#' + vendor + product);

        if (streamEvent.type === 'RECEIVE') {
            if (window.readingWeight) {
                var weight = readScaleData(streamEvent.output);
                if (weight) {
                    $pin.html("<strong>Weight:</strong> " + weight);
                }
            } else {
                $pin.html("<strong>Raw data:</strong> " + streamEvent.output);
            }
        } else if (streamEvent.type === 'ACTION') {
            displayMessage("<strong>Device status changed:</strong> " + "[v:" + vendor + " p:" + product + "] - " + streamEvent.actionType);
        } else { //ERROR type
            console.log(streamEvent.exception);
            $pin.html("<strong>Error:</strong> " + streamEvent.exception);
        }
    });

    var qzVersion = 0;
    function findVersion() {
        qz.api.getVersion().then(function (data) {
            $("#qz-version").html(data);
            qzVersion = data;
        }).catch(displayError);
    }

    $("#askFileModal").on("shown.bs.modal", function () {
        $("#askFile").focus().select();
    });
    $("#askHostModal").on("shown.bs.modal", function () {
        $("#askHost").focus().select();
    });


    /// Helpers ///
    function handleConnectionError(err) {
        updateState('Error', 'danger');

        if (err.target != undefined) {
            if (err.target.readyState >= 2) { //if CLOSING or CLOSED
                displayError("Connection to QZ Tray was closed");
            } else {
                displayError("A connection error occurred, check log for details");
                console.error(err);
            }
        } else {
            displayError(err);
        }
    }

    function displayError(err) {
        console.error(err);
        displayMessage(err, 'alert-danger');
    }

    function displayMessage(msg, css) {
        if (css == undefined) { css = 'alert-info'; }

        var timeout = setTimeout(function () { $('#' + timeout).alert('close'); }, 5000);

        var alert = $("<div/>").addClass('alert alert-dismissible fade in ' + css)
            .css('max-height', '20em').css('overflow', 'auto')
            .attr('id', timeout).attr('role', 'alert');
        alert.html("<button type='button' class='close' data-dismiss='alert'>&times;</button>" + msg);

        $("#qz-alert").append(alert);
    }

    function pinMessage(msg, id, css) {
        if (css == undefined) { css = 'alert-info'; }

        var alert = $("<div/>").addClass('alert alert-dismissible fade in ' + css)
            .css('max-height', '20em').css('overflow', 'auto').attr('role', 'alert')
            .html("<button type='button' class='close' data-dismiss='alert'>&times;</button>");

        var text = $("<div/>").html(msg);
        if (id != undefined) { text.attr('id', id); }

        alert.append(text);

        $("#qz-pin").append(alert);
    }

    function updateState(text, css) {
        $("#qz-status").html(text);
        $("#qz-connection").removeClass().addClass('panel panel-' + css);

        if (text === "Inactive" || text === "Error") {
            $("#launch").show();
        } else {
            $("#launch").hide();
        }
    }

    function getPath() {
        var path = window.location.href;
        return path.substring(0, path.lastIndexOf("/"));
    }

    function usbButton(ids, data) {
        var click = "";
        for (var i = 0; i < ids.length; i++) {
            var $id = "$('#" + ids[i] + "')";
            click += $id + ".val('" + (data[i] ? data[i] : "") + "');" + $id + ".blur();" + $id + ".fadeOut(300).fadeIn(500);";
        }
        return '<button class="btn btn-default btn-xs" onclick="' + click + '" data-dismiss="alert">Use This</button>';
    }

    function serialButton(serialPort, data) {
        var click = "";
        for (var i = 0; i < serialPort.length; i++) {
            click += "$('#" + serialPort[i] + "').val('" + data[i] + "');$('#" + serialPort[i] + "').fadeOut(300).fadeIn(500);";
        }
        return '<button class="btn btn-default btn-xs" onclick="' + click + '" data-dismiss="alert">Use This</button>';
    }

    function formatHexInput(inputId) {
        var $input = $('#' + inputId);
        var val = $input.val();

        if (val.length > 0 && val.substring(0, 2) != '0x') {
            val = '0x' + val;
        }

        $input.val(val.toLowerCase());
    }

    /** Attempts to parse scale reading from USB raw output */
    function readScaleData(data) {
        // Filter erroneous data
        if (data.length < 4 || data.slice(2, 8).join('') == "000000000000") {
            return null;
        }

        // Get status
        var status = parseInt(data[1], 16);
        switch (status) {
            case 1: // fault
            case 5: // underweight
            case 6: // overweight
            case 7: // calibrate
            case 8: // re-zero
                status = 'Error';
                break;
            case 3: // busy
                status = 'Busy';
                break;
            case 2: // stable at zero
            case 4: // stable non-zero
            default:
                status = 'Stable';
        }

        // Get precision
        var precision = parseInt(data[3], 16);
        precision = precision ^ -256; //unsigned to signed

        // xor on 0 causes issues
        if (precision == -256) { precision = 0; }

        // Get units
        var units = parseInt(data[2], 16);
        switch (units) {
            case 2:
                units = 'g';
                break;
            case 3:
                units = 'kg';
                break;
            case 11:
                units = 'oz';
                break;
            case 12:
            default:
                units = 'lbs';
        }

        // Get weight
        data.splice(0, 4);
        data.reverse();
        var weight = parseInt(data.join(''), 16);

        weight *= Math.pow(10, precision);
        weight = weight.toFixed(Math.abs(precision));

        return weight + units + ' - ' + status;
    }


    /// QZ Config ///
    var cfg = null;
    function getUpdatedConfig() {
        if (cfg == null) {
            cfg = qz.configs.create(null);
        }

        updateConfig();
        return cfg
    }

    function updateConfig() {
        var pxlSize = null;
        if ($("#pxlSizeActive").prop('checked')) {
            pxlSize = {
                width: $("#pxlSizeWidth").val(),
                height: $("#pxlSizeHeight").val()
            };
        }

        var pxlMargins = $("#pxlMargins").val();
        if ($("#pxlMarginsActive").prop('checked')) {
            pxlMargins = {
                top: $("#pxlMarginsTop").val(),
                right: $("#pxlMarginsRight").val(),
                bottom: $("#pxlMarginsBottom").val(),
                left: $("#pxlMarginsLeft").val()
            };
        }

        var copies = 1;
        var jobName = null;
        if ($("#rawTab").hasClass("active")) {
            copies = $("#rawCopies").val();
            jobName = $("#rawJobName").val();
        } else {
            copies = $("#pxlCopies").val();
            jobName = $("#pxlJobName").val();
        }

        cfg.reconfigure({
            altPrinting: $("#rawAltPrinting").prop('checked'),
            encoding: $("#rawEncoding").val(),
            endOfDoc: $("#rawEndOfDoc").val(),
            perSpool: $("#rawPerSpool").val(),

            colorType: $("#pxlColorType").val(),
            copies: copies,
            density: $("#pxlDensity").val(),
            duplex: $("#pxlDuplex").prop('checked'),
            interpolation: $("#pxlInterpolation").val(),
            jobName: jobName,
            legacy: $("#pxlLegacy").prop('checked'),
            margins: pxlMargins,
            orientation: $("#pxlOrientation").val(),
            paperThickness: $("#pxlPaperThickness").val(),
            printerTray: $("#pxlPrinterTray").val(),
            rasterize: $("#pxlRasterize").prop('checked'),
            rotation: $("#pxlRotation").val(),
            scaleContent: $("#pxlScale").prop('checked'),
            size: pxlSize,
            units: $("input[name='pxlUnits']:checked").val()
        });
    }

    function setPrintFile() {
        setPrinter({ file: $("#askFile").val() });
        $("#askFileModal").modal('hide');
    }

    function setPrintHost() {
        setPrinter({ host: $("#askHost").val(), port: $("#askPort").val() });
        $("#askHostModal").modal('hide');
    }

    function setPrinter(printer) {
        var cf = getUpdatedConfig();
        cf.setPrinter(printer);

        if (printer && typeof printer === 'object' && printer.name == undefined) {
            var shown;
            if (printer.file != undefined) {
                shown = "<em>FILE:</em> " + printer.file;
            }
            if (printer.host != undefined) {
                shown = "<em>HOST:</em> " + printer.host + ":" + printer.port;
            }

            $("#configPrinter").html(shown);
        } else {
            if (printer && printer.name != undefined) {
                printer = printer.name;
            }

            if (printer == undefined) {
                printer = 'NONE';
            }
            $("#configPrinter").html(printer);
        }
    }
</script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-2.2.0.min.js"></script>

@section scripts{
    <script type="text/javascript">

        //var wcppPingDelay_ms = 5000;

        var wcppPingTimeout_ms = 10000; //10 sec
        var wcppPingTimeoutStep_ms = 500; //0.5 sec

        function wcppDetectOnSuccess() {
            // WCPP utility is installed at the client side
            // redirect to WebClientPrint sample page

            // get WCPP version
            var wcppVer = arguments[0];
            if (wcppVer.substring(0, 1) == "4") {
                $('#msgInProgress').hide();
                $('#msgInstallWCPP').hide();
                $('#dvPrintersInfo').show();
                jsWebClientPrint.getPrintersInfo();
            }
            else //force to install WCPP v3.0
                wcppDetectOnFailure();
        }

        function wcppDetectOnFailure() {
            // It seems WCPP is not installed at the client side
            // ask the user to install it
            $('#msgInProgress').hide();
            $('#msgInstallWCPP').show();
        }


    </script>
    @* Register the WebClientPrint script code generated by HomeController under PrintersInfo action. *@
    @Html.Raw(ViewBag.WCPPDetectionScript)
    @Html.Raw(ViewBag.WCPScript);
    @Html.Raw(ViewBag.WCPPrintScript);
}