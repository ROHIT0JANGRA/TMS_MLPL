@model CodeLock.Models.MrRegister
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("", "", FormMethod.Post, new { @class = "j-forms" }))
{
    <div class="widget-wrap">
        <div class="row">
            <div class="col-sm-4">
                @Html.Label(" Bill Date", new { @class = "label" })
                <div class="clearfix">
                    <div id="drDate"></div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerCode, new { @class = "label" })
                    <div class="input">
                        @Html.HiddenFor(model => model.CustomerId, new { @id = "hdnCustomerId" })
                        @Html.TextBoxFor(model => model.CustomerCode, new { @class = "form-control", @id = "txtCustomerCode" })
                    </div>
                    @Html.ValidationMessageFor(model => model.CustomerCode)
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.Label(" ", new { @class = "label" })
                    @Html.LabelFor(model => model.CustomerName, " ", new { @class = "label-bold", @id = "lblCustomer" })
                    @Html.HiddenFor(model => model.CustomerName, new { @id = "hdnCustomerName" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <div class="form-group">
                    <div class="inline-group">
                        @Html.Label(" ", new { @class = "label" })
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.IsCumulative, true, new { @id = "rdIndividual" })
                            <i></i>
                            @Html.LabelFor(model => model.IsCumulative, "Individual", new { @for = "rdIndividual" })
                        </label>
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.IsCumulative, false, new { @id = "rdCumulative" })
                            <i></i>
                            @Html.LabelFor(model => model.IsCumulative, "Cumulative(Transaction includes all branches)", new { @for = "rdCumulative" })
                        </label>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LocationId, new { @class = "label" })
                    <div class="select">
                        @Html.DropDownListFor(model => model.LocationId, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control", @id = "ddlLocationId" })
                        <i></i>
                    </div>
                    @Html.ValidationMessageFor(model => model.LocationId)
                </div>
            </div>
        </div>

        <div class="page-separator">OR</div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MrNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.MrNo, new { @class = "form-control", @id = "txtMrNo" })
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerBillNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.CustomerBillNo, new { @class = "form-control", @id = "txtCustomerBillNo" })
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DocketNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.DocketNo, new { @class = "form-control", @id = "txtDocketNo" })
                    </div>
                </div>
            </div>
        </div>
        <div class="page-separator">OR</div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ManualMrNo, new { @class = "label" })
                    <div class="input">
                        @Html.TextBoxFor(model => model.ManualMrNo, new { @class = "form-control", @id = "txtManualMrNo" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-footer">
            <button type="submit" id="btnSubmit" class="btn btn-success primary-btn" tabindex="3">View Report   </button>
        </div>
    </div>
}

<script>
    var drDate, hdnCustomerId, txtCustomerCode, lblCustomer, txtCustomerBillNo, txtMrNo, txtDocketNo, txtManualMrNo, ddlLocationId;
    var customerMasterUrl;
    $(document).ready(function () {
        SetPageLoad('Mr Register', 'Report', '', '', '');

        drDate = InitDateRange('drDate', DateRange.LastWeek,false);
        hdnCustomerId = $('#hdnCustomerId');
        txtCustomerCode = $('#txtCustomerCode');
        lblCustomer = $('#lblCustomer');
        txtMrNo = $('#txtMrNo');
        txtCustomerBillNo = $('#txtCustomerBillNo');
        txtDocketNo = $('#txtDocketNo');
        ddlLocationId = $('#ddlLocationId');
        txtManualMrNo = $('#txtManualMrNo');
        rdIndividual = $('#rdIndividual');
        rdCumulative = $('#rdCumulative');
        customerMasterUrl = '/AC_Micro_Test/Master/Customer';

        locationUrl = '@Url.Action("", "Location", new { Area = "Master" })';
        CustomerAutoComplete('txtCustomerCode', 'hdnCustomerId');
        txtCustomerCode.blur(function () { return IsCustomerCodeExist(txtCustomerCode, hdnCustomerId, lblCustomer); });
        btnSubmit = $('#btnSubmit');
        btnSubmit.click(ViewReport);
        rdIndividual.change(OnIsIndividualChange);
        rdCumulative.change(OnIsIndividualChange);
    });
    function OnIsIndividualChange() {
        var requestData = { isRegion: rdIndividual.IsChecked }
        AjaxRequestWithPostAndJson(locationUrl + '/GetLocationByHierarchyId', JSON.stringify(requestData), function (responseData) {
            BindDropDownList('ddlLocationId', responseData, 'Value', 'Name', '', 'Select Location');
        }, ErrorFunction, false);
    }
    function CheckValidCustomerCode(txtCustomerCode, hdnCustomerId) {
        if (txtCustomerCode.val() != "") {
            var requestData = { customerCode: txtCustomerCode.val() };
            AjaxRequestWithPostAndJson(customerMasterUrl + '/CheckValidCustomerCodeByCompanyId', JSON.stringify(requestData), function (result) {
                if (result.Value > 0) {
                    hdnCustomerId.val(result.Value);
                    txtCustomerCode.val(result.Name);
                    lblCustomer.text(result.Description);
                }
                else {
                    ShowMessage('Customer is not exist');
                    txtCustomerCode.val('');
                    hdnCustomerId.val(0);
                    lblCustomer.text('');
                    txtCustomerCode.focus();
                }
            }, ErrorFunction, false);
        }
        else {
            hdnCustomerId.val(0);
            txtCustomerCode.val('');
            lblCustomer.text('');
        }
    }

    function ViewReport() {
        var prmList = [
            { Name: "FromDate", Value: drDate.startDate },
            { Name: "ToDate", Value: drDate.endDate },
            { Name: "CustomerId", Value: txtCustomerCode == '' ? 0 : hdnCustomerId.val() },
            { Name: "CustomerBillNo", Value: txtCustomerBillNo.val() },
            { Name: "MrNo", Value: txtMrNo.val() },
            { Name: "DocketNo", Value: txtDocketNo.val() },
            { Name: "IsCumulative", Value: rdCumulative.IsChecked },
            { Name: "LocationId", Value: ddlLocationId.val() },
            { Name: "ManualMrNo", Value: txtManualMrNo.val() }
        ];

        var reportInfo = { PrmList: prmList, Name: 'MrRegisterReport', Description: 'MR Register' };
        return ShowReport(reportInfo);
    }
</script>


