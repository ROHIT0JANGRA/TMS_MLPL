@using CodeLock.Models
@model VendorBillReAssign
@{
    ViewBag.Title = "Vendor Bill Re-Assign";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    baseUrl = '@Url.Action("", "VendorBillReAssign")';
    docketNomenclature = '@SessionUtility.DocketNomenClature';
</script>
@using (Html.BeginForm("VendorBillReAssign", "VendorPayment", FormMethod.Post, new { @class = "j-forms" }))
{
    <div class="widget-wrap">
        <div class="page-separator"><span class="page-separator" id="spnMassage">Re-Assign Bill</span></div>

        <div id="dvStep1">
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillNo, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.BillNo, new { @class = "form-control", @id = "txtBillNo" })
                            @Html.HiddenFor(model => model.BillId, new { @id = "hdnBillId" })
                        </div>
                        @Html.ValidationMessageFor(model => model.BillNo)
                    </div>
                </div>
            </div>
        </div>
        <div id="dvStep2" style="display:none;">
            <div class="page-separator"><span class="page-separator" id="spnMassage"> Detail</span></div>

            <div class="row">
                <div class="col-sm-12">
                    <b>Note :-</b> You can re-assign only finalized bill
                </div>
            </div>

            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Vendor, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.Vendor, new { @class = "form-control textlabel", @id = "txVendor" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.Location, new { @class = "form-control textlabel", @id = "txLocation" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PaymentLocation, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.PaymentLocation, new { @class = "form-control textlabel", @id = "txtPaymentLocation" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ManualBillNo, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.ManualBillNo, new { @class = "form-control textlabel", @id = "txManualBillNo" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillDate, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.BillDate, new { @class = "form-control textlabel", @id = "txBillDate" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.LocationId, new { @class = "label" })
                        <div class="input">
                            @Html.DropDownListFor(model => model.LocationId, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2", @id = "ddlLocationId", @placeholder = "Select Collection Location" })
                        </div>
                        @Html.ValidationMessageFor(model => model.LocationId)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PaymentLocationId, new { @class = "label" })
                        <div class="input">
                            @Html.DropDownListFor(model => model.PaymentLocationId, new SelectList(ViewBag.LocationList, "Value", "Name"), new { @class = "form-control select2", @id = "ddlPaymentLocationId", @placeholder = "Select Collection Location" })
                        </div>
                        @Html.ValidationMessageFor(model => model.PaymentLocationId)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Remarks, new { @class = "label" })
                        <div class="input">
                            @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control", @id = "txRemarks" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Remarks)
                    </div>
                </div>

                <div class="col-sm-1">
                    <div class="align-right">
                        <div class="clearfix">
                            <button type="submit" class="btn btn-primary m-" id="btnSubmit">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script>
    var baseUrl;
    $(document).ready(function () {
        InitObjects();
        AttachEvents();
    });

    function AttachEvents() {
        txtBillNo.blur(function () { CheckValidDocumentType(); });
    }
    function InitObjects() {
        txtBillNo = $("#txtBillNo");
        hdnBillId = $("#hdnBillId");
        txCustomer = $("#txVendor");
        txCollectionLocation = $("#txLocation");
        ddlToLocationId = $("#ddlToLocationId");
        txManualBillNo = $("#txManualBillNo");
        txBillDate = $("#txBillDate");
        baseUrl = '@Url.Action("", "VendorPayment", new { Area = "Finance" })';
    }
    
    function CheckValidDocumentType() {
        if (txtBillNo.val() != '') {
            var requestData = { BillNo: txtBillNo.val() };
            AjaxRequestWithPostAndJson(baseUrl + '/CheckValidVendorBillNoForReAssign', JSON.stringify(requestData), function (result) {

                if (result != null) {

                    $('#dvStep1').pointerEvent(false);
                    $('#dvStep2').show();
                    hdnBillId.val(result.BillId);
                    $('#txVendor').val(result.Vendor);
                    $('#txLocation').val(result.Location);
                    $('#txManualBillNo').val(result.ManualBillNo);
                    $('#txtPaymentLocation').val(result.PaymentLocation);
                    txBillDate.val($.displayDate(result.BillDate));

                    if (result.Submit == "No")
                        $("#btnSubmit").hide()

                    return true;
                }
                else {
                    ShowMessage(txtBillNo.val() + ' is not valid for Re-Assign');
                    txtBillNo.val('');
                    hdnBillId.val('');
                    txtBillNo.focus();
                    return false;
                }
            }, ErrorFunction, false);
        }
    }
</script>
